     1                                  ; ------------------------------------------------------------------
     2                                  ; MichalOS Music Player
     3                                  ; ------------------------------------------------------------------
     4                                  
     5                                  	%INCLUDE "include/program.inc"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; Include file for MichalOS program or kernel module development
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> 	BITS 16
     6                              <1> 	ORG 100h
     7                              <1> 	
     8                              <1> 	%include "include/constants.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS kernel/program development - constants & macros
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ------------------------------------------------------------------
     6                              <2> ; COLOURS (eg for os_draw_background and os_draw_block)
     7                              <2> 
     8                              <2> %DEFINE BLACK_ON_WHITE		11110000b
     9                              <2> %DEFINE WHITE_ON_BLACK		00001111b
    10                              <2> 
    11                              <2> ; ------------------------------------------------------------------
    12                              <2> ; KEYS
    13                              <2> 
    14                              <2> %DEFINE KEY_UP		72
    15                              <2> %DEFINE KEY_DOWN	80
    16                              <2> %DEFINE KEY_LEFT	75
    17                              <2> %DEFINE KEY_RIGHT	77
    18                              <2> 
    19                              <2> %DEFINE KEY_ESC		27
    20                              <2> %DEFINE KEY_ENTER	13
    21                              <2> 
    22                              <2> ; ------------------------------------------------------------------
    23                              <2> ; MACROS
    24                              <2> 
    25                              <2> %macro syscall 1
    26                              <2> 	mov bp, %1
    27                              <2> 	call os_syscall
    28                              <2> %endmacro
    29                              <2> 
    30                              <2> %macro clr 1
    31                              <2> 	xor %1, %1
    32                              <2> %endmacro
    33                              <2> 
    34                              <2> %macro mov16 3
    35                              <2> 	mov %1, (%2 + %3 * 256)
    36                              <2> %endmacro
    37                              <2> 
    38                              <2> %macro movs 2
    39                              <2> 	push %2
    40                              <2> 	pop %1
    41                              <2> %endmacro
    42                              <2> 
    43                              <2> ; ------------------------------------------------------------------
    44                              <2> ; MEMORY LOCATIONS
    45                              <2> 
    46                              <2> %define ADLIB_BUFFER 0500h
    47                              <2> %define DESKTOP_BACKGROUND 0600h
    48                              <2> %define SYSTEM_FONT 1600h
    49                              <2> %define FILE_MANAGER 2600h
    50                              <2> %define DISK_PARAMS 2E00h
    51                              <2> 
    52                              <2> %define DISK_BUFFER 0E000h
    53                              <2> %define CONFIG_FILE 57000
    54                              <2> %define CONFIG_FILE_SIZE 83
    55                              <2> 
    56                              <2> ; ------------------------------------------------------------------
    57                              <2> ; CONFIG FILE LOCATIONS
    58                              <2> 
    59                              <2> %define CONFIG(x) (CONFIG_FILE + x)
    60                              <2> 
    61                              <2> ; 0 = Desktop background color (BYTE)
    62                              <2> %define CONFIG_DESKTOP_BG_COLOR CONFIG(0)
    63                              <2> 
    64                              <2> ; 1 = Window background color (BYTE)
    65                              <2> %define CONFIG_WINDOW_BG_COLOR CONFIG(1)
    66                              <2> 
    67                              <2> ; 2 = Password enabled (BYTE)
    68                              <2> %define CONFIG_PASSWORD_ENABLED CONFIG(2)
    69                              <2> 
    70                              <2> ; 3 - 35 = Password data (STRING, 32 chars + '\0')
    71                              <2> %define CONFIG_PASSWORD CONFIG(3)
    72                              <2> %define CFG_PASSWORD_MAX_INPUT_LENGTH 32
    73                              <2> %define CFG_PASSWORD_MAX_LENGTH 33
    74                              <2> 
    75                              <2> ; 36 - 68 = Username (STRING, 32 chars + '\0')
    76                              <2> %define CONFIG_USERNAME CONFIG(36)
    77                              <2> %define CFG_USERNAME_MAX_INPUT_LENGTH 32
    78                              <2> %define CFG_USERNAME_MAX_LENGTH 33
    79                              <2> 
    80                              <2> ; 69 - Sound enabled on startup (BYTE)
    81                              <2> %define CONFIG_SOUND_ENABLED CONFIG(69)
    82                              <2> 
    83                              <2> ; 70 - Adlib driver number
    84                              <2> %define CONFIG_ADLIB_DRIVER CONFIG(70)
    85                              <2> %define CFG_ADLIB_STD_DRIVER 0
    86                              <2> %define CFG_ADLIB_PWM_DRIVER 1
    87                              <2> %define CFG_ADLIB_PWM_LOUD_DRIVER 2
    88                              <2> 
    89                              <2> ; 71 - Menu screen dimming enabled (BYTE)
    90                              <2> %define CONFIG_MENU_DIMMING CONFIG(71)
    91                              <2> 
    92                              <2> ; 72 - Menu color (BYTE)
    93                              <2> %define CONFIG_MENU_BG_COLOR CONFIG(72)
    94                              <2> 
    95                              <2> ; 73 - "DOS" font enabled (BYTE)
    96                              <2> %define CONFIG_FONT CONFIG(73)
    97                              <2> %define CFG_FONT_MICHALOS 0
    98                              <2> %define CFG_FONT_BIOS 1
    99                              <2> 
   100                              <2> ; 74 - Minutes to wait for screensaver (BYTE)
   101                              <2> %define CONFIG_SCREENSAVER_MINUTES CONFIG(74)
   102                              <2> 
   103                              <2> ; 75 - System stack size in 16-byte blocks (WORD)
   104                              <2> %define CONFIG_STACKSGMT_SIZE CONFIG(75)
   105                              <2> 
   106                              <2> ; 77 - 80 - Unused *******************************
   107                              <2> 
   108                              <2> ; 81 - Minute time offset (WORD)
   109                              <2> %define CONFIG_TIMEZONE_OFFSET CONFIG(81)
   110                              <2> 
   111                              <2> ; ------------------------------------------------------------------
   112                              <2> ; MUSICAL NOTE FREQUENCY LIST
   113                              <2> 
   114                              <2> A2		equ 110
   115                              <2> AS2		equ 117
   116                              <2> B2		equ 124
   117                              <2> C3		equ 131
   118                              <2> CS3		equ 139
   119                              <2> D3		equ 147
   120                              <2> DS3		equ 156
   121                              <2> E3		equ 165
   122                              <2> F3		equ 175
   123                              <2> FS3		equ 185
   124                              <2> G3		equ 196
   125                              <2> GS3		equ 208
   126                              <2> A3		equ 220
   127                              <2> AS3		equ 233
   128                              <2> B3		equ 247
   129                              <2> C4		equ 262
   130                              <2> CS4		equ 277
   131                              <2> D4		equ 294
   132                              <2> DS4		equ 311
   133                              <2> E4		equ 330
   134                              <2> F4		equ 349
   135                              <2> FS4		equ 370
   136                              <2> G4		equ 392
   137                              <2> GS4		equ 415
   138                              <2> A4		equ 440
   139                              <2> AS4		equ 466
   140                              <2> B4		equ 494
   141                              <2> C5		equ 523
   142                              <2> CS5		equ 554
   143                              <2> D5		equ 587
   144                              <2> DS5		equ 622
   145                              <2> E5		equ 659
   146                              <2> F5		equ 698
   147                              <2> FS5		equ 740
   148                              <2> G5		equ 784
   149                              <2> GS5		equ 831
   150                              <2> A5		equ 880
   151                              <2> AS5		equ 932
   152                              <2> B5		equ 988
   153                              <2> C6		equ 1046
   154                              <2> CS6		equ 1109
   155                              <2> D6		equ 1175
   156                              <2> DS6		equ 1245
   157                              <2> E6		equ 1319
   158                              <2> F6		equ 1397
   159                              <2> FS6		equ 1480
   160                              <2> G6		equ 1568
   161                              <2> GS6		equ 1661
   162                              <2> A6		equ 1760
   163                              <2> AS6		equ 1865
   164                              <2> B6		equ 1976
   165                              <2> C7		equ 2093
   166                              <2> CS7		equ 2217
   167                              <2> D7		equ 2349
   168                              <2> DS7		equ 2489
   169                              <2> E7		equ 2637
   170                              <2> F7		equ 2794
   171                              <2> FS7		equ 2960
   172                              <2> G7		equ 3136
   173                              <2> GS7		equ 3322
   174                              <2> A7		equ 3520
   175                              <2> AS7		equ 3729
   176                              <2> B7		equ 3951
   177                              <2> C8		equ 4186
   178                              <2> CS8		equ 4435
   179                              <2> D8		equ 4699
   180                              <2> DS8		equ 4978
   181                              <2> E8		equ 5274
   182                              <2> F8		equ 5588
   183                              <2> FS8		equ 5920
   184                              <2> G8		equ 6272
   185                              <2> GS8		equ 6645
   186                              <2> A8		equ 7040
   187                              <2> AS8		equ 7459
   188                              <2> B8		equ 7902
     9                              <1> 	%include "include/syscalls.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS program development - syscalls
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ==================================================================
     6                              <2> ; MichalOS Sound functions (PC speaker, YM3812)
     7                              <2> ; ==================================================================
     8                              <2> 
     9                              <2> ; ------------------------------------------------------------------
    10                              <2> ; os_speaker_tone -- Generate PC speaker tone (call os_speaker_off to turn off)
    11                              <2> ; IN: AX = note frequency (in Hz)
    12                              <2> ; OUT: None, registers preserved
    13                              <2> 
    14                              <2> os_speaker_tone equ 32795
    15                              <2> 
    16                              <2> ; ------------------------------------------------------------------
    17                              <2> ; os_speaker_raw_period -- Generate PC speaker tone (call os_speaker_off to turn off)
    18                              <2> ; IN: AX = note period (= 105000000 / 88 / freq)
    19                              <2> ; OUT: None, registers preserved
    20                              <2> 
    21                              <2> os_speaker_raw_period equ 33107
    22                              <2> 
    23                              <2> ; ------------------------------------------------------------------
    24                              <2> ; os_speaker_note_length -- Generate PC speaker tone for a set amount of time and then stop
    25                              <2> ; IN: AX = note frequency, CX = length (in ticks)
    26                              <2> ; OUT: None, registers preserved
    27                              <2> 
    28                              <2> os_speaker_note_length equ 32900
    29                              <2> 
    30                              <2> ; ------------------------------------------------------------------
    31                              <2> ; os_speaker_off -- Turn off PC speaker
    32                              <2> ; IN/OUT: None, registers preserved
    33                              <2> 
    34                              <2> os_speaker_off equ 32798
    35                              <2> 
    36                              <2> ; ------------------------------------------------------------------
    37                              <2> ; os_speaker_muted -- Check if the PC speaker is muted
    38                              <2> ; OUT: ZF set if muted, clear if not
    39                              <2> 
    40                              <2> os_speaker_muted equ 33125
    41                              <2> 
    42                              <2> ; ------------------------------------------------------------------
    43                              <2> ; os_start_adlib -- Starts the selected Adlib driver
    44                              <2> ; IN: SI = interrupt handler, CX = prescaler, BL = number of channels
    45                              <2> ; The interrupt will fire at 33144 Hz (the closest possible to 32768 Hz) divided by CX.
    46                              <2> ; Common prescaler values:
    47                              <2> ;		33 = ~1 kHz (1004.362 Hz)
    48                              <2> ;		663 = ~50 Hz (49.991 Hz)
    49                              <2> ;		1820 = ~18.2 Hz (18.211 Hz)
    50                              <2> ; OUT: None, registers preserved
    51                              <2> 
    52                              <2> os_start_adlib equ 32984
    53                              <2> 
    54                              <2> ; ------------------------------------------------------------------
    55                              <2> ; os_stop_adlib -- Stops the Adlib driver
    56                              <2> ; IN/OUT: None, registers preserved
    57                              <2> 
    58                              <2> os_stop_adlib equ 33026
    59                              <2> 
    60                              <2> ; ------------------------------------------------------------------
    61                              <2> ; os_adlib_regwrite -- Write to a YM3812 register
    62                              <2> ; IN: AH/AL - register address/value to write
    63                              <2> 
    64                              <2> os_adlib_regwrite equ 32843
    65                              <2> 
    66                              <2> ; ------------------------------------------------------------------
    67                              <2> ; os_adlib_mute -- Mute the YM3812's current state
    68                              <2> ; IN/OUT: None
    69                              <2> 
    70                              <2> os_adlib_mute equ 33044
    71                              <2> 
    72                              <2> ; ------------------------------------------------------------------
    73                              <2> ; os_adlib_unmute -- Unmute the YM3812's current state
    74                              <2> ; IN/OUT: None
    75                              <2> 
    76                              <2> os_adlib_unmute equ 33089
    77                              <2> 
    78                              <2> ; ------------------------------------------------------------------
    79                              <2> ; os_adlib_calcfreq -- Play a frequency
    80                              <2> ; IN: AX - frequency, CL = channel
    81                              <2> ; OUT: None, registers preserved
    82                              <2> 
    83                              <2> os_adlib_calcfreq equ 32966
    84                              <2> 
    85                              <2> ; ------------------------------------------------------------------
    86                              <2> ; os_adlib_noteoff -- Turns off a note
    87                              <2> ; IN: CL = channel
    88                              <2> ; OUT: None, registers preserved
    89                              <2> 
    90                              <2> os_adlib_noteoff equ 33029
    91                              <2> 
    92                              <2> ; ==================================================================
    93                              <2> ; MichalOS Text display output functions
    94                              <2> ; ==================================================================
    95                              <2> 
    96                              <2> ; ------------------------------------------------------------------
    97                              <2> ; os_putchar -- Puts a character on the screen
    98                              <2> ; IN: AL = character
    99                              <2> ; OUT: None, registers preserved
   100                              <2> 
   101                              <2> os_putchar equ 32981
   102                              <2> 
   103                              <2> ; ------------------------------------------------------------------
   104                              <2> ; os_put_chars -- Puts up to a set amount of characters on the screen
   105                              <2> ; IN: BL = terminator, DS:SI = location, CX = character count
   106                              <2> ; OUT: None, registers preserved
   107                              <2> 
   108                              <2> os_put_chars equ 32996
   109                              <2> 
   110                              <2> ; ------------------------------------------------------------------
   111                              <2> ; os_print_string -- Displays text
   112                              <2> ; IN: DS:SI = message location (zero-terminated string)
   113                              <2> ; OUT: None, registers preserved
   114                              <2> 
   115                              <2> os_print_string equ 32771
   116                              <2> 
   117                              <2> ; ------------------------------------------------------------------
   118                              <2> ; os_print_string_box -- Displays text inside a text-box.
   119                              <2> ; IN: DS:SI = message location (zero-terminated string), DL = left alignment
   120                              <2> ; OUT: None, registers preserved
   121                              <2> 
   122                              <2> os_print_string_box equ 32993
   123                              <2> 
   124                              <2> ; ------------------------------------------------------------------
   125                              <2> ; os_format_string -- Displays colored text
   126                              <2> ; IN: DS:SI = message location (zero-terminated string), BL = text color
   127                              <2> ; OUT: None, registers preserved
   128                              <2> 
   129                              <2> os_format_string equ 32978
   130                              <2> 
   131                              <2> ; ------------------------------------------------------------------
   132                              <2> ; os_clear_screen -- Clears the screen to background
   133                              <2> ; IN/OUT: None, registers preserved
   134                              <2> 
   135                              <2> os_clear_screen equ 32777
   136                              <2> 
   137                              <2> ; ------------------------------------------------------------------
   138                              <2> ; os_move_cursor -- Moves cursor in text mode
   139                              <2> ; IN: DH, DL = row, column
   140                              <2> ; OUT: None, registers preserved
   141                              <2> 
   142                              <2> os_move_cursor equ 32774
   143                              <2> 
   144                              <2> ; ------------------------------------------------------------------
   145                              <2> ; os_get_cursor_pos -- Return position of text cursor
   146                              <2> ; IN: None
   147                              <2> ; OUT: DH, DL = row, column
   148                              <2> 
   149                              <2> os_get_cursor_pos equ 32870
   150                              <2> 
   151                              <2> ; ------------------------------------------------------------------
   152                              <2> ; os_show_cursor -- Turns on cursor in text mode
   153                              <2> ; IN/OUT: None, registers preserved
   154                              <2> 
   155                              <2> os_show_cursor equ 32903
   156                              <2> 
   157                              <2> ; ------------------------------------------------------------------
   158                              <2> ; os_hide_cursor -- Turns off cursor in text mode
   159                              <2> ; IN/OUT: None, registers preserved
   160                              <2> 
   161                              <2> os_hide_cursor equ 32906
   162                              <2> 
   163                              <2> ; ------------------------------------------------------------------
   164                              <2> ; os_draw_block -- Render block of specified colour
   165                              <2> ; IN: BL/DL/DH/SI/DI = colour/start X pos/start Y pos/width/finish Y pos
   166                              <2> ; OUT: None, registers preserved
   167                              <2> 
   168                              <2> os_draw_block equ 32945
   169                              <2> 
   170                              <2> ; ------------------------------------------------------------------
   171                              <2> ; os_file_selector -- Show a file selection dialog
   172                              <2> ; IN: None
   173                              <2> ; OUT: AX = location of filename string (or carry set if Esc pressed)
   174                              <2> 
   175                              <2> os_file_selector equ 32855
   176                              <2> 
   177                              <2> ; ------------------------------------------------------------------
   178                              <2> ; os_file_selector_filtered -- Show a file selection dialog only 
   179                              <2> ; with files mathing the filter
   180                              <2> ; IN: ES:BX = location of file extension list (0 if none)
   181                              <2> ; OUT: DS:AX = location of filename string (or carry set if Esc pressed)
   182                              <2> 
   183                              <2> os_file_selector_filtered equ 33122
   184                              <2> 
   185                              <2> ; ------------------------------------------------------------------
   186                              <2> ; os_list_dialog_tooltip -- Show a dialog with a list of options and a tooltip.
   187                              <2> ; That means, when the user changes the selection, the application will be called back
   188                              <2> ; to change the tooltip's contents.
   189                              <2> ; IN: DS:AX = comma-separated list of strings to show (zero-terminated),
   190                              <2> ;     DS:BX = first help string, DS:CX = second help string
   191                              <2> ;     SI = key/display callback (see os_list_dialog_ex)
   192                              <2> ;     if AX = 0: DI = entry display callback, DX = number of entries
   193                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   194                              <2> 
   195                              <2> os_list_dialog_tooltip equ 32912
   196                              <2> 
   197                              <2> ; ------------------------------------------------------------------
   198                              <2> ; os_list_dialog -- Show a dialog with a list of options
   199                              <2> ; IN: ES:AX = comma-separated list of strings to show (zero-terminated),
   200                              <2> ;     ES:BX = first help string, ES:CX = second help string
   201                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   202                              <2> 
   203                              <2> os_list_dialog equ 32936
   204                              <2> 
   205                              <2> ; ------------------------------------------------------------------
   206                              <2> ; os_list_dialog_ex -- Show a dialog with a list of options
   207                              <2> ; IN: DS:BX = pointer to setup struct
   208                              <2> ;       Addr Size Description
   209                              <2> ;       000h word Pointer to entry display callback (accepts CX as entry ID, prints out result) - valid only if ptr to list is zero
   210                              <2> ;       002h word Pointer to comma-separated list of strings to show (zero-terminated)
   211                              <2> ;       004h word Pointer to key/entry change callback (accepts AX as entry ID, CX as keypress),
   212                              <2> ;       006h word Number of entries (if 0, then it is automatically calculated from 002h)
   213                              <2> ;       008h word Pointer to first help string (if 0, then the list will fill the whole dialog)
   214                              <2> ;       00Ah word Pointer to second help string
   215                              <2> ;       00Ch word (ES) Pointer to history data (points to a 5 byte array)
   216                              <2> ;       00Eh byte Screen X position
   217                              <2> ;       00Fh byte Screen Y position
   218                              <2> ;       010h byte Dialog width
   219                              <2> ;       011h byte Dialog height
   220                              <2> ;       012h word Source segment (used for comma-separated list & help strings)
   221                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   222                              <2> 
   223                              <2> os_list_dialog_ex equ 33113
   224                              <2> 
   225                              <2> ; ------------------------------------------------------------------
   226                              <2> ; os_select_list -- Draws a list of entries (defined by a callback) to select from.
   227                              <2> ; IN: AX = width/height, BL = color, CX = number of entries, DX = X/Y pos,
   228                              <2> ;     SI = callback (if C clear = accepts an entry ID in CX, prints an appropriate string,
   229                              <2> ;     if C set = accepts key input in AX, entry ID in CX; not required to preserve regs),
   230                              <2> ;     ES:DI = pointer to a history struct (word .num_of_entries, word .skip_num, byte .cursor) or 0 if none
   231                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   232                              <2> 
   233                              <2> os_select_list equ 33110
   234                              <2> 
   235                              <2> ; ------------------------------------------------------------------
   236                              <2> ; os_draw_background -- Clear screen with white top and bottom bars
   237                              <2> ; containing text, and a coloured middle section.
   238                              <2> ; IN: DS:AX/BX = top/bottom string locations, CX = colour (256 if the app wants to display the default background)
   239                              <2> ; OUT: None, registers preserved
   240                              <2> 
   241                              <2> os_draw_background equ 32807
   242                              <2> 
   243                              <2> ; ------------------------------------------------------------------
   244                              <2> ; os_print_newline -- Reset cursor to start of next line
   245                              <2> ; IN/OUT: None, registers preserved
   246                              <2> 
   247                              <2> os_print_newline equ 32783
   248                              <2> 
   249                              <2> ; ------------------------------------------------------------------
   250                              <2> ; os_dump_registers -- Dumps all register contents in hex to the screen
   251                              <2> ; IN: All registers
   252                              <2> ; OUT: None, registers preserved
   253                              <2> 
   254                              <2> os_dump_registers equ 32909
   255                              <2> 
   256                              <2> ; ------------------------------------------------------------------
   257                              <2> ; os_input_dialog -- Get text string from user via a dialog box
   258                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   259                              <2> ; OUT: None, registers preserved
   260                              <2> 
   261                              <2> os_input_dialog equ 32933
   262                              <2> 
   263                              <2> ; ------------------------------------------------------------------
   264                              <2> ; os_password_dialog -- Get a password from user via a dialog box
   265                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   266                              <2> ; OUT: None, registers preserved
   267                              <2> 
   268                              <2> os_password_dialog equ 33041
   269                              <2> 
   270                              <2> ; ------------------------------------------------------------------
   271                              <2> ; os_dialog_box -- Print dialog box in middle of screen, with button(s)
   272                              <2> ; IN: DS:AX, DS:BX, DS:CX = string locations (set registers to 0 for no display),
   273                              <2> ; IN: DX = 0 for single 'OK' dialog,
   274                              <2> ;          1 for two-button 'OK' and 'Cancel' ('OK' selected by default),
   275                              <2> ;          2 for two-button 'OK' and 'Cancel' ('Cancel' selected by default)
   276                              <2> ; OUT: If two-button mode, AX = 0 for OK and 1 for cancel
   277                              <2> ; NOTE: Each string is limited to 40 characters
   278                              <2> 
   279                              <2> os_dialog_box equ 32825
   280                              <2> 
   281                              <2> ; ------------------------------------------------------------------
   282                              <2> ; os_print_space -- Print a space to the screen
   283                              <2> ; IN/OUT: None, registers preserved
   284                              <2> 
   285                              <2> os_print_space equ 32873
   286                              <2> 
   287                              <2> ; ------------------------------------------------------------------
   288                              <2> ; os_print_digit -- Displays contents of AX as a single digit
   289                              <2> ; Works up to base 37, ie digits 0-Z
   290                              <2> ; IN: AX = "digit" to format and print
   291                              <2> ; OUT: None, registers preserved
   292                              <2> 
   293                              <2> os_print_digit equ 32879
   294                              <2> 
   295                              <2> ; ------------------------------------------------------------------
   296                              <2> ; os_print_1hex -- Displays low nibble of AL in hex format
   297                              <2> ; IN: AL = number to format and print
   298                              <2> ; OUT: None, registers preserved
   299                              <2> 
   300                              <2> os_print_1hex equ 32882
   301                              <2> 
   302                              <2> ; ------------------------------------------------------------------
   303                              <2> ; os_print_2hex -- Displays AL in hex format
   304                              <2> ; IN: AL = number to format and print
   305                              <2> ; OUT: None, registers preserved
   306                              <2> 
   307                              <2> os_print_2hex equ 32885
   308                              <2> 
   309                              <2> ; ------------------------------------------------------------------
   310                              <2> ; os_print_4hex -- Displays AX in hex format
   311                              <2> ; IN: AX = number to format and print
   312                              <2> ; OUT: None, registers preserved
   313                              <2> 
   314                              <2> os_print_4hex equ 32888
   315                              <2> 
   316                              <2> ; ------------------------------------------------------------------
   317                              <2> ; os_print_8hex - Displays EAX in hex format
   318                              <2> ; IN: EAX = unsigned integer
   319                              <2> ; OUT: None, registers preserved
   320                              <2> 
   321                              <2> os_print_8hex equ 33065
   322                              <2> 
   323                              <2> ; ------------------------------------------------------------------
   324                              <2> ; os_print_int -- Prints an integer in decimal.
   325                              <2> ; IN: AX = unsigned integer
   326                              <2> ; OUT: None, registers preserved
   327                              <2> 
   328                              <2> os_print_int equ 33101
   329                              <2> 
   330                              <2> ; ------------------------------------------------------------------
   331                              <2> ; os_print_32int -- Prints a 32 bit integer in decimal.
   332                              <2> ; IN: EAX = unsigned integer
   333                              <2> ; OUT: None, registers preserved
   334                              <2> 
   335                              <2> os_print_32int equ 32951
   336                              <2> 
   337                              <2> ; ------------------------------------------------------------------
   338                              <2> ; os_input_string -- Take string from keyboard entry
   339                              <2> ; IN: ES:AX = location of string
   340                              <2> ; OUT: None, registers preserved
   341                              <2> 
   342                              <2> os_input_string equ 32819
   343                              <2> 
   344                              <2> ; ------------------------------------------------------------------
   345                              <2> ; os_input_password -- Take password from keyboard entry
   346                              <2> ; IN: ES:AX = location of string
   347                              <2> ; OUT: None, registers preserved
   348                              <2> 
   349                              <2> os_input_password equ 33077
   350                              <2> 
   351                              <2> ; ------------------------------------------------------------------
   352                              <2> ; os_set_max_input_length -- Set the maximum length for the next string input
   353                              <2> ; IN: AL = maximum number of characters
   354                              <2> ; OUT: None, registers preserved
   355                              <2> 
   356                              <2> os_set_max_input_length equ 33131
   357                              <2> 
   358                              <2> ; ------------------------------------------------------------------
   359                              <2> ; os_input_string_ex -- Take string from keyboard entry
   360                              <2> ; IN: ES:AX = location of string, CH = 0 if normal input, 1 if password input,
   361                              <2> ;     DS:SI = callback on keys where AL = 0 (input: AX = keypress)
   362                              <2> ; OUT: None, registers preserved
   363                              <2> 
   364                              <2> os_input_string_ex equ 33119
   365                              <2> 
   366                              <2> ; ------------------------------------------------------------------
   367                              <2> ; os_color_selector - Pops up a color selector.
   368                              <2> ; IN: None
   369                              <2> ; OUT: color number (0-15)
   370                              <2> 
   371                              <2> os_color_selector equ 33053
   372                              <2> 
   373                              <2> ; ------------------------------------------------------------------
   374                              <2> ; os_temp_box -- Draws a dialog box with up to 5 lines of text.
   375                              <2> ; IN: DS:SI/AX/BX/CX/DX = string locations (or 0 for no display)
   376                              <2> ; OUT: None, registers preserved
   377                              <2> 
   378                              <2> os_temp_box equ 33086
   379                              <2> 
   380                              <2> ; ------------------------------------------------------------------
   381                              <2> ; os_reset_font -- Resets the font to the selected default.
   382                              <2> ; IN/OUT = None, registers preserved
   383                              <2> 
   384                              <2> os_reset_font equ 32990
   385                              <2> 
   386                              <2> ; ------------------------------------------------------------------
   387                              <2> ; os_draw_logo -- Draws the MichalOS logo.
   388                              <2> ; IN: None
   389                              <2> ; OUT: A very beautiful logo :-)
   390                              <2> 
   391                              <2> os_draw_logo equ 32852
   392                              <2> 
   393                              <2> ; ------------------------------------------------------------------
   394                              <2> ; os_draw_icon -- Draws an icon (in the MichalOS format).
   395                              <2> ; IN: DS:SI = address of the icon
   396                              <2> ; OUT: None, registers preserved
   397                              <2> 
   398                              <2> os_draw_icon equ 33023
   399                              <2> 
   400                              <2> ; ------------------------------------------------------------------
   401                              <2> ; os_option_menu -- Show a menu with a list of options
   402                              <2> ; IN: AX = comma-separated list of strings to show (zero-terminated)
   403                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc, left or right pressed
   404                              <2> 
   405                              <2> os_option_menu equ 32876
   406                              <2> 
   407                              <2> ; ==================================================================
   408                              <2> ; MichalOS Graphics functions
   409                              <2> ; Some graphics routines have been borrowed from TachyonOS
   410                              <2> ; ==================================================================
   411                              <2> 
   412                              <2> ; ------------------------------------------------------------------
   413                              <2> ; os_init_graphics_mode -- Initializes graphics mode.
   414                              <2> ; IN/OUT: None, registers preserved
   415                              <2> 
   416                              <2> os_init_graphics_mode equ 33020
   417                              <2> 
   418                              <2> ; ------------------------------------------------------------------
   419                              <2> ; os_init_text_mode -- Deinitializes graphics mode.
   420                              <2> ; IN/OUT: None, registers preserved
   421                              <2> 
   422                              <2> os_init_text_mode equ 33095
   423                              <2> 
   424                              <2> ; ------------------------------------------------------------------
   425                              <2> ; os_set_pixel -- Sets a pixel on the screen to a given value.
   426                              <2> ; IN: ES = destination memory segment, CX = X coordinate, AX = Y coordinate, BL = color
   427                              <2> ; OUT: None, registers preserved
   428                              <2> 
   429                              <2> os_set_pixel equ 33017
   430                              <2> 
   431                              <2> ; ------------------------------------------------------------------
   432                              <2> ; os_draw_line -- Draws a line with the Bresenham's line algorithm.
   433                              <2> ; Translated from an implementation in C (http://www.edepot.com/linebresenham.html)
   434                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour
   435                              <2> ; OUT: None, registers preserved
   436                              <2> 
   437                              <2> os_draw_line equ 32999
   438                              <2> 
   439                              <2> ; ------------------------------------------------------------------
   440                              <2> ; os_draw_rectangle -- Draws a rectangle.
   441                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour, CF = set if filled or clear if not
   442                              <2> ; OUT: None, registers preserved
   443                              <2> 
   444                              <2> os_draw_rectangle equ 33047
   445                              <2> 
   446                              <2> ; ------------------------------------------------------------------
   447                              <2> ; os_draw_polygon -- Draws a freeform shape.
   448                              <2> ; IN: ES = destination memory segment, BH = number of points, BL = colour, SI = location of shape points data
   449                              <2> ; OUT: None, registers preserved
   450                              <2> ; DATA FORMAT: x1, y1, x2, y2, x3, y3, etc
   451                              <2> 
   452                              <2> os_draw_polygon equ 33002
   453                              <2> 
   454                              <2> ; ------------------------------------------------------------------
   455                              <2> ; os_clear_graphics -- Clears the graphics screen with a given color.
   456                              <2> ; IN: ES = destination memory segment, BL = colour to set
   457                              <2> ; OUT: None, registers preserved
   458                              <2> 
   459                              <2> os_clear_graphics equ 33008
   460                              <2> 
   461                              <2> ; ----------------------------------------
   462                              <2> ; os_draw_circle -- draw a circular shape
   463                              <2> ; IN: ES = destination memory segment, AL = colour, BX = radius, CX = middle X, DX = middle y
   464                              <2> ; OUT: None, registers preserved
   465                              <2> 
   466                              <2> os_draw_circle equ 33005
   467                              <2> 
   468                              <2> ; ==================================================================
   469                              <2> ; MichalOS Keyboard input handling functions
   470                              <2> ; ==================================================================
   471                              <2> 
   472                              <2> ; ------------------------------------------------------------------
   473                              <2> ; os_wait_for_key -- Waits for keypress and returns key
   474                              <2> ; Also handles the screensaver. TODO: move the screensaver code to "int.asm"
   475                              <2> ; IN: None
   476                              <2> ; OUT: AX = key pressed, other regs preserved
   477                              <2> 
   478                              <2> os_wait_for_key equ 32786
   479                              <2> 
   480                              <2> ; ------------------------------------------------------------------
   481                              <2> ; os_check_for_key -- Scans keyboard buffer for input, but doesn't wait
   482                              <2> ; Also handles special keyboard shortcuts.
   483                              <2> ; IN: None
   484                              <2> ; OUT: AX = 0 if no key pressed, otherwise scan code
   485                              <2> 
   486                              <2> os_check_for_key equ 32789
   487                              <2> 
   488                              <2> ; ==================================================================
   489                              <2> ; MichalOS Port I/O functions
   490                              <2> ; ==================================================================
   491                              <2> 
   492                              <2> ; ------------------------------------------------------------------
   493                              <2> ; os_serial_port_enable -- Set up the serial port for transmitting data
   494                              <2> ; IN: AX = 0 for normal mode (9600 baud), or 1 for slow mode (1200 baud)
   495                              <2> ; OUT: None, registers preserved
   496                              <2> 
   497                              <2> os_serial_port_enable equ 32954
   498                              <2> 
   499                              <2> ; ------------------------------------------------------------------
   500                              <2> ; os_send_via_serial -- Send a byte via the serial port
   501                              <2> ; IN: AL = byte to send via serial
   502                              <2> ; OUT: AH = Bit 7 clear on success
   503                              <2> 
   504                              <2> os_send_via_serial equ 32861
   505                              <2> 
   506                              <2> ; ------------------------------------------------------------------
   507                              <2> ; os_get_via_serial -- Get a byte from the serial port
   508                              <2> ; IN: None
   509                              <2> ; OUT: AL = byte that was received, AH = Bit 7 clear on success
   510                              <2> 
   511                              <2> os_get_via_serial equ 32864
   512                              <2> 
   513                              <2> ; ==================================================================
   514                              <2> ; MichalOS Disk access functions
   515                              <2> ; ==================================================================
   516                              <2> 
   517                              <2> ; ------------------------------------------------------------------
   518                              <2> ; os_report_free_space -- Returns the amount of free space on disk
   519                              <2> ; IN: None
   520                              <2> ; OUT: AX = Number of sectors free
   521                              <2> 
   522                              <2> os_report_free_space equ 32894
   523                              <2> 
   524                              <2> ; ------------------------------------------------------------------
   525                              <2> ; os_get_file_list -- Generate comma-separated string of files on floppy
   526                              <2> ; IN/OUT: AX = location to store zero-terminated filename string
   527                              <2> 
   528                              <2> os_get_file_list equ 32831
   529                              <2> 
   530                              <2> ; ------------------------------------------------------------------
   531                              <2> ; os_load_file -- Load a file into RAM
   532                              <2> ; IN: AX = location of filename, ES:CX = location in RAM to load file
   533                              <2> ; OUT: BX = file size (in bytes), carry set if file not found
   534                              <2> 
   535                              <2> os_load_file equ 32801
   536                              <2> 
   537                              <2> ; --------------------------------------------------------------------------
   538                              <2> ; os_write_file -- Save (max 64K) file to disk
   539                              <2> ; IN: AX = filename, ES:BX = data location, CX = bytes to write
   540                              <2> ; OUT: Carry clear if OK, set if failure
   541                              <2> 
   542                              <2> os_write_file equ 32915
   543                              <2> 
   544                              <2> ; --------------------------------------------------------------------------
   545                              <2> ; os_file_exists -- Check for presence of file on the floppy
   546                              <2> ; IN: AX = filename location; OUT: carry clear if found, set if not
   547                              <2> 
   548                              <2> os_file_exists equ 32918
   549                              <2> 
   550                              <2> ; --------------------------------------------------------------------------
   551                              <2> ; os_create_file -- Creates a new 0-byte file on the floppy disk
   552                              <2> ; IN: AX = location of filename
   553                              <2> ; OUT: None, registers preserved
   554                              <2> 
   555                              <2> os_create_file equ 32921
   556                              <2> 
   557                              <2> ; --------------------------------------------------------------------------
   558                              <2> ; os_remove_file -- Deletes the specified file from the filesystem
   559                              <2> ; IN: AX = location of filename to remove
   560                              <2> 
   561                              <2> os_remove_file equ 32924
   562                              <2> 
   563                              <2> ; --------------------------------------------------------------------------
   564                              <2> ; os_rename_file -- Change the name of a file on the disk
   565                              <2> ; IN: AX = filename to change, BX = new filename (zero-terminated strings)
   566                              <2> ; OUT: carry set on error
   567                              <2> 
   568                              <2> os_rename_file equ 32927
   569                              <2> 
   570                              <2> ; --------------------------------------------------------------------------
   571                              <2> ; os_get_file_size -- Get file size information for specified file
   572                              <2> ; IN: AX = filename; OUT: EBX = file size in bytes (up to 4GB)
   573                              <2> ; or carry set if file not found
   574                              <2> 
   575                              <2> os_get_file_size equ 32930
   576                              <2> 
   577                              <2> ; --------------------------------------------------------------------------
   578                              <2> ; os_get_file_datetime -- Get file write time/date information for specified file
   579                              <2> ; IN: AX = filename; OUT: BX = time of creation (HHHHHMMMMMMSSSSS), CX = date of creation (YYYYYYYMMMMDDDDD)
   580                              <2> ; or carry set if file not found
   581                              <2> 
   582                              <2> os_get_file_datetime equ 33011
   583                              <2> 
   584                              <2> ; --------------------------------------------------------------------------
   585                              <2> ; os_get_boot_disk -- Returns the boot disk number.
   586                              <2> ; IN: None
   587                              <2> ; OUT: DL = boot disk number for use in INT 13h calls
   588                              <2> 
   589                              <2> os_get_boot_disk equ 33062
   590                              <2> 
   591                              <2> ; ==================================================================
   592                              <2> ; MichalOS Miscellaneous functions
   593                              <2> ; ==================================================================
   594                              <2> 
   595                              <2> ; ------------------------------------------------------------------
   596                              <2> ; os_read_config_byte -- Reads a byte from the config
   597                              <2> ; IN: BX = offset
   598                              <2> ; OUT: AL = value
   599                              <2> 
   600                              <2> os_read_config_byte equ 33134
   601                              <2> 
   602                              <2> ; ------------------------------------------------------------------
   603                              <2> ; os_read_config_word -- Reads a word from the config
   604                              <2> ; IN: BX = offset
   605                              <2> ; OUT: AX = value
   606                              <2> 
   607                              <2> os_read_config_word equ 33137
   608                              <2> 
   609                              <2> ; ------------------------------------------------------------------
   610                              <2> ; os_write_config_byte -- Writes a byte to the config
   611                              <2> ; NOTE: This will only affect the config in memory,
   612                              <2> ; run os_save_config to save the changes to disk!
   613                              <2> ; IN: BX = offset, AL = value
   614                              <2> ; OUT: None, registers preserved
   615                              <2> 
   616                              <2> os_write_config_byte equ 33140
   617                              <2> 
   618                              <2> ; ------------------------------------------------------------------
   619                              <2> ; os_write_config_word -- Writes a byte to the config
   620                              <2> ; NOTE: This will only affect the config in memory,
   621                              <2> ; run os_save_config to save the changes to disk!
   622                              <2> ; IN: BX = offset, AX = value
   623                              <2> ; OUT: None, registers preserved
   624                              <2> 
   625                              <2> os_write_config_word equ 33143
   626                              <2> 
   627                              <2> ; ------------------------------------------------------------------
   628                              <2> ; os_save_config -- Saves the current config to disk
   629                              <2> ; OUT: Carry set if error
   630                              <2> 
   631                              <2> os_save_config equ 33146
   632                              <2> 
   633                              <2> ; ------------------------------------------------------------------
   634                              <2> ; os_exit -- Exits the application, launches another one (if possible)
   635                              <2> ; IN: AX = if not 0, then ptr to filename of application to be launched,
   636                              <2> ;     BX = 1 if the application calling os_exit should be re-launched after
   637                              <2> ;     the requested application exits
   638                              <2> ; OUT: None, register preserved
   639                              <2> 
   640                              <2> os_exit equ 32780
   641                              <2> 
   642                              <2> ; ------------------------------------------------------------------
   643                              <2> ; os_clear_registers -- Clear all registers
   644                              <2> ; IN: None
   645                              <2> ; OUT: Cleared registers
   646                              <2> 
   647                              <2> os_clear_registers equ 32975
   648                              <2> 
   649                              <2> ; ------------------------------------------------------------------
   650                              <2> ; os_get_os_name -- Get the OS name string
   651                              <2> ; IN: None
   652                              <2> ; OUT: DS:SI = OS name string, zero-terminated
   653                              <2> 
   654                              <2> os_get_os_name equ 33083
   655                              <2> 
   656                              <2> ; ------------------------------------------------------------------
   657                              <2> ; os_get_memory -- Gets the amount of system RAM.
   658                              <2> ; IN: None
   659                              <2> ; OUT: AX = conventional memory (in kB), BX = high memory (in kB)
   660                              <2> 
   661                              <2> os_get_memory equ 33050
   662                              <2> 
   663                              <2> ; ------------------------------------------------------------------
   664                              <2> ; os_int_1Ah -- Middle-man between the INT 1Ah call and the kernel/apps (used for timezones).
   665                              <2> ; IN/OUT: same as int 1Ah
   666                              <2> 
   667                              <2> os_int_1Ah equ 33032
   668                              <2> 
   669                              <2> ; ==================================================================
   670                              <2> ; MichalOS/MikeOS 4.5 BASIC interpreter
   671                              <2> ; ==================================================================
   672                              <2> 
   673                              <2> ; ------------------------------------------------------------------
   674                              <2> ; The BASIC interpreter execution starts here -- a parameter string
   675                              <2> ; is passed in SI and copied into the first string, unless SI = 0
   676                              <2> 
   677                              <2> os_run_basic equ 32963
   678                              <2> 
   679                              <2> ; ==================================================================
   680                              <2> ; MichalOS Math functions
   681                              <2> ; ==================================================================
   682                              <2> 
   683                              <2> ; ------------------------------------------------------------------
   684                              <2> ; os_get_random -- Return a random integer between low and high (inclusive)
   685                              <2> ; IN: AX = low integer, BX = high integer
   686                              <2> ; OUT: CX = random integer
   687                              <2> 
   688                              <2> os_get_random equ 32948
   689                              <2> 
   690                              <2> ; ------------------------------------------------------------------
   691                              <2> ; os_bcd_to_int -- Converts a binary coded decimal number to an integer
   692                              <2> ; IN: AL = BCD number
   693                              <2> ; OUT: AX = integer value
   694                              <2> 
   695                              <2> os_bcd_to_int equ 32846
   696                              <2> 
   697                              <2> ; ------------------------------------------------------------------
   698                              <2> ; os_int_to_bcd -- Converts an integer to a binary coded decimal number
   699                              <2> ; IN: AL = integer value
   700                              <2> ; OUT: AL = BCD number
   701                              <2> 
   702                              <2> os_int_to_bcd equ 33035
   703                              <2> 
   704                              <2> ; ------------------------------------------------------------------
   705                              <2> ; os_math_power -- Calculates EAX^EBX.
   706                              <2> ; IN: EAX^EBX = input
   707                              <2> ; OUT: EAX = result
   708                              <2> 
   709                              <2> os_math_power equ 33071
   710                              <2> 
   711                              <2> ; ------------------------------------------------------------------
   712                              <2> ; os_math_root -- Approximates the EBXth root of EAX.
   713                              <2> ; IN: EAX = input, EBX = root
   714                              <2> ; OUT: EAX(EDX = 0) = result; EAX to EDX = range
   715                              <2> 
   716                              <2> os_math_root equ 33074
   717                              <2> 
   718                              <2> ; ==================================================================
   719                              <2> ; MichalOS String manipulation functions
   720                              <2> ; ==================================================================
   721                              <2> 
   722                              <2> ; ------------------------------------------------------------------
   723                              <2> ; os_string_encrypt -- Encrypts a string using a totally military-grade encryption algorithm
   724                              <2> ; IN: DS:SI = Input string/Output string
   725                              <2> ; OUT: None, registers preserved
   726                              <2> 
   727                              <2> os_string_encrypt equ 33014
   728                              <2> 
   729                              <2> ; ------------------------------------------------------------------
   730                              <2> ; os_string_add -- Add a string on top of another string
   731                              <2> ; IN: DS:AX = Main string, DS:BX = Added string
   732                              <2> ; OUT: None, registers preserved
   733                              <2> 
   734                              <2> os_string_add equ 32897
   735                              <2> 
   736                              <2> ; ------------------------------------------------------------------
   737                              <2> ; os_string_length -- Return length of a string
   738                              <2> ; IN: DS:AX = string location
   739                              <2> ; OUT AX = length (other regs preserved)
   740                              <2> 
   741                              <2> os_string_length equ 32810
   742                              <2> 
   743                              <2> ; ------------------------------------------------------------------
   744                              <2> ; os_string_reverse -- Reverse the characters in a string
   745                              <2> ; IN: DS:SI = string location
   746                              <2> ; OUT: None, registers preserved
   747                              <2> 
   748                              <2> os_string_reverse equ 32939
   749                              <2> 
   750                              <2> ; ------------------------------------------------------------------
   751                              <2> ; os_find_char_in_string -- Find location of character in a string
   752                              <2> ; IN: DS:SI = string location, AL = character to find
   753                              <2> ; OUT: AX = location in string, or 0 if char not present
   754                              <2> 
   755                              <2> os_find_char_in_string equ 32867
   756                              <2> 
   757                              <2> ; ------------------------------------------------------------------
   758                              <2> ; os_string_uppercase -- Convert zero-terminated string to upper case
   759                              <2> ; IN: DS:AX = string location
   760                              <2> ; OUT: None, registers preserved
   761                              <2> 
   762                              <2> os_string_uppercase equ 32813
   763                              <2> 
   764                              <2> ; ------------------------------------------------------------------
   765                              <2> ; os_string_lowercase -- Convert zero-terminated string to lower case
   766                              <2> ; IN: DS:AX = string location
   767                              <2> ; OUT: None, registers preserved
   768                              <2> 
   769                              <2> os_string_lowercase equ 32816
   770                              <2> 
   771                              <2> ; ------------------------------------------------------------------
   772                              <2> ; os_string_copy -- Copy one string into another
   773                              <2> ; IN: DS:SI = source, ES:DI = destination (programmer ensure sufficient room)
   774                              <2> ; OUT: None, registers preserved
   775                              <2> 
   776                              <2> os_string_copy equ 32822
   777                              <2> 
   778                              <2> ; ------------------------------------------------------------------
   779                              <2> ; os_string_join -- Join two strings into a third string
   780                              <2> ; IN: DS:AX = string one, DS:BX = string two, ES:CX = destination string
   781                              <2> ; OUT: None, registers preserved
   782                              <2> 
   783                              <2> os_string_join equ 32828
   784                              <2> 
   785                              <2> ; ------------------------------------------------------------------
   786                              <2> ; os_string_chomp -- Strip leading and trailing spaces from a string
   787                              <2> ; IN: DS:AX = string location
   788                              <2> ; OUT: None, registers preserved
   789                              <2> 
   790                              <2> os_string_chomp equ 32837
   791                              <2> 
   792                              <2> ; ------------------------------------------------------------------
   793                              <2> ; os_string_compare -- See if two strings match
   794                              <2> ; IN: DS:SI = string one, DS:DI = string two
   795                              <2> ; OUT: carry set if same, clear if different
   796                              <2> 
   797                              <2> os_string_compare equ 32834
   798                              <2> 
   799                              <2> ; ------------------------------------------------------------------
   800                              <2> ; os_string_parse -- Take string (eg "run foo bar baz") and return
   801                              <2> ; pointers to zero-terminated strings (eg AX = "run", BX = "foo" etc.)
   802                              <2> ; IN: DS:SI = string
   803                              <2> ; OUT: AX, BX, CX, DX = individual strings
   804                              <2> 
   805                              <2> os_string_parse equ 32960
   806                              <2> 
   807                              <2> ; ------------------------------------------------------------------
   808                              <2> ; os_string_to_int -- Convert decimal string to integer value
   809                              <2> ; IN: DS:SI = string location (max 5 chars, up to '65535')
   810                              <2> ; OUT: AX = number
   811                              <2> 
   812                              <2> os_string_to_int equ 32942
   813                              <2> 
   814                              <2> ; ------------------------------------------------------------------
   815                              <2> ; os_string_to_hex -- Convert hexadecimal string to integer value
   816                              <2> ; IN: DS:SI = string location (max 8 chars, up to 'FFFFFFFF')
   817                              <2> ; OUT: EAX = number
   818                              <2> 
   819                              <2> os_string_to_hex equ 32840
   820                              <2> 
   821                              <2> ; ------------------------------------------------------------------
   822                              <2> ; os_int_to_string -- Convert unsigned integer to string
   823                              <2> ; IN: AX = unsigned int
   824                              <2> ; OUT: DS:AX = string location
   825                              <2> 
   826                              <2> os_int_to_string equ 32792
   827                              <2> 
   828                              <2> ; ------------------------------------------------------------------
   829                              <2> ; os_sint_to_string -- Convert signed integer to string
   830                              <2> ; IN: AX = signed int
   831                              <2> ; OUT: DS:AX = string location
   832                              <2> 
   833                              <2> os_sint_to_string equ 32957
   834                              <2> 
   835                              <2> ; ------------------------------------------------------------------
   836                              <2> ; os_get_time_string -- Get current time in a string (eg '10:25')
   837                              <2> ; IN: ES:BX = string location
   838                              <2> ; OUT: None, registers preserved
   839                              <2> 
   840                              <2> os_get_time_string equ 32849
   841                              <2> 
   842                              <2> ; ------------------------------------------------------------------
   843                              <2> ; os_get_date_string -- Get current date in a string (eg '12/31/2007')
   844                              <2> ; IN: ES:BX = string location
   845                              <2> ; OUT: None, registers preserved
   846                              <2> 
   847                              <2> os_get_date_string equ 32858
   848                              <2> 
   849                              <2> ; ------------------------------------------------------------------
   850                              <2> ; os_string_tokenize -- Reads tokens separated by specified char from
   851                              <2> ; a string. Returns pointer to next token, or 0 if none left
   852                              <2> ; IN: AL = separator char, DS:SI = beginning
   853                              <2> ; OUT: DI = next token or 0 if none
   854                              <2> 
   855                              <2> os_string_tokenize equ 32972
   856                              <2> 
   857                              <2> ; ------------------------------------------------------------------
   858                              <2> ; os_string_callback_tokenizer -- Prints a token from string, requests are done by callback
   859                              <2> ; IN: DS:AX = comma-separated string
   860                              <2> ; OUT: AL = AH = max length of any token, CX = number of entries in the list,
   861                              <2> ;      DX:SI = callback location (if C clear, accepts CX as entry ID, prints out result)
   862                              <2> 
   863                              <2> os_string_callback_tokenizer equ 33128
   864                              <2> 
   865                              <2> ; ------------------------------------------------------------------
   866                              <2> ; os_32int_to_string -- Converts an unsigned 32-bit integer into a string
   867                              <2> ; IN: EAX = unsigned int
   868                              <2> ; OUT: DS:AX = string location
   869                              <2> 
   870                              <2> os_32int_to_string equ 33059
   871                              <2> 
   872                              <2> ; ------------------------------------------------------------------
   873                              <2> ; os_string_to_32int -- Converts a string into a 32-bit integer
   874                              <2> ; IN: DS:SI = string location
   875                              <2> ; OUT: EAX = unsigned integer
   876                              <2> 
   877                              <2> os_string_to_32int equ 33068
   878                              <2> 
   879                              <2> ; ==================================================================
   880                              <2> ; MichalOS ZX7 decompression routine
   881                              <2> ; ==================================================================
   882                              <2> 
   883                              <2> ; ------------------------------------------------------------------
   884                              <2> ; os_decompress_zx7 -- Decompresses ZX7-packed data.
   885                              <2> ; IN: DS:SI = source, ES:DI = destination
   886                              <2> ; OUT: None, registers preserved
   887                              <2> 
   888                              <2> os_decompress_zx7 equ 33038
   889                              <2> 
   890                              <2> ; ==================================================================
   891                              <2> ; MichalOS Interrupt management & app timer functions
   892                              <2> ; ==================================================================
   893                              <2> 
   894                              <2> ; -----------------------------------------------------------------
   895                              <2> ; os_modify_int_handler -- Change location of interrupt handler
   896                              <2> ; IN: CL = int number, DI:SI = handler location
   897                              <2> ; OUT: None, registers preserved
   898                              <2> 
   899                              <2> os_modify_int_handler equ 33056
   900                              <2> 
   901                              <2> ; -----------------------------------------------------------------
   902                              <2> ; os_get_int_handler -- Change location of interrupt handler
   903                              <2> ; IN: CL = int number
   904                              <2> ; OUT: DI:SI = handler location
   905                              <2> 
   906                              <2> os_get_int_handler equ 33080
   907                              <2> 
   908                              <2> ; ------------------------------------------------------------------
   909                              <2> ; os_pause -- Delay execution for a specified number of ticks (18.2 Hz by default)
   910                              <2> ; IN: AX = amount of ticks to wait
   911                              <2> ; OUT: None, registers preserved
   912                              <2> 
   913                              <2> os_pause equ 32804
   914                              <2> 
   915                              <2> ; -----------------------------------------------------------------
   916                              <2> ; os_attach_app_timer -- Attach a timer interrupt to an application and sets the timer speed
   917                              <2> ; Formula: speed = (105000000 / 88) / frequency
   918                              <2> ; IN: DS:SI = handler location, CX = speed
   919                              <2> ; OUT: None, registers preserved
   920                              <2> 
   921                              <2> os_attach_app_timer equ 32969
   922                              <2> 
   923                              <2> ; -----------------------------------------------------------------
   924                              <2> ; os_return_app_timer -- Returns the timer interrupt back to the system and resets the timer speed
   925                              <2> ; IN/OUT: None, registers preserved
   926                              <2> 
   927                              <2> os_return_app_timer equ 32987
   928                              <2> 
   929                              <2> ; -----------------------------------------------------------------
   930                              <2> ; os_set_timer_speed -- Sets the timer's trigger speed.
   931                              <2> ; Formula: speed = (105000000 / 88) / frequency
   932                              <2> ; IN: CX = speed
   933                              <2> ; OUT: Nothing, registers preserved
   934                              <2> 
   935                              <2> os_set_timer_speed equ 32891
   936                              <2> 
   937                              <2> ; ==================================================================
   938                              <2> ; MichalOS Low-level disk driver
   939                              <2> ; ==================================================================
   940                              <2> 
   941                              <2> ; --------------------------------------------------------------------------
   942                              <2> ; os_disk_read_sector -- Read a single sector from disk
   943                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   944                              <2> 
   945                              <2> os_disk_read_sector equ 33092
   946                              <2> 
   947                              <2> ; --------------------------------------------------------------------------
   948                              <2> ; os_disk_read_multiple_sectors -- Read multiple sectors from disk
   949                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   950                              <2> 
   951                              <2> os_disk_read_multiple_sectors equ 33104
   952                              <2> 
   953                              <2> ; --------------------------------------------------------------------------
   954                              <2> ; os_disk_write_sector -- Write a single sector to disk
   955                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   956                              <2> 
   957                              <2> os_disk_write_sector equ 33098
   958                              <2> 
   959                              <2> ; --------------------------------------------------------------------------
   960                              <2> ; os_disk_write_multiple_sectors -- Write multiple sectors to disk
   961                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   962                              <2> 
   963                              <2> os_disk_write_multiple_sectors equ 33116
   964                              <2> 
    10                              <1> 
    11                              <1> %macro oscall 1
    12                              <1> 	mov bp, %1
    13                              <1> 	int 40h
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> ; -----------------------------------------------------------------
     6                                  
     7                                  start:
     8 00000000 803E[8808]01            	cmp byte [terminalflag], 1		; Were we passed a filename and ended the playback?
     9 00000005 0F844901                	je .exit
    10                                  	
    11 00000009 E8(1E80)                	call os_speaker_off
    12 0000000C E81401                  	call .draw_background
    13                                  
    14 0000000F 803EE00000              	cmp byte [0E0h], 0				; Were we passed a filename?
    15 00000014 740D                    	je .no_file_chosen
    16                                  	
    17 00000016 C606[8808]01            	mov byte [terminalflag], 1
    18                                  	
    19 0000001B B8E000                  	mov ax, 0E0h
    20                                  	
    21 0000001E E8(2D80)                	call os_string_uppercase
    22                                  	
    23 00000021 EB3A                    	jmp .file_chosen
    24                                  	
    25                                  .no_file_chosen:
    26 00000023 B8[8A01]                	mov ax, .choice
    27 00000026 BB[7501]                	mov bx, .choice_msg1
    28 00000029 B9[8901]                	mov cx, .choice_msg2
    29 0000002C BE[5801]                	mov si, .callback
    30 0000002F E8(9080)                	call os_list_dialog_tooltip
    31                                  	
    32 00000032 0F821C01                	jc .exit
    33                                  	
    34 00000036 83F801                  	cmp ax, 1
    35 00000039 0F84C113                	je piano
    36                                  	
    37 0000003D 83F802                  	cmp ax, 2
    38 00000040 0F843C14                	je polypiano
    39                                  	
    40 00000044 83F803                  	cmp ax, 3
    41 00000047 740C                    	je .play_file
    42                                  	
    43 00000049 83F804                  	cmp ax, 4
    44 0000004C 7477                    	je .play_duo
    45                                  	
    46 0000004E 83F805                  	cmp ax, 5
    47 00000051 0F84FD00                	je .exit
    48                                  	
    49                                  .play_file:
    50 00000055 BB[4406]                	mov bx, .extension_number
    51 00000058 E8(6281)                	call os_file_selector_filtered		; Get filename
    52 0000005B 72A3                    	jc start
    53                                  
    54                                  .file_chosen:
    55 0000005D E8(9680)                	call os_file_exists
    56 00000060 0F820301                	jc .load_error
    57                                  
    58 00000064 89C3                    	mov bx, ax			; Save filename for now
    59                                  
    60 00000066 89C7                    	mov di, ax
    61                                  
    62 00000068 E8(2A80)                	call os_string_length
    63 0000006B 01C7                    	add di, ax			; DI now points to last char in filename
    64                                  
    65 0000006D 4F                      	dec di
    66 0000006E 4F                      	dec di
    67 0000006F 4F                      	dec di				; ...and now to first char of extension!
    68                                  	
    69 00000070 60                      	pusha
    70 00000071 BE[4506]                	mov si, .mmf_extension
    71 00000074 B90300                  	mov cx, 3
    72 00000077 F3A6                    	rep cmpsb			; Does the extension contain 'MMF'?
    73 00000079 7443                    	je .valid_mmf_extension		; Skip ahead if so
    74 0000007B 61                      	popa
    75                                  	
    76 0000007C 60                      	pusha
    77 0000007D BE[4906]                	mov si, .dro_extension
    78 00000080 B90300                  	mov cx, 3
    79 00000083 F3A6                    	rep cmpsb
    80 00000085 0F84A808                	je start_dro
    81 00000089 61                      	popa
    82                                  	
    83 0000008A 60                      	pusha
    84 0000008B BE[4D06]                	mov si, .drz_extension
    85 0000008E B90300                  	mov cx, 3
    86 00000091 F3A6                    	rep cmpsb
    87 00000093 0F845808                	je start_drz
    88 00000097 61                      	popa
    89                                  	
    90 00000098 60                      	pusha
    91 00000099 BE[5106]                	mov si, .rad_extension
    92 0000009C B90300                  	mov cx, 3
    93 0000009F F3A6                    	rep cmpsb
    94 000000A1 0F842F0D                	je start_rad
    95 000000A5 61                      	popa
    96                                  					; Otherwise show error dialog
    97                                  	clr dx		; One button for dialog box
    31 000000A6 31D2                <1>  xor %1, %1
    98 000000A8 B8[0706]                	mov ax, .err_string
    99 000000AB BB[1A06]                	mov bx, .err_string2
   100                                  	clr cx
    31 000000AE 31C9                <1>  xor %1, %1
   101 000000B0 E8(3980)                	call os_dialog_box
   102                                  
   103 000000B3 803E[8808]01            	cmp byte [terminalflag], 1				; Were we passed a filename and errored?
   104 000000B8 0F849600                	je .exit
   105                                  	
   106 000000BC EB97                    	jmp .play_file			; And retry
   107                                  	
   108                                  .valid_mmf_extension:
   109 000000BE 61                      	popa
   110                                  
   111 000000BF E8960A                  	call start_mono_mmf
   112 000000C2 E93BFF                  	jmp start
   113                                  	
   114                                  .play_duo:
   115 000000C5 B8[E904]                	mov ax, .duo_msg1
   116                                  	clr bx
    31 000000C8 31DB                <1>  xor %1, %1
   117                                  	clr cx
    31 000000CA 31C9                <1>  xor %1, %1
   118                                  	clr dx
    31 000000CC 31D2                <1>  xor %1, %1
   119 000000CE E8(3980)                	call os_dialog_box
   120                                  
   121 000000D1 E84F00                  	call .draw_background
   122                                  	
   123 000000D4 BB[5506]                	mov bx, .poly_mmf_num
   124 000000D7 E8(6281)                	call os_file_selector_filtered		; Get the first filename
   125 000000DA 0F8222FF                	jc start
   126                                  
   127 000000DE 89C6                    	mov si, ax
   128 000000E0 BF[B20D]                	mov di, start_poly_mmf.playmsg2
   129 000000E3 E8(3680)                	call os_string_copy
   130                                  
   131 000000E6 B9[F015]                	mov cx, buffer
   132 000000E9 E8(2180)                	call os_load_file
   133                                  	
   134 000000EC B8[0705]                	mov ax, .duo_msg2
   135                                  	clr bx
    31 000000EF 31DB                <1>  xor %1, %1
   136                                  	clr cx
    31 000000F1 31C9                <1>  xor %1, %1
   137                                  	clr dx
    31 000000F3 31D2                <1>  xor %1, %1
   138 000000F5 E8(3980)                	call os_dialog_box
   139                                  
   140 000000F8 E82800                  	call .draw_background
   141                                  
   142 000000FB BB[5506]                	mov bx, .poly_mmf_num
   143 000000FE E8(6281)                	call os_file_selector_filtered		; Get the second filename
   144 00000101 0F82FBFE                	jc start
   145                                  
   146 00000105 60                      	pusha
   147 00000106 89C1                    	mov cx, ax
   148                                  
   149 00000108 BB[D20D]                	mov bx, start_poly_mmf.playmsgcct
   150 0000010B B8[B20D]                	mov ax, start_poly_mmf.playmsg2
   151 0000010E E8(8180)                	call os_string_add
   152                                  
   153 00000111 89CB                    	mov bx, cx
   154 00000113 E8(8180)                	call os_string_add
   155 00000116 61                      	popa
   156                                  
   157 00000117 B9[A04C]                	mov cx, buffer2
   158 0000011A E8(2180)                	call os_load_file
   159                                  
   160 0000011D E8480B                  	call start_poly_mmf
   161 00000120 E9DDFE                  	jmp start
   162                                  	
   163                                  .draw_background:
   164 00000123 60                      	pusha
   165 00000124 B8[2605]                	mov ax, .title_msg
   166 00000127 BB[3C05]                	mov bx, .footer_msg
   167 0000012A B90001                  	mov cx, 256
   168 0000012D E8(2780)                	call os_draw_background
   169 00000130 61                      	popa
   170 00000131 C3                      	ret
   171                                  
   172                                  .draw_clear_background:
   173 00000132 60                      	pusha
   174 00000133 B8[2605]                	mov ax, .title_msg
   175 00000136 BB[3D05]                	mov bx, .footer_msg_2
   176 00000139 0FB60EA8DE              	movzx cx, byte [CONFIG_DESKTOP_BG_COLOR]
   177 0000013E E8(2780)                	call os_draw_background
   178 00000141 61                      	popa
   179 00000142 C3                      	ret
   180                                  	
   181                                  .draw_player_background:
   182 00000143 60                      	pusha
   183 00000144 B8[2605]                	mov ax, .title_msg
   184 00000147 BB[6C05]                	mov bx, .footer_msg_3
   185 0000014A B90001                  	mov cx, 256
   186 0000014D E8(2780)                	call os_draw_background
   187 00000150 61                      	popa
   188 00000151 C3                      	ret
   189                                  	
   190                                  .exit:
   191 00000152 C606E00000              	mov byte [0E0h], 0
   192 00000157 C3                      	ret
   193                                  
   194                                  .callback:
   195 00000158 48                      	dec ax
   196 00000159 D1E0                    	shl ax, 1
   197 0000015B 89C3                    	mov bx, ax
   198                                  	
   199 0000015D 8BB7[E301]              	mov si, [.listitems + bx]
   200 00000161 B22A                    	mov dl, 42
   201 00000163 E8(E180)                	call os_print_string_box
   202 00000166 C3                      	ret
   203                                  
   204                                  .load_error:
   205 00000167 B8[3406]                	mov ax, .err_msg
   206                                  	clr bx
    31 0000016A 31DB                <1>  xor %1, %1
   207                                  	clr cx
    31 0000016C 31C9                <1>  xor %1, %1
   208                                  	clr dx
    31 0000016E 31D2                <1>  xor %1, %1
   209 00000170 E8(3980)                	call os_dialog_box
   210 00000173 EBDD                    	jmp .exit
   211                                  
   212 00000175 43686F6F736520616E-     	.choice_msg1		db 'Choose an option...', 0
   212 0000017E 206F7074696F6E2E2E-
   212 00000187 2E00               
   213 00000189 00                      	.choice_msg2		db 0
   214 0000018A 4D6F6E6F70686F6E69-     	.choice				db 'Monophonic piano (PC speaker),Polyphonic piano (Adlib),Play a file,Play duo (Adlib),Quit', 0
   214 00000193 63207069616E6F2028-
   214 0000019C 504320737065616B65-
   214 000001A5 72292C506F6C797068-
   214 000001AE 6F6E6963207069616E-
   214 000001B7 6F202841646C696229-
   214 000001C0 2C506C617920612066-
   214 000001C9 696C652C506C617920-
   214 000001D2 64756F202841646C69-
   214 000001DB 62292C5175697400   
   215                                  	
   216 000001E3 [ED01][7002][9403]-     	.listitems			dw .listitem0, .listitem1, .listitem2, .listitem3, .listitem4
   216 000001E9 [7804][D304]       
   217                                  
   218 000001ED 412032AC206F637461-     	.listitem0			db 'A 2', 0ACh, ' octave keyboard-controlled', 13, 10, 						   'piano.', 13, 10, 10, 						   'It will use the PC speaker for', 13, 10, 						   'sound output, so only one note', 13, 10, 						   'may be played at a time.', 0
   218 000001F6 7665206B6579626F61-
   218 000001FF 72642D636F6E74726F-
   218 00000208 6C6C65640D0A706961-
   218 00000211 6E6F2E0D0A0A497420-
   218 0000021A 77696C6C2075736520-
   218 00000223 746865205043207370-
   218 0000022C 65616B657220666F72-
   218 00000235 0D0A736F756E64206F-
   218 0000023E 75747075742C20736F-
   218 00000247 206F6E6C79206F6E65-
   218 00000250 206E6F74650D0A6D61-
   218 00000259 7920626520706C6179-
   218 00000262 656420617420612074-
   218 0000026B 696D652E00         
   223                                  						   
   224 00000270 412032AC206F637461-     	.listitem1			db 'A 2', 0ACh, ' octave keyboard-controlled', 13, 10, 						   'piano.', 13, 10, 10, 						   'It will use an Adlib device for', 13, 10, 						   'sound output, so up to 9 notes', 13, 10, 						   'may be played at a time.', 13, 10, 10, 						   'Tip: If your computer is too new to', 13, 10, 						   'have an actual Adlib card, you may', 13, 10, 						   'select PC speaker emulation in the', 13, 10, 						   'Settings app:', 13, 10, 10, 						   'Sound ', 1Ah, ' Set Adlib device driver.', 0
   224 00000279 7665206B6579626F61-
   224 00000282 72642D636F6E74726F-
   224 0000028B 6C6C65640D0A706961-
   224 00000294 6E6F2E0D0A0A497420-
   224 0000029D 77696C6C2075736520-
   224 000002A6 616E2041646C696220-
   224 000002AF 64657669636520666F-
   224 000002B8 720D0A736F756E6420-
   224 000002C1 6F75747075742C2073-
   224 000002CA 6F20757020746F2039-
   224 000002D3 206E6F7465730D0A6D-
   224 000002DC 617920626520706C61-
   224 000002E5 796564206174206120-
   224 000002EE 74696D652E0D0A0A54-
   224 000002F7 69703A20496620796F-
   224 00000300 757220636F6D707574-
   224 00000309 657220697320746F6F-
   224 00000312 206E657720746F0D0A-
   224 0000031B 6861766520616E2061-
   224 00000324 637475616C2041646C-
   224 0000032D 696220636172642C20-
   224 00000336 796F75206D61790D0A-
   224 0000033F 73656C656374205043-
   224 00000348 20737065616B657220-
   224 00000351 656D756C6174696F6E-
   224 0000035A 20696E207468650D0A-
   224 00000363 53657474696E677320-
   224 0000036C 6170703A0D0A0A536F-
   224 00000375 756E64201A20536574-
   224 0000037E 2041646C6962206465-
   224 00000387 766963652064726976-
   224 00000390 65722E00           
   234                                  	
   235 00000394 506C6179206120636F-     	.listitem2			db 'Play a compatible music file', 13, 10, 						   'through the PC speaker or an Adlib', 13, 10, 						   `device, based on the file's format.`, 13, 10, 10, 						   'Compatible file formats:', 13, 10, 						   '- MMF: MichalOS PCspk Music Format', 13, 10, 						   '- DRO/DRZ: DOSBox Adlib capture', 13, 10, 						   '- RAD: Reality Adlib Tracker', 0
   235 0000039D 6D70617469626C6520-
   235 000003A6 6D757369632066696C-
   235 000003AF 650D0A7468726F7567-
   235 000003B8 682074686520504320-
   235 000003C1 737065616B6572206F-
   235 000003CA 7220616E2041646C69-
   235 000003D3 620D0A646576696365-
   235 000003DC 2C206261736564206F-
   235 000003E5 6E207468652066696C-
   235 000003EE 65277320666F726D61-
   235 000003F7 742E0D0A0A436F6D70-
   235 00000400 617469626C65206669-
   235 00000409 6C6520666F726D6174-
   235 00000412 733A0D0A2D204D4D46-
   235 0000041B 3A204D696368616C4F-
   235 00000424 5320504373706B204D-
   235 0000042D 7573696320466F726D-
   235 00000436 61740D0A2D2044524F-
   235 0000043F 2F44525A3A20444F53-
   235 00000448 426F782041646C6962-
   235 00000451 20636170747572650D-
   235 0000045A 0A2D205241443A2052-
   235 00000463 65616C697479204164-
   235 0000046C 6C696220547261636B-
   235 00000475 657200             
   242                                  	
   243 00000478 506C61792032204D4D-     	.listitem3			db 'Play 2 MMF (MichalOS PCspk Music', 13, 10, 						   'Format) files at the same time', 13, 10, 						   'through an Adlib device.', 0
   243 00000481 4620284D696368616C-
   243 0000048A 4F5320504373706B20-
   243 00000493 4D757369630D0A466F-
   243 0000049C 726D6174292066696C-
   243 000004A5 657320617420746865-
   243 000004AE 2073616D652074696D-
   243 000004B7 650D0A7468726F7567-
   243 000004C0 6820616E2041646C69-
   243 000004C9 62206465766963652E-
   243 000004D2 00                 
   246                                  	
   247 000004D3 517569742074686520-     	.listitem4			db 'Quit the application.', 0
   247 000004DC 6170706C6963617469-
   247 000004E5 6F6E2E00           
   248                                  	
   249 000004E9 506C65617365207365-     	.duo_msg1			db 'Please select the first file.', 0
   249 000004F2 6C6563742074686520-
   249 000004FB 66697273742066696C-
   249 00000504 652E00             
   250 00000507 506C65617365207365-     	.duo_msg2			db 'Please select the second file.', 0
   250 00000510 6C6563742074686520-
   250 00000519 7365636F6E64206669-
   250 00000522 6C652E00           
   251                                  	
   252 00000526 4D696368616C4F5320-     	.title_msg			db 'MichalOS Music Player', 0
   252 0000052F 4D7573696320506C61-
   252 00000538 79657200           
   253 0000053C 00                      	.footer_msg			db 0
   254 0000053D 5B53706163655D204D-     	.footer_msg_2		db '[Space] Mute all notes [Up/Down] Change octave', 0
   254 00000546 75746520616C6C206E-
   254 0000054F 6F746573205B55702F-
   254 00000558 446F776E5D20436861-
   254 00000561 6E6765206F63746176-
   254 0000056A 6500               
   255 0000056C 5B53706163655D2050-     	.footer_msg_3		db '[Space] Play/Pause [Escape] Stop', 0
   255 00000575 6C61792F5061757365-
   255 0000057E 205B4573636170655D-
   255 00000587 2053746F7000       
   256                                  	
   257 0000058D 04                      	.octave				db 4
   258                                  	
   259 0000058E 4F63746176653A2000      	.octavemsg			db 'Octave: ', 0
   260                                  	
   261 00000597 2C2D2E2F3031323334-     	.keydata1			db 2Ch, 2Dh, 2Eh, 2Fh, 30h, 31h, 32h, 33h, 34h, 35h
   261 000005A0 35                 
   262 000005A1 1F202223242627          	.keydata2			db 1Fh, 20h, 22h, 23h, 24h, 26h, 27h
   263 000005A8 101112131415161718-     	.keydata3			db 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah, 1Bh
   263 000005B1 191A1B             
   264 000005B4 03040607080A0B0D00      	.keydata4			db 03h, 04h, 06h, 07h, 08h, 0Ah, 0Bh, 0Dh, 00h
   265                                  	
   266 000005BD 160497042705750520-     	.notedata1			dw C6, D6, E6, F6, G6, A6, B6, C7, D7, E7
   266 000005C6 06E006B8072D082D09-
   266 000005CF 4D0A               
   267 000005D1 5504DD04C8057D0649-     	.notedata2			dw CS6, DS6, FS6, GS6, AS6, CS7, DS7
   267 000005DA 07A908B909         
   268 000005DF 2D082D094D0AEA0A40-     	.notedata3			dw C7, D7, E7, F7, G7, A7, B7, C8, D8, E8, F8, G8
   268 000005E8 0CC00D6F0F5A105B12-
   268 000005F1 9A14D4158018       
   269 000005F7 A908B909900BFA0C91-     	.notedata4			dw CS7, DS7, FS7, GS7, AS7, CS8, DS8, FS8
   269 00000600 0E531172132017     
   270                                  	
   271 00000607 496E76616C69642066-     	.err_string			db 'Invalid file type!', 0
   271 00000610 696C65207479706521-
   271 00000619 00                 
   272 0000061A 4D4D462C2044524F20-     	.err_string2		db 'MMF, DRO 2.0 or RAD only!', 0
   272 00000623 322E30206F72205241-
   272 0000062C 44206F6E6C792100   
   273                                  	
   274 00000634 46696C65206E6F7420-     	.err_msg			db 'File not found!', 0
   274 0000063D 666F756E642100     
   275                                  
   276 00000644 04                      	.extension_number	db 4
   277 00000645 4D4D4600                	.mmf_extension		db 'MMF', 0
   278 00000649 44524F00                	.dro_extension		db 'DRO', 0
   279 0000064D 44525A00                	.drz_extension		db 'DRZ', 0
   280 00000651 52414400                	.rad_extension		db 'RAD', 0
   281                                  	
   282 00000655 01                      	.poly_mmf_num		db 1
   283 00000656 4D4D4600                	.mmf_extension_2	db 'MMF', 0
   284                                  	
   285 0000065A B3202020DB202020DB-     	.piano0 db 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 179, 13, 10
   285 00000663 202020B3202020DB20-
   285 0000066C 2020DB202020DB2020-
   285 00000675 20B3202020DB202020-
   285 0000067E DB202020B3202020DB-
   285 00000687 202020DB202020DB20-
   285 00000690 2020B3202020DB2020-
   285 00000699 20DB202020B3202020-
   285 000006A2 DB202020B30D0A     
   286 000006A9 20B320202053202020-     	.piano1 db 32, 179, 32, 32, 32, 83, 32, 32, 32, 68, 32, 32, 32, 179, 32, 32, 32, 71, 32, 32, 32, 72, 32, 32, 32, 74, 32, 32, 32, 179, 32, 32, 32, 50, 32, 32, 32, 51, 32, 32, 32, 179, 32, 32, 32, 53, 32, 32, 32, 54, 32, 32, 32, 55, 32, 32, 32, 179, 32, 32, 32, 57, 32, 32, 32, 48, 32, 32, 32, 179, 32, 32, 32, 61, 32, 32, 32, 179, 13, 10
   286 000006B2 44202020B320202047-
   286 000006BB 202020482020204A20-
   286 000006C4 2020B3202020322020-
   286 000006CD 2033202020B3202020-
   286 000006D6 352020203620202037-
   286 000006DF 202020B32020203920-
   286 000006E8 202030202020B32020-
   286 000006F1 203D202020B30D0A   
   287 000006F9 20B3202020DB202020-     	.piano2 db 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 179, 13, 10
   287 00000702 DB202020B3202020DB-
   287 0000070B 202020DB202020DB20-
   287 00000714 2020B3202020DB2020-
   287 0000071D 20DB202020B3202020-
   287 00000726 DB202020DB202020DB-
   287 0000072F 202020B3202020DB20-
   287 00000738 2020DB202020B32020-
   287 00000741 20DB202020B30D0A   
   288 00000749 20B3202020DB202020-     	.piano3 db 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 219, 32, 32, 32, 179, 32, 32, 32, 219, 32, 32, 32, 179, 13, 10
   288 00000752 DB202020B3202020DB-
   288 0000075B 202020DB202020DB20-
   288 00000764 2020B3202020DB2020-
   288 0000076D 20DB202020B3202020-
   288 00000776 DB202020DB202020DB-
   288 0000077F 202020B3202020DB20-
   288 00000788 2020DB202020B32020-
   288 00000791 20DB202020B30D0A   
   289 00000799 20B3202020B3202020-     	.piano4 db 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 32, 32, 32, 179, 13, 10
   289 000007A2 B3202020B3202020B3-
   289 000007AB 202020B3202020B320-
   289 000007B4 2020B3202020B32020-
   289 000007BD 20B3202020B3202020-
   289 000007C6 B3202020B3202020B3-
   289 000007CF 202020B3202020B320-
   289 000007D8 2020B3202020B32020-
   289 000007E1 20B3202020B30D0A   
   290 000007E9 20B3205A20B3205820-     	.piano5 db 32, 179, 32, 90, 32, 179, 32, 88, 32, 179, 32, 67, 32, 179, 32, 86, 32, 179, 32, 66, 32, 179, 32, 78, 32, 179, 32, 77, 32, 179, 32, 81, 32, 179, 32, 87, 32, 179, 32, 69, 32, 179, 32, 82, 32, 179, 32, 84, 32, 179, 32, 89, 32, 179, 32, 85, 32, 179, 32, 73, 32, 179, 32, 79, 32, 179, 32, 80, 32, 179, 32, 91, 32, 179, 32, 93, 32, 179, 13, 10
   290 000007F2 B3204320B3205620B3-
   290 000007FB 204220B3204E20B320-
   290 00000804 4D20B3205120B32057-
   290 0000080D 20B3204520B3205220-
   290 00000816 B3205420B3205920B3-
   290 0000081F 205520B3204920B320-
   290 00000828 4F20B3205020B3205B-
   290 00000831 20B3205D20B30D0A   
   291 00000839 20C0C4C4C4C1C4C4C4-     	.piano6 db 32, 192, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 193, 196, 196, 196, 217, 0
   291 00000842 C1C4C4C4C1C4C4C4C1-
   291 0000084B C4C4C4C1C4C4C4C1C4-
   291 00000854 C4C4C1C4C4C4C1C4C4-
   291 0000085D C4C1C4C4C4C1C4C4C4-
   291 00000866 C1C4C4C4C1C4C4C4C1-
   291 0000086F C4C4C4C1C4C4C4C1C4-
   291 00000878 C4C4C1C4C4C4C1C4C4-
   291 00000881 C4C1C4C4C4D900     
   292                                  
   293 00000888 00                      	terminalflag		db 0
   294                                  	
   295                                  	%include "player/libs.asm"
     1                              <1> create_player_box:		; SI = top line, BX = center line
     2                              <1> 	clr ax
    31 00000889 31C0                <2>  xor %1, %1
     3                              <1> 	clr cx
    31 0000088B 31C9                <2>  xor %1, %1
     4                              <1> 	clr dx
    31 0000088D 31D2                <2>  xor %1, %1
     5 0000088F E8(3E81)            <1> 	call os_temp_box
     6                              <1> 
     7 00000892 B82009              <1> 	mov ax, 0920h
     8 00000895 BB8700              <1> 	mov bx, 87h
     9 00000898 B92800              <1> 	mov cx, 40
    10 0000089B CD10                <1> 	int 10h	
    11 0000089D C3                  <1> 	ret
    12                              <1> 	
    13                              <1> draw_progress_bar:		; EAX = current position, EBX = total
    14 0000089E 6660                <1> 	pushad
    15                              <1> 	mov16 dx, 20, 14
    35 000008A0 BA140E              <2>  mov %1, (%2 + %3 * 256)
    16 000008A3 E8(0680)            <1> 	call os_move_cursor
    17                              <1> 	
    18                              <1> 	clr edx
    31 000008A6 6631D2              <2>  xor %1, %1
    19 000008A9 66B950000000        <1> 	mov ecx, 80
    20 000008AF 66F7E1              <1> 	mul ecx
    21 000008B2 66F7F3              <1> 	div ebx
    22                              <1> 
    23 000008B5 3B06[ED08]          <1> 	cmp ax, [.lastval]
    24 000008B9 7D0D                <1> 	jge .no_redraw
    25                              <1> 	
    26 000008BB 60                  <1> 	pusha
    27 000008BC B82009              <1> 	mov ax, 0920h
    28 000008BF BB8700              <1> 	mov bx, 87h
    29 000008C2 B92800              <1> 	mov cx, 40
    30 000008C5 CD10                <1> 	int 10h
    31 000008C7 61                  <1> 	popa
    32                              <1> 	
    33                              <1> .no_redraw:
    34 000008C8 A3[ED08]            <1> 	mov [.lastval], ax
    35 000008CB 50                  <1> 	push ax
    36                              <1> 	
    37 000008CC D1E8                <1> 	shr ax, 1
    38                              <1> 	
    39 000008CE 85C0                <1> 	test ax, ax
    40 000008D0 740B                <1> 	jz .nodraw
    41                              <1> 	
    42 000008D2 89C1                <1> 	mov cx, ax
    43                              <1> 	
    44                              <1> .loop:
    45 000008D4 B8DB0E              <1> 	mov ax, 0EDBh
    46                              <1> 	clr bx
    31 000008D7 31DB                <2>  xor %1, %1
    47 000008D9 CD10                <1> 	int 10h
    48                              <1> 	
    49 000008DB E2F7                <1> 	loop .loop
    50                              <1> 	
    51                              <1> .nodraw:
    52 000008DD 58                  <1> 	pop ax
    53 000008DE A90100              <1> 	test ax, 1
    54 000008E1 7407                <1> 	jz .exit
    55                              <1> 	
    56 000008E3 B8DD0E              <1> 	mov ax, 0EDDh
    57                              <1> 	clr bx
    31 000008E6 31DB                <2>  xor %1, %1
    58 000008E8 CD10                <1> 	int 10h
    59                              <1> 	
    60                              <1> .exit:
    61 000008EA 6661                <1> 	popad
    62 000008EC C3                  <1> 	ret
    63                              <1> 	
    64 000008ED 0000                <1> 	.lastval	dw 0
   296                                  	%include "player/dro.asm"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; MichalOS Music Player - DRO decoder
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> start_drz:
     6 000008EF 61                  <1> 	popa
     7                              <1> 
     8 000008F0 53                  <1> 	push bx
     9                              <1> 	
    10 000008F1 06                  <1> 	push es
    11 000008F2 8CE8                <1> 	mov ax, gs
    12 000008F4 050020              <1> 	add ax, 2000h		; Scratch segment
    13 000008F7 8EC0                <1> 	mov es, ax
    14 000008F9 89D8                <1> 	mov ax, bx
    15                              <1> 	clr cx
    31 000008FB 31C9                <2>  xor %1, %1
    16 000008FD E8(2180)            <1> 	call os_load_file
    17 00000900 07                  <1> 	pop es
    18                              <1> 	
    19 00000901 0F82B701            <1> 	jc start_dro.stop
    20                              <1> 
    21 00000905 1E                  <1> 	push ds
    22 00000906 06                  <1> 	push es
    23                              <1> 	
    24 00000907 8CE8                <1> 	mov ax, gs
    25 00000909 8EC0                <1> 	mov es, ax
    26 0000090B 050020              <1> 	add ax, 2000h
    27 0000090E 8ED8                <1> 	mov ds, ax
    28                              <1> 	clr si
    31 00000910 31F6                <2>  xor %1, %1
    29                              <1> 	clr di
    31 00000912 31FF                <2>  xor %1, %1
    30                              <1> 
    31                              <1> 	; The file contains several compressed 64 kB chunks, so decompress each one
    32                              <1> 
    33 00000914 AC                  <1> 	lodsb				; Load the number of chunks
    34 00000915 0FB6C8              <1> 	movzx cx, al
    35                              <1> 
    36                              <1> .loadsegloop:
    37 00000918 AD                  <1> 	lodsw				; Load the compressed chunk pointer
    38                              <1> 
    39 00000919 56                  <1> 	push si
    40 0000091A 89C6                <1> 	mov si, ax
    41                              <1> 
    42 0000091C 51                  <1> 	push cx
    43 0000091D E8(0E81)            <1> 	call os_decompress_zx7	; Decompress the chunk
    44 00000920 59                  <1> 	pop cx
    45 00000921 5E                  <1> 	pop si
    46                              <1> 
    47 00000922 8CC0                <1> 	mov ax, es
    48 00000924 050010              <1> 	add ax, 1000h		; Point to the next segment
    49 00000927 8EC0                <1> 	mov es, ax
    50                              <1> 	clr di
    31 00000929 31FF                <2>  xor %1, %1
    51                              <1> 
    52 0000092B E2EB                <1> 	loop .loadsegloop
    53                              <1> 
    54 0000092D 07                  <1> 	pop es
    55 0000092E 1F                  <1> 	pop ds
    56                              <1> 
    57 0000092F EB13                <1> 	jmp start_dro.dro_post_load
    58                              <1> 
    59                              <1> start_dro:
    60 00000931 61                  <1> 	popa
    61                              <1> 
    62 00000932 53                  <1> 	push bx
    63                              <1> 	
    64 00000933 06                  <1> 	push es
    65 00000934 8CE8                <1> 	mov ax, gs
    66 00000936 8EC0                <1> 	mov es, ax
    67 00000938 89D8                <1> 	mov ax, bx
    68                              <1> 	clr cx
    31 0000093A 31C9                <2>  xor %1, %1
    69 0000093C E8(2180)            <1> 	call os_load_file
    70 0000093F 07                  <1> 	pop es
    71                              <1> 	
    72 00000940 0F827801            <1> 	jc .stop
    73                              <1> 
    74                              <1> .dro_post_load:	
    75 00000944 E8FCF7              <1> 	call start.draw_player_background
    76                              <1> 	
    77 00000947 BE[330B]            <1> 	mov si, .playmsg1
    78 0000094A BB[400B]            <1> 	mov bx, .playmsg2
    79 0000094D E839FF              <1> 	call create_player_box
    80                              <1> 	
    81 00000950 BA210A              <1> 	mov dx, 0A21h
    82 00000953 E8(0680)            <1> 	call os_move_cursor
    83                              <1> 	
    84 00000956 5E                  <1> 	pop si
    85 00000957 E8(0380)            <1> 	call os_print_string
    86                              <1> 	
    87                              <1> .dro_decode:
    88 0000095A C606[F00A]00        <1> 	mov byte [.play], 0
    89 0000095F 66C706[E80A]000000- <1> 	mov dword [.target_pos], 0
    89 00000967 00                  <1>
    90                              <1> 	
    91 00000968 E85701              <1> 	call .clear_adlib
    92                              <1> 
    93 0000096B 6566A11000          <1> 	mov eax, [gs:10h]	; Song length in miliseconds
    94 00000970 66C1E80A            <1> 	shr eax, 10
    95 00000974 A3[EC0A]            <1> 	mov [.song_length], ax
    96                              <1> 	
    97 00000977 65A01700            <1> 	mov al, [gs:17h]
    98 0000097B 2EA2[DA0A]          <1> 	mov [cs:.short_delay], al
    99 0000097F 65A01800            <1> 	mov al, [gs:18h]
   100 00000983 2EA2[DB0A]          <1> 	mov [cs:.long_delay], al
   101 00000987 65A01900            <1> 	mov al, [gs:19h]	; Codemap length
   102                              <1> 
   103 0000098B 0FB6D8              <1> 	movzx bx, al
   104 0000098E 891E[EE0A]          <1> 	mov [.codemap], bx
   105                              <1> 	
   106 00000992 6625FF000000        <1> 	and eax, 000000FFh
   107 00000998 6683C01A            <1> 	add eax, 1Ah	; Get the data start
   108                              <1> 
   109 0000099C A3[DC0A]            <1> 	mov [.position_offset], ax
   110 0000099F C706[DE0A]0000      <1> 	mov word [.position_segment], 0
   111                              <1> 	
   112 000009A5 656603060C00        <1> 	add eax, [gs:0Ch]	; Add the song length
   113                              <1> 	
   114 000009AB 66D1E0              <1> 	shl eax, 1			; Register pairs -> offset
   115 000009AE A3[E00A]            <1> 	mov [.length_offset], ax
   116                              <1> 	
   117 000009B1 66C1E804            <1> 	shr eax, 4			; Get the segment
   118 000009B5 2500F0              <1> 	and ax, 0F000h
   119 000009B8 A3[E20A]            <1> 	mov [.length_segment], ax
   120                              <1> 	
   121 000009BB E8(0281)            <1> 	call os_stop_adlib
   122                              <1> 
   123 000009BE 66C706[E40A]000000- <1> 	mov dword [.current_pos], 0
   123 000009C6 00                  <1>
   124                              <1> 
   125 000009C7 BE[CC0A]            <1> 	mov si, .int_handler
   126 000009CA B98400              <1> 	mov cx, 132
   127 000009CD B309                <1> 	mov bl, 9
   128 000009CF E8(D880)            <1> 	call os_start_adlib
   129                              <1> 
   130 000009D2 EB1F                <1> 	jmp .noplaypause
   131                              <1> 	
   132                              <1> .loop:
   133                              <1> 	; Check the keys
   134                              <1> 	
   135 000009D4 E8(1580)            <1> 	call os_check_for_key
   136 000009D7 3C1B                <1> 	cmp al, 27
   137 000009D9 0F84DF00            <1> 	je .stop
   138 000009DD 3C20                <1> 	cmp al, 32
   139 000009DF 7512                <1> 	jne .noplaypause
   140                              <1> 
   141 000009E1 8036[F00A]01        <1> 	xor byte [.play], 1
   142                              <1> 	
   143 000009E6 803E[F00A]00        <1> 	cmp byte [.play], 0
   144 000009EB 0F849E00            <1> 	je .unmute
   145 000009EF 0F85A000            <1> 	jne .mute
   146                              <1> 	
   147                              <1> .noplaypause:
   148                              <1> 	; Display the info
   149                              <1> 	
   150 000009F3 6660                <1> 	pushad
   151                              <1> 
   152 000009F5 66A1[E40A]          <1> 	mov eax, [.current_pos]
   153 000009F9 A9FF03              <1> 	test ax, 1111111111b
   154 000009FC 752C                <1> 	jnz .no_update_timer
   155                              <1> 
   156 000009FE 65668B1E1000        <1> 	mov ebx, [gs:10h]
   157 00000A04 E897FE              <1> 	call draw_progress_bar
   158                              <1> 
   159 00000A07 66C1E80A            <1> 	shr eax, 10			; Waaay faster than dividing by 250
   160                              <1> 	
   161 00000A0B BA260C              <1> 	mov dx, 0C26h
   162 00000A0E E8(0680)            <1> 	call os_move_cursor
   163                              <1> 
   164 00000A11 E8(4D81)            <1> 	call os_print_int
   165                              <1> 	
   166 00000A14 B073                <1> 	mov al, 73h			; Print an "s"
   167 00000A16 E8(D580)            <1> 	call os_putchar
   168                              <1> 	
   169 00000A19 B02F                <1> 	mov al, 2Fh			; "/"
   170 00000A1B E8(D580)            <1> 	call os_putchar
   171                              <1> 	
   172 00000A1E A1[EC0A]            <1> 	mov ax, [.song_length]
   173 00000A21 E8(4D81)            <1> 	call os_print_int
   174                              <1> 	
   175 00000A24 BE[520B]            <1> 	mov si, .end_time_msg
   176 00000A27 E8(0380)            <1> 	call os_print_string
   177                              <1> 	
   178                              <1> .no_update_timer:
   179 00000A2A 6661                <1> 	popad
   180                              <1> 	
   181                              <1> 	; DRO parsing
   182 00000A2C 66A1[E80A]          <1> 	mov eax, [.target_pos]
   183 00000A30 663906[E40A]        <1> 	cmp [.current_pos], eax
   184 00000A35 7C9D                <1> 	jl .loop
   185                              <1> 
   186 00000A37 A1[DE0A]            <1> 	mov ax, [.position_segment]
   187 00000A3A 3B06[E20A]          <1> 	cmp ax, [.length_segment]
   188 00000A3E 750B                <1> 	jne .no_reset
   189                              <1> 
   190 00000A40 A1[DC0A]            <1> 	mov ax, [.position_offset]
   191 00000A43 3B06[E00A]          <1> 	cmp ax, [.length_offset]
   192 00000A47 0F840FFF            <1> 	je .dro_decode
   193                              <1> 	
   194                              <1> .no_reset:
   195 00000A4B 06                  <1> 	push es
   196 00000A4C A1[DE0A]            <1> 	mov ax, [.position_segment]
   197 00000A4F 8CEB                <1> 	mov bx, gs
   198 00000A51 01D8                <1> 	add ax, bx
   199 00000A53 8EC0                <1> 	mov es, ax
   200                              <1> 	
   201 00000A55 8B36[DC0A]          <1> 	mov si, [.position_offset]
   202 00000A59 268B04              <1> 	mov ax, [es:si]
   203 00000A5C 07                  <1> 	pop es
   204                              <1> 	
   205 00000A5D 8306[DC0A]02        <1> 	add word [.position_offset], 2
   206 00000A62 7306                <1> 	jnc .no_segment_inc
   207                              <1> 	
   208 00000A64 8106[DE0A]0010      <1> 	add word [.position_segment], 1000h
   209                              <1> 	
   210                              <1> .no_segment_inc:
   211 00000A6A 86E0                <1> 	xchg ah, al
   212                              <1> 	
   213 00000A6C 3A26[DA0A]          <1> 	cmp ah, [.short_delay]
   214 00000A70 7427                <1> 	je .do_short
   215                              <1> 	
   216 00000A72 3A26[DB0A]          <1> 	cmp ah, [.long_delay]
   217 00000A76 7432                <1> 	je .do_long
   218                              <1> 	
   219 00000A78 0FB6DC              <1> 	movzx bx, ah			; Decode the command
   220 00000A7B 3B1E[EE0A]          <1> 	cmp bx, [.codemap]
   221 00000A7F 0F8F51FF            <1> 	jg .loop
   222                              <1> 	
   223 00000A83 658A671A            <1> 	mov ah, [gs:1Ah + bx]
   224 00000A87 E8(4B80)            <1> 	call os_adlib_regwrite
   225                              <1> 	
   226 00000A8A E947FF              <1> 	jmp .loop
   227                              <1> 
   228                              <1> .unmute:
   229 00000A8D E8(4181)            <1> 	call os_adlib_unmute
   230 00000A90 E960FF              <1> 	jmp .noplaypause
   231                              <1> 	
   232                              <1> .mute:
   233 00000A93 E8(1481)            <1> 	call os_adlib_mute
   234 00000A96 E95AFF              <1> 	jmp .noplaypause
   235                              <1> 
   236                              <1> .do_short:
   237 00000A99 60                  <1> 	pusha
   238 00000A9A FEC0                <1> 	inc al
   239                              <1> 	clr ebx
    31 00000A9C 6631DB              <2>  xor %1, %1
   240 00000A9F 88C3                <1> 	mov bl, al
   241 00000AA1 66011E[E80A]        <1> 	add [.target_pos], ebx
   242 00000AA6 61                  <1> 	popa
   243 00000AA7 E92AFF              <1> 	jmp .loop
   244                              <1> 	
   245                              <1> .do_long:
   246 00000AAA 60                  <1> 	pusha
   247 00000AAB FEC0                <1> 	inc al
   248                              <1> 	clr ebx
    31 00000AAD 6631DB              <2>  xor %1, %1
   249 00000AB0 88C7                <1> 	mov bh, al
   250 00000AB2 66011E[E80A]        <1> 	add [.target_pos], ebx
   251 00000AB7 61                  <1> 	popa
   252 00000AB8 E919FF              <1> 	jmp .loop
   253                              <1> 	
   254                              <1> .wait_stop:
   255 00000ABB 61                  <1> 	popa
   256                              <1> 	
   257                              <1> .stop:
   258 00000ABC E8(0281)            <1> 	call os_stop_adlib
   259                              <1> 	
   260 00000ABF E93EF5              <1> 	jmp start
   261                              <1> 	
   262                              <1> .clear_adlib:
   263                              <1> 	clr ax
    31 00000AC2 31C0                <2>  xor %1, %1
   264                              <1> 	
   265                              <1> .exit_loop:
   266 00000AC4 E8(4B80)            <1> 	call os_adlib_regwrite
   267 00000AC7 FEC4                <1> 	inc ah
   268 00000AC9 75F9                <1> 	jnz .exit_loop
   269                              <1> 	
   270 00000ACB C3                  <1> 	ret
   271                              <1> 
   272                              <1> .int_handler:
   273 00000ACC 803E[F00A]01        <1> 	cmp byte [.play], 1
   274 00000AD1 7406                <1> 	je .no_dec_timer
   275                              <1> 	
   276 00000AD3 668306[E40A]04      <1> 	add dword [.current_pos], 4
   277                              <1> 
   278                              <1> .no_dec_timer:
   279 00000AD9 CB                  <1> 	retf
   280                              <1> 
   281 00000ADA 00                  <1> 	.short_delay		db 0
   282 00000ADB 00                  <1> 	.long_delay			db 0
   283 00000ADC 0000                <1> 	.position_offset	dw 0
   284 00000ADE 0000                <1> 	.position_segment	dw 0
   285 00000AE0 0000                <1> 	.length_offset		dw 0
   286 00000AE2 0000                <1> 	.length_segment		dw 0
   287                              <1> 	
   288 00000AE4 00000000            <1> 	.current_pos		dd 0
   289 00000AE8 00000000            <1> 	.target_pos			dd 0
   290 00000AEC 0000                <1> 	.song_length		dw 0
   291                              <1> 	
   292 00000AEE 0000                <1> 	.codemap			dw 0
   293 00000AF0 00                  <1> 	.play				db 0
   294                              <1> 	
   295 00000AF1 536F6E67206C656E67- <1> 	.millilength_msg	db 'Song length (in milliseconds): ', 0
   295 00000AFA 74682028696E206D69- <1>
   295 00000B03 6C6C697365636F6E64- <1>
   295 00000B0C 73293A2000          <1>
   296 00000B11 43757272656E742070- <1> 	.position_msg		db 'Current position (milliseconds): ', 0
   296 00000B1A 6F736974696F6E2028- <1>
   296 00000B23 6D696C6C697365636F- <1>
   296 00000B2C 6E6473293A2000      <1>
   297 00000B33 4E6F7720706C617969- <1> 	.playmsg1			db 'Now playing:', 0
   297 00000B3C 6E673A00            <1>
   298 00000B40 43757272656E742070- <1> 	.playmsg2			db 'Current position:', 0
   298 00000B49 6F736974696F6E3A00  <1>
   299 00000B52 732020202000        <1> 	.end_time_msg		db 's    ', 0
   297                                  	%include "player/monommf.asm"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; MichalOS Music Player - mono MMF decoder
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> start_mono_mmf:
     6 00000B58 53                  <1> 	push bx
     7                              <1> 
     8 00000B59 89D8                <1> 	mov ax, bx
     9 00000B5B B9[F015]            <1> 	mov cx, buffer
    10 00000B5E E8(2180)            <1> 	call os_load_file
    11                              <1> 
    12 00000B61 83EB03              <1> 	sub bx, 3
    13 00000B64 891E[4D0C]          <1> 	mov [.filesize], bx
    14                              <1> 	
    15 00000B68 8B0E[F015]          <1> 	mov cx, [buffer]
    16 00000B6C E8(7B80)            <1> 	call os_set_timer_speed
    17                              <1> 	
    18 00000B6F E8D1F5              <1> 	call start.draw_player_background
    19 00000B72 B8[530C]            <1> 	mov ax, .msgstart
    20                              <1> 	clr bx
    31 00000B75 31DB                <2>  xor %1, %1
    21                              <1> 	clr cx
    31 00000B77 31C9                <2>  xor %1, %1
    22                              <1> 	clr dx
    31 00000B79 31D2                <2>  xor %1, %1
    23 00000B7B E8(3980)            <1> 	call os_dialog_box
    24                              <1> 	
    25 00000B7E BE[330B]            <1> 	mov si, start_dro.playmsg1
    26 00000B81 BB[400B]            <1> 	mov bx, start_dro.playmsg2
    27 00000B84 E802FD              <1> 	call create_player_box
    28                              <1> 	
    29 00000B87 BA210A              <1> 	mov dx, 0A21h
    30 00000B8A E8(0680)            <1> 	call os_move_cursor
    31 00000B8D 5E                  <1> 	pop si
    32 00000B8E E8(0380)            <1> 	call os_print_string
    33                              <1> 
    34                              <1> .play_loop:
    35 00000B91 E84400              <1> 	call .int_handler
    36 00000B94 E8(1580)            <1> 	call os_check_for_key
    37                              <1> 	
    38 00000B97 3C1B                <1> 	cmp al, 27
    39 00000B99 7419                <1> 	je .exit
    40 00000B9B 3C20                <1> 	cmp al, 32
    41 00000B9D 7432                <1> 	je .pause
    42                              <1> 	
    43 00000B9F B80100              <1> 	mov ax, 1
    44 00000BA2 E8(2480)            <1> 	call os_pause
    45                              <1> 	
    46 00000BA5 813E[4B0C][F315]    <1> 	cmp word [.pointer], .track0
    47 00000BAB 75E4                <1> 	jne .play_loop
    48 00000BAD 803E[510C]00        <1> 	cmp byte [.delay], 0
    49 00000BB2 75DD                <1> 	jne .play_loop
    50                              <1> 
    51                              <1> .exit:
    52 00000BB4 C706[4B0C][F315]    <1> 	mov word [.pointer], .track0	; Reset the values when we press Esc
    53 00000BBA C706[490C]0000      <1> 	mov word [.previous], 0
    54 00000BC0 C706[4F0C]0000      <1> 	mov word [.counter], 0
    55 00000BC6 C606[520C]00        <1> 	mov byte [.paused], 0
    56                              <1> 	
    57                              <1> 	clr cx					; 18.2 Hz
    31 00000BCB 31C9                <2>  xor %1, %1
    58 00000BCD E8(7B80)            <1> 	call os_set_timer_speed
    59 00000BD0 C3                  <1> 	ret
    60                              <1> 	
    61                              <1> .pause:
    62 00000BD1 8036[520C]01        <1> 	xor byte [.paused], 1
    63 00000BD6 EBB9                <1> 	jmp .play_loop
    64                              <1> 	
    65                              <1> .int_handler:
    66 00000BD8 60                  <1> 	pusha
    67 00000BD9 803E[520C]00        <1> 	cmp byte [.paused], 0
    68 00000BDE 7557                <1> 	jne .skip_play
    69                              <1> 	
    70 00000BE0 FE06[510C]          <1> 	inc byte [.delay]
    71 00000BE4 A0[F215]            <1> 	mov al, [.song_delay]
    72 00000BE7 3806[510C]          <1> 	cmp byte [.delay], al
    73 00000BEB 7C4A                <1> 	jl .skip_play
    74                              <1> 	
    75 00000BED FF06[4F0C]          <1> 	inc word [.counter]
    76 00000BF1 60                  <1> 	pusha
    77 00000BF2 BA260C              <1> 	mov dx, 0C26h
    78 00000BF5 E8(0680)            <1> 	call os_move_cursor
    79 00000BF8 A1[4F0C]            <1> 	mov ax, [.counter]
    80 00000BFB E8(4D81)            <1> 	call os_print_int
    81 00000BFE 61                  <1> 	popa
    82                              <1> 	
    83 00000BFF 660FB706[4B0C]      <1> 	movzx eax, word [.pointer]
    84 00000C05 662D[F3150000]      <1> 	sub eax, buffer + 3
    85 00000C0B 660FB71E[4D0C]      <1> 	movzx ebx, word [.filesize]
    86 00000C11 E88AFC              <1> 	call draw_progress_bar
    87                              <1> 
    88 00000C14 C606[510C]00        <1> 	mov byte [.delay], 0
    89                              <1> 	
    90 00000C19 8B36[4B0C]          <1> 	mov si, [.pointer]
    91 00000C1D AD                  <1> 	lodsw
    92 00000C1E 8936[4B0C]          <1> 	mov [.pointer], si
    93                              <1> 	
    94 00000C22 3B06[490C]          <1> 	cmp ax, [.previous]
    95 00000C26 740F                <1> 	je .skip_play
    96                              <1> 	
    97 00000C28 A3[490C]            <1> 	mov [.previous], ax
    98                              <1> 	
    99 00000C2B 85C0                <1> 	test ax, ax
   100 00000C2D 740A                <1> 	jz .notone
   101                              <1> 	
   102 00000C2F 83F801              <1> 	cmp ax, 1
   103 00000C32 740A                <1> 	je .end
   104                              <1> 	
   105 00000C34 E8(1B80)            <1> 	call os_speaker_tone
   106                              <1> 	
   107                              <1> .skip_play:
   108 00000C37 61                  <1> 	popa
   109 00000C38 C3                  <1> 	ret
   110                              <1> 	
   111                              <1> .notone:
   112 00000C39 E8(1E80)            <1> 	call os_speaker_off
   113 00000C3C 61                  <1> 	popa
   114 00000C3D C3                  <1> 	ret
   115                              <1> 	
   116                              <1> .end:
   117 00000C3E E8(1E80)            <1> 	call os_speaker_off
   118 00000C41 C706[4B0C][F315]    <1> 	mov word [.pointer], .track0
   119 00000C47 61                  <1> 	popa
   120 00000C48 C3                  <1> 	ret
   121                              <1> 
   122 00000C49 0000                <1> 	.previous	dw 0
   123 00000C4B [F315]              <1> 	.pointer	dw .track0
   124 00000C4D 0000                <1> 	.filesize	dw 0
   125 00000C4F 0000                <1> 	.counter	dw 0
   126 00000C51 00                  <1> 	.delay		db 0
   127 00000C52 00                  <1> 	.paused		db 0
   128                              <1> 	.song_delay	equ buffer + 2
   129                              <1> 	.track0		equ buffer + 3
   130 00000C53 5072657373204F4B20- <1>  	.msgstart	db 'Press OK to start...', 0
   130 00000C5C 746F2073746172742E- <1>
   130 00000C65 2E2E00              <1>
   298                                  	%include "player/polymmf.asm"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; MichalOS Music Player - duo MMF decoder
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> start_poly_mmf:
     6 00000C68 891E[A30D]          <1> 	mov [.filesize], bx
     7                              <1> 
     8 00000C6C E8D4F4              <1> 	call start.draw_player_background
     9                              <1> 
    10                              <1> 	clr dx
    31 00000C6F 31D2                <2>  xor %1, %1
    11 00000C71 A1[F015]            <1> 	mov ax, [buffer]
    12 00000C74 85C0                <1> 	test ax, ax
    13 00000C76 7501                <1> 	jnz .no_18_2
    14                              <1> 	
    15 00000C78 42                  <1> 	inc dx
    16                              <1> 	
    17                              <1> .no_18_2:
    18 00000C79 BB2400              <1> 	mov bx, 36
    19 00000C7C F7F3                <1> 	div bx
    20                              <1> 	
    21 00000C7E BE[900D]            <1> 	mov si, .int_handler
    22 00000C81 89C1                <1> 	mov cx, ax
    23 00000C83 B302                <1> 	mov bl, 2
    24 00000C85 E8(D880)            <1> 	call os_start_adlib
    25                              <1> 	
    26 00000C88 B90700              <1> 	mov cx, 7					; We will only read 7 registers here
    27 00000C8B BE[8D15]            <1> 	mov si, polypiano.adlibsquare
    28                              <1> 	
    29                              <1> .preparechannels:
    30 00000C8E AD                  <1> 	lodsw
    31                              <1> 	
    32 00000C8F 51                  <1> 	push cx
    33                              <1> 	clr bx
    31 00000C90 31DB                <2>  xor %1, %1
    34 00000C92 B90900              <1> 	mov cx, 9
    35                              <1> 	
    36                              <1> .channelloop:
    37 00000C95 50                  <1> 	push ax
    38 00000C96 02A7[9D15]          <1> 	add ah, [polypiano.adliboffsets + bx]
    39 00000C9A 43                  <1> 	inc bx
    40                              <1> 	
    41 00000C9B E8(4B80)            <1> 	call os_adlib_regwrite
    42 00000C9E 58                  <1> 	pop ax
    43                              <1> 	
    44 00000C9F E2F4                <1> 	loop .channelloop
    45                              <1> 	
    46 00000CA1 59                  <1> 	pop cx
    47 00000CA2 E2EA                <1> 	loop .preparechannels
    48                              <1> 	
    49 00000CA4 AD                  <1> 	lodsw
    50                              <1> 	
    51                              <1> .feedbackloop:					; Write the 8th register
    52 00000CA5 E8(4B80)            <1> 	call os_adlib_regwrite
    53 00000CA8 FEC4                <1> 	inc ah
    54 00000CAA 80FCC9              <1> 	cmp ah, 0C9h
    55 00000CAD 75F6                <1> 	jne .feedbackloop
    56                              <1> 
    57 00000CAF BE[A50D]            <1> 	mov si, .playmsg
    58 00000CB2 BB[400B]            <1> 	mov bx, start_dro.playmsg2
    59 00000CB5 E8D1FB              <1> 	call create_player_box
    60                              <1> 
    61 00000CB8 A0[F215]            <1> 	mov al, [.song_delay]
    62 00000CBB A2[980D]            <1> 	mov [.sdelay], al
    63                              <1> 
    64 00000CBE A0[A24C]            <1> 	mov al, [.song_delay_2]
    65 00000CC1 A2[9C0D]            <1> 	mov [.sdelay_2], al
    66                              <1> 
    67 00000CC4 C706[960D][F315]    <1> 	mov word [.pointer], .track0	; Reset the values when we press Esc
    68 00000CCA C606[990D]01        <1> 	mov byte [.delay], 1
    69                              <1> 	
    70 00000CCF C706[9A0D][A34C]    <1> 	mov word [.pointer_2], .track0_2
    71 00000CD5 C606[9D0D]01        <1> 	mov byte [.delay_2], 1
    72                              <1> 
    73 00000CDA C706[9E0D]0000      <1> 	mov word [.counter], 0
    74 00000CE0 C606[A00D]00        <1> 	mov byte [.paused], 0
    75 00000CE5 C606[A10D]00        <1> 	mov byte [.song_end], 0
    76                              <1> 
    77 00000CEA C606[A20D]00        <1> 	mov byte [.playreq], 0
    78                              <1> 
    79                              <1> .play_loop:
    80 00000CEF 803E[A20D]01        <1> 	cmp byte [.playreq], 1
    81 00000CF4 751C                <1> 	jne .no_play
    82                              <1> 
    83 00000CF6 C606[A20D]00        <1> 	mov byte [.playreq], 0
    84                              <1> 
    85 00000CFB 803E[A00D]00        <1> 	cmp byte [.paused], 0
    86 00000D00 7510                <1> 	jne .no_play
    87                              <1> 
    88                              <1> 	clr cl		; Channel
    31 00000D02 30C9                <2>  xor %1, %1
    89 00000D04 BF[960D]            <1> 	mov di, .pointer
    90 00000D07 E83C00              <1> 	call .parse_channel
    91                              <1> 
    92 00000D0A FEC1                <1> 	inc cl
    93 00000D0C BF[9A0D]            <1> 	mov di, .pointer_2
    94 00000D0F E83400              <1> 	call .parse_channel
    95                              <1> 	
    96                              <1> .no_play:
    97 00000D12 BA260C              <1> 	mov dx, 0C26h
    98 00000D15 E8(0680)            <1> 	call os_move_cursor
    99                              <1> 	
   100 00000D18 A1[9E0D]            <1> 	mov ax, [.counter]
   101 00000D1B E8(4D81)            <1> 	call os_print_int
   102                              <1> 
   103 00000D1E 660FB706[9A0D]      <1> 	movzx eax, word [.pointer_2]
   104 00000D24 662D[A34C0000]      <1> 	sub eax, buffer2 + 3
   105 00000D2A 660FB71E[A30D]      <1> 	movzx ebx, word [.filesize]
   106 00000D30 E86BFB              <1> 	call draw_progress_bar
   107                              <1> 
   108 00000D33 E8(1580)            <1> 	call os_check_for_key
   109 00000D36 3C1B                <1> 	cmp al, 27
   110 00000D38 743B                <1> 	je .exit
   111 00000D3A 3C20                <1> 	cmp al, 32
   112 00000D3C 743B                <1> 	je .pause
   113                              <1> 	
   114 00000D3E F4                  <1> 	hlt
   115                              <1> 
   116 00000D3F 803E[A10D]01        <1> 	cmp byte [.song_end], 1
   117 00000D44 75A9                <1> 	jne .play_loop
   118                              <1> 
   119                              <1> .parse_channel:
   120 00000D46 FE4D03              <1> 	dec byte [di + 3]	; Delay value
   121 00000D49 751F                <1> 	jnz .no_parse_channel
   122                              <1> 	
   123 00000D4B 8A4502              <1> 	mov al, [di + 2] 	; Global song delay value
   124 00000D4E 884503              <1> 	mov [di + 3], al
   125                              <1> 	
   126 00000D51 84C9                <1> 	test cl, cl
   127 00000D53 7504                <1> 	jnz .no_inc_ctr
   128                              <1> 
   129 00000D55 FF06[9E0D]          <1> 	inc word [.counter]
   130                              <1> 
   131                              <1> .no_inc_ctr:
   132 00000D59 8B35                <1> 	mov si, [di]		; Current pointer
   133 00000D5B AD                  <1> 	lodsw
   134 00000D5C 8935                <1> 	mov [di], si
   135                              <1> 	
   136 00000D5E 85C0                <1> 	test ax, ax
   137 00000D60 7409                <1> 	jz .notone
   138                              <1> 	
   139 00000D62 83F801              <1> 	cmp ax, 1
   140 00000D65 7408                <1> 	je .mark_end
   141                              <1> 	
   142 00000D67 E8(C680)            <1> 	call os_adlib_calcfreq
   143                              <1> 
   144                              <1> .no_parse_channel:
   145 00000D6A C3                  <1> 	ret
   146                              <1> 
   147                              <1> .notone:
   148 00000D6B E8(0581)            <1> 	call os_adlib_noteoff
   149 00000D6E C3                  <1> 	ret
   150                              <1> 
   151                              <1> .mark_end:
   152 00000D6F C606[A10D]01        <1> 	mov byte [.song_end], 1
   153 00000D74 C3                  <1> 	ret
   154                              <1> 
   155                              <1> .exit:
   156 00000D75 E8(0281)            <1> 	call os_stop_adlib
   157 00000D78 C3                  <1> 	ret
   158                              <1> 	
   159                              <1> .pause:
   160 00000D79 8036[A00D]01        <1> 	xor byte [.paused], 1
   161                              <1> 
   162 00000D7E E8(1481)            <1> 	call os_adlib_mute
   163                              <1> 
   164 00000D81 803E[A00D]01        <1> 	cmp byte [.paused], 1
   165 00000D86 0F8465FF            <1> 	je .play_loop
   166                              <1> 
   167 00000D8A E8(4181)            <1> 	call os_adlib_unmute
   168                              <1> 
   169 00000D8D E95FFF              <1> 	jmp .play_loop
   170                              <1> 	
   171                              <1> .int_handler:
   172 00000D90 C606[A20D]01        <1> 	mov byte [.playreq], 1
   173 00000D95 CB                  <1> 	retf
   174                              <1> 	
   175 00000D96 [F315]              <1> 	.pointer	dw .track0
   176 00000D98 00                  <1> 	.sdelay		db 0
   177 00000D99 01                  <1> 	.delay		db 1
   178                              <1> 
   179 00000D9A [A34C]              <1> 	.pointer_2	dw .track0_2
   180 00000D9C 00                  <1> 	.sdelay_2	db 0
   181 00000D9D 01                  <1> 	.delay_2	db 1
   182                              <1> 
   183 00000D9E 0000                <1> 	.counter	dw 0
   184 00000DA0 00                  <1> 	.paused		db 0
   185 00000DA1 00                  <1> 	.song_end	db 0
   186                              <1> 
   187 00000DA2 00                  <1> 	.playreq	db 0
   188 00000DA3 0000                <1> 	.filesize	dw 0
   189                              <1> 	
   190 00000DA5 4E6F7720706C617969- <1> 	.playmsg	db 'Now playing: '
   190 00000DAE 6E673A20            <1>
   191 00000DB2 00<rep 20h>         <1> 	.playmsg2	times 32 db 0 
   192                              <1> 
   193 00000DD2 2F00                <1> 	.playmsgcct	db '/', 0
   194                              <1> 
   195                              <1> 	.song_delay		equ buffer + 2
   196                              <1> 	.song_delay_2	equ buffer2 + 2
   197                              <1> 	.track0			equ buffer + 3
   198                              <1> 	.track0_2		equ buffer2 + 3
   299                                  	%include "player/rad.asm"
     1                              <1> ; 2014-07-12: Ported to NASM by @fanzyflani. Also contains a player!
     2                              <1> ; Stick a filename in here if you insist (or %define it elsewhere)
     3                              <1> ; (50Hz and 18.2Hz modules are detected and the IRQ0 timer adjusted accordingly)
     4                              <1> ; Or %define RAD_NO_DEFAULT_PLAYER in your code.
     5                              <1> ;
     6                              <1> ; I make no copyright claims on any of my modifications to this code.
     7                              <1> ; (Also, the minimum CPU requirement is 80186, not 80286.)
     8                              <1> ;
     9                              <1> ; AND NOW WE RETURN TO YOUR REGULAR PROGRAMMING.
    10                              <1> 
    11                              <1> ;??????????????????????????????????????????????????????????????????????????????
    12                              <1> ;          �
    13                              <1> ;          . ???��?�  �??����  �?��  ???     ??? ?????�  ??  ??? �
    14                              <1> ;          : ???��?�  ???��   ???��?� ???     ???    �??� �?��??? :
    15                              <1> ;          ? ??? �??� ???     ???  ?? ???�    ???     ???     ??? |
    16                              <1> ;  � � �֎�? ���   ��� ������ ���  ��  ������ ���     ��� ������  ?�� � -���?
    17                              <1> ;  ? �?�� ??�� ??    ?? ??��   ���?� ??�� �?�� �?�� ??  ? �?��� ??�� :
    18                              <1> ;  | ??��? ??  ? ??    ?? ??��      ?? ??�� ??��? ??  � ??�� ??�   ??�� .
    19                              <1> ;  : ��  � ����   ���� �� ����       �� ��  � ��  �  ���  ��  �  ���� ��  � �
    20                              <1> ;                       Play-routine Code  version 1.1a
    21                              <1> ;
    22                              <1> ;                        by SHAYDE/REALITY Feb, Apr 95
    23                              <1> ;
    24                              <1> ;                                    - * -
    25                              <1> ;
    26                              <1> ; Feel free to use/hack this code about as much as you like.  In the good old
    27                              <1> ; dayz of Amiga, ALL tracker writers gave away player source-code so that the
    28                              <1> ; coder could do what he/she wanted with it.  On PC every tracker writer thinks
    29                              <1> ; their player code should be protected and they either don't release a player
    30                              <1> ; or they release it in .OBJ format which means if you need to make changes to
    31                              <1> ; the code to fit in with your demo/intro you're fucked!!!  So message to all
    32                              <1> ; tracker writers out there:
    33                              <1> ; FOR THE SAKE OF CODER SANITY, ALWAYS RELEASE PLAYER CODE FOR YOUR TRACKERS!!
    34                              <1> ; OTHERWISE WOT'S THE POINT OF WRITING A TRACKER?!?!??!?!  And release it in
    35                              <1> ; source-code form to reduce head-aches!
    36                              <1> ;
    37                              <1> ;				     - * -
    38                              <1> ;
    39                              <1> ; This source-code doesn't contain any segment directives so it is only
    40                              <1> ; INCLUDEable in other source-code.  Also it requires a minimum of a 286
    41                              <1> ; to run.  I avoided using ASSUMEs so that the code that INCLUDEs this code
    42                              <1> ; doesn't lose it's ASSUMEs, hence variables are accessed via CS:.  You can
    43                              <1> ; save a few bytes by dropping them (which you'll need to do if you want to
    44                              <1> ; use this player in protected-mode), although I use DS: to reference the
    45                              <1> ; tune segment.
    46                              <1> ;
    47                              <1> ;				     - * -
    48                              <1> ;
    49                              <1> ; Hey, 'scuse the ugliness of the listing.  I'm a coder, not an artist!
    50                              <1> ;
    51                              <1> ;				     - * -
    52                              <1> ;
    53                              <1> ; INSTRUCTIONS FOR USE:
    54                              <1> ;
    55                              <1> ;	To initialise the player, call "InitPlayer".
    56                              <1> ;	To stop play, call "EndPlayer".
    57                              <1> ;	To play music, call "PlayMusic" 50 times a second (18.2/sec for a
    58                              <1> ;					"slow-timer" tune).
    59                              <1> ;
    60                              <1> ;				     - * -
    61                              <1> ;
    62                              <1> ; BUG FIXES (Arrrrrghhhh!!! :-)
    63                              <1> ;
    64                              <1> ;   V1.1a Apr95:
    65                              <1> ;	Fuck!  Sorry dudez!  Real stupid bug.  You see, RAD itself plays the
    66                              <1> ;	note and then does the effect straight away.  But this 'ere source
    67                              <1> ;	code played the note then did the effect one beat later.  I didn't
    68                              <1> ;	notice it in testing cos it's marginal, but it fucks up the slides
    69                              <1> ;	slightly and with real complex slides (like in some of Void's latest
    70                              <1> ;	AWESOME tunez) it can stick out like elephant's balls!  I've now moved
    71                              <1> ;	the call to UpdateNotes to the end of the routine so it's executed
    72                              <1> ;	EVERY beat instead of every beat except note beats (make sense?  No?
    73                              <1> ;	GOOD! :-)
    74                              <1> ;
    75                              <1> ;??????????????????????????????????????????????????????????????????????????????
    76                              <1> 
    77                              <1> ; Tracker commands
    78                              <1> %define cmPortamentoUp		1		; Portamento up
    79                              <1> %define cmPortamentoDwn		2		; Portamento down
    80                              <1> %define cmToneSlide			3		; Tone Slide: xx is speed of slide
    81                              <1> %define cmToneVolSlide		5		; Tone slide of 00 + Vol. Slide
    82                              <1> %define cmVolSlide			10		; Volume Slide: <50 down, >50 up
    83                              <1> %define cmSetVol			12		; set volume
    84                              <1> %define cmJumpToLine		13		; Jump to line in next track
    85                              <1> %define cmSetSpeed			15		; set speed
    86                              <1> 
    87                              <1> %define FreqStart			156h		; low end of frequency in each octave
    88                              <1> %define FreqEnd				2aeh		; high end of frequency in each octave
    89                              <1> %define FreqRange			FreqEnd-FreqStart
    90                              <1> 
    91                              <1> start_rad:
    92 00000DD4 61                  <1> 	popa
    93                              <1> 	
    94 00000DD5 53                  <1> 	push bx
    95 00000DD6 89D8                <1> 	mov ax, bx
    96 00000DD8 B9[F015]            <1> 	mov cx, buffer
    97                              <1> 	
    98 00000DDB E8(2180)            <1> 	call os_load_file
    99                              <1> 	
   100 00000DDE E862F3              <1> 	call start.draw_player_background
   101                              <1> 	
   102 00000DE1 BE[330B]            <1> 	mov si, start_dro.playmsg1
   103 00000DE4 BB[D20E]            <1> 	mov bx, playmsg2
   104 00000DE7 E89FFA              <1> 	call create_player_box
   105                              <1> 	
   106 00000DEA BA210A              <1> 	mov dx, 0A21h
   107 00000DED E8(0680)            <1> 	call os_move_cursor
   108 00000DF0 5E                  <1> 	pop si
   109 00000DF1 E8(0380)            <1> 	call os_print_string
   110                              <1> 
   111 00000DF4 60                  <1> 	pusha
   112 00000DF5 1E                  <1> 	push ds
   113 00000DF6 06                  <1> 	push es
   114                              <1> 
   115                              <1> 	; Get segment
   116 00000DF7 B8[F015]            <1> 	mov ax, buffer
   117 00000DFA C1E804              <1> 	shr ax, 4
   118                              <1> 	
   119 00000DFD 8CCB                <1> 	mov bx, cs
   120 00000DFF 01D8                <1> 	add ax, bx
   121                              <1> 
   122 00000E01 8EC0                <1> 	mov es, ax
   123                              <1> 	
   124 00000E03 C606[D10E]00        <1> 	mov byte [toggleplaypause], 0
   125                              <1> 
   126                              <1> 	; Detect speed
   127 00000E08 B91C07              <1> 	mov cx, 1820
   128 00000E0B F606[0116]40        <1> 	test byte [buffer + 0x11], 0x40
   129 00000E10 7503                <1> 	jnz .is_slow
   130                              <1> 	
   131 00000E12 B99702              <1> 	mov cx, 663
   132                              <1> 	
   133                              <1> 	.is_slow:
   134 00000E15 890E[FA13]          <1> 	mov [timer_increment], cx
   135                              <1> 	
   136                              <1> 	; DISABLE INTERRUPTS
   137 00000E19 FA                  <1> 	cli
   138                              <1> 
   139                              <1> 	; Adjust timer
   140 00000E1A 8B0E[FA13]          <1> 	mov cx, [timer_increment]
   141 00000E1E BE[C40E]            <1> 	mov si, irq_handler
   142 00000E21 B309                <1> 	mov bl, 9
   143 00000E23 E8(D880)            <1> 	call os_start_adlib
   144                              <1> 
   145 00000E26 E8BD00              <1> 	call InitPlayer
   146 00000E29 0F828C00            <1> 	jc exit
   147                              <1> 
   148                              <1> 	; ENABLE INTERRUPTS
   149 00000E2D FB                  <1> 	sti
   150                              <1> 
   151                              <1> keypresswait:
   152 00000E2E F4                  <1> 	hlt
   153                              <1> 
   154 00000E2F 803E[E50E]01        <1> 	cmp byte [playrequest], 1
   155 00000E34 7508                <1> 	jne .no_play
   156                              <1> 
   157 00000E36 E84901              <1> 	call PlayMusic
   158 00000E39 C606[E50E]00        <1> 	mov byte [playrequest], 0
   159                              <1> 	
   160                              <1> .no_play:
   161                              <1> 	; Display the info
   162 00000E3E BA1B0C              <1> 	mov dx, 0C1Bh
   163 00000E41 E8(0680)            <1> 	call os_move_cursor
   164 00000E44 0FB606[EF13]        <1> 	movzx ax, byte [OrderPos]
   165 00000E49 FEC0                <1> 	inc al
   166                              <1> 
   167 00000E4B 83F80A              <1> 	cmp ax, 10
   168 00000E4E 7D03                <1> 	jge .no_space_1
   169                              <1> 	
   170 00000E50 E8(6980)            <1> 	call os_print_space
   171                              <1> 	
   172                              <1> .no_space_1:
   173 00000E53 E8(4D81)            <1> 	call os_print_int
   174 00000E56 BA1E0C              <1> 	mov dx, 0C1Eh
   175 00000E59 E8(0680)            <1> 	call os_move_cursor
   176 00000E5C 0FB606[EB13]        <1> 	movzx ax, byte [OrderSize]
   177                              <1> 
   178 00000E61 83F80A              <1> 	cmp ax, 10
   179 00000E64 7D03                <1> 	jge .no_space_2
   180                              <1> 	
   181 00000E66 E8(6980)            <1> 	call os_print_space
   182                              <1> 	
   183                              <1> .no_space_2:
   184 00000E69 E8(4D81)            <1> 	call os_print_int
   185 00000E6C BA270C              <1> 	mov dx, 0C27h
   186 00000E6F E8(0680)            <1> 	call os_move_cursor
   187 00000E72 A0[F513]            <1> 	mov al, [Line]
   188 00000E75 E8(7580)            <1> 	call os_print_2hex
   189                              <1> 
   190 00000E78 660FB6C0            <1> 	movzx eax, al
   191                              <1> 
   192 00000E7C 660FB60E[EF13]      <1> 	movzx ecx, byte [OrderPos]
   193 00000E82 66C1E106            <1> 	shl ecx, 6
   194 00000E86 6601C8              <1> 	add eax, ecx
   195                              <1> 	
   196 00000E89 660FB61E[EB13]      <1> 	movzx ebx, byte [OrderSize]
   197 00000E8F 66C1E306            <1> 	shl ebx, 6
   198                              <1> 	
   199 00000E93 E808FA              <1> 	call draw_progress_bar
   200                              <1> 	
   201                              <1> 	; Get the keys
   202 00000E96 E8(1580)            <1> 	call os_check_for_key
   203 00000E99 3C1B                <1> 	cmp al, 27
   204 00000E9B 741C                <1> 	je exit
   205 00000E9D 3C20                <1> 	cmp al, 32
   206 00000E9F 758D                <1> 	jne keypresswait
   207                              <1> 	
   208                              <1> 	; Toggle the pause flag
   209 00000EA1 8036[D10E]01        <1> 	xor byte [toggleplaypause], 1
   210                              <1> 	
   211 00000EA6 803E[D10E]00        <1> 	cmp byte [toggleplaypause], 0
   212 00000EAB 7406                <1> 	je .unmute
   213                              <1> 	
   214                              <1> .mute:
   215 00000EAD E8(1481)            <1> 	call os_adlib_mute
   216 00000EB0 E97BFF              <1> 	jmp keypresswait
   217                              <1> 	
   218                              <1> .unmute:
   219 00000EB3 E8(4181)            <1> 	call os_adlib_unmute
   220 00000EB6 E975FF              <1> 	jmp keypresswait
   221                              <1> 		
   222                              <1> exit:
   223                              <1> 	; Return!
   224 00000EB9 07                  <1> 	pop es
   225 00000EBA 1F                  <1> 	pop ds
   226 00000EBB 61                  <1> 	popa
   227                              <1> 
   228 00000EBC FA                  <1> 	cli
   229 00000EBD E8(0281)            <1> 	call os_stop_adlib	; Restore hook
   230 00000EC0 FB                  <1> 	sti
   231                              <1> 
   232 00000EC1 E93CF1              <1> 	jmp start
   233                              <1> 
   234                              <1> irq_handler:
   235 00000EC4 803E[D10E]01        <1> 	cmp byte [toggleplaypause], 1
   236 00000EC9 7405                <1> 	je .no_play
   237                              <1> 
   238 00000ECB C606[E50E]01        <1> 	mov byte [playrequest], 1
   239                              <1> 
   240                              <1> .no_play:
   241 00000ED0 CB                  <1> 	retf
   242                              <1> 
   243 00000ED1 00                  <1> 	toggleplaypause		db 0
   244 00000ED2 4F726465723A202020- <1> 	playmsg2			db 'Order:   /   Line:', 0
   244 00000EDB 2F2020204C696E653A- <1>
   244 00000EE4 00                  <1>
   245 00000EE5 00                  <1> 	playrequest			db 0
   246                              <1> 
   247                              <1> ;??????????????????????????????????????????????????????????????????????????????
   248                              <1> ; This routine initialises the player.
   249                              <1> ; IN:
   250                              <1> ;	ES:	- points to .RAD module to play
   251                              <1> ; OUT:
   252                              <1> ;	Carry	- set on error (such as invalid module)
   253                              <1> ;������������������������������������������������������������������������������
   254                              <1> InitPlayer:
   255 00000EE6 60                  <1> 		pusha
   256                              <1> 
   257                              <1> 	; initialise certain Adlib registers that aren't changed
   258 00000EE7 B82001              <1> 		mov	ax,0120h	; allow waveforms
   259 00000EEA E86104              <1> 		call	Adlib
   260 00000EED B80008              <1> 		mov	ax,0800h
   261 00000EF0 E85B04              <1> 		call	Adlib
   262 00000EF3 B4BD                <1> 		mov	ah,0bdh		; no drums, etc.
   263 00000EF5 E85604              <1> 		call	Adlib
   264                              <1> 
   265                              <1> 	; check to see if it is a RAD file first
   266 00000EF8 26813E00005241      <1> 		cmp	word [es:0],'RA'
   267 00000EFF 757E                <1> 		jnz	.err
   268 00000F01 26813E02004420      <1> 		cmp	word [es:2],'D '
   269 00000F08 7575                <1> 		jnz	.err
   270 00000F0A 26803E100010        <1> 		cmp	byte [es:16],10h		; correct version?
   271 00000F10 756D                <1> 		jnz	.err
   272                              <1> 
   273 00000F12 2E8C06[E713]        <1> 		mov	[cs:ModSeg],es		; keep the segment of module
   274                              <1> 
   275                              <1> 	; read initial speed
   276 00000F17 26A01100            <1> 		mov	al,[es:17]
   277 00000F1B 88C4                <1> 		mov	ah,al
   278 00000F1D 241F                <1> 		and	al,1fh
   279 00000F1F 2EA2[E913]          <1> 		mov	[cs:Speed],al
   280                              <1> 
   281                              <1> 	; see if there's a description to skip
   282 00000F23 BE1200              <1> 		mov	si,18
   283 00000F26 F6C480              <1> 		test	ah,80h			; description flag
   284 00000F29 740B                <1> 		jz	.lc			; no description
   285                              <1> 
   286 00000F2B 30C0                <1> 		xor	al,al
   287 00000F2D EB01                <1> 		jmp	.le
   288                              <1> 
   289 00000F2F 46                  <1> 	.ld:	inc	si
   290 00000F30 263804              <1> 	.le:	cmp	[es:si],al		; look for null-termination
   291 00000F33 75FA                <1> 		jnz	.ld
   292 00000F35 46                  <1> 		inc	si			; move past null
   293                              <1> 
   294                              <1> 	; create table of instrument pointers
   295 00000F36 31DB                <1> 	.lc:	xor	bx,bx
   296                              <1> 
   297 00000F38 268A1C              <1> 	.la:	mov	bl,[es:si]		; instrument no.
   298 00000F3B 46                  <1> 		inc	si
   299 00000F3C 01DB                <1> 		add	bx,bx
   300 00000F3E 740A                <1> 		jz	.lb			; no more instruments
   301                              <1> 
   302 00000F40 2E89B7[5613]        <1> 		mov	[cs:InstPtrs-2+bx],si	; record pointer to instrument
   303 00000F45 83C60B              <1> 		add	si,11
   304 00000F48 EBEE                <1> 		jmp	.la
   305                              <1> 
   306                              <1> 	; record offset of order list
   307 00000F4A 31C0                <1> 	.lb:	xor	ax,ax
   308 00000F4C 268A04              <1> 		mov	al,[es:si]		; no. of orders in order-list
   309 00000F4F 2EA3[EB13]          <1> 		mov	[cs:OrderSize],ax
   310 00000F53 46                  <1> 		inc	si
   311 00000F54 2E8936[ED13]        <1> 		mov	[cs:OrderList],si
   312 00000F59 31DB                <1> 		xor	bx,bx
   313 00000F5B 268A1C              <1> 		mov	bl,[es:si]		; first pattern to play
   314 00000F5E 01DB                <1> 		add	bx,bx
   315 00000F60 01C6                <1> 		add	si,ax			; move to end of list
   316                              <1> 
   317                              <1> 	; record table of pattern offsets
   318 00000F62 2E8936[F113]        <1> 		mov	[cs:PatternList],si
   319 00000F67 268B00              <1> 		mov	ax,[es:si+bx]		; first pattern offset
   320 00000F6A 2EA3[F313]          <1> 		mov	[cs:PatternPos],ax	; pointer to first pattern
   321                              <1> 
   322                              <1> 	; initial pointers
   323 00000F6E 31C0                <1> 		xor	ax,ax
   324 00000F70 2EA3[EF13]          <1> 		mov	[cs:OrderPos],ax		; start at position 0.
   325 00000F74 2EA2[EA13]          <1> 		mov	[cs:SpeedCnt],al
   326 00000F78 2EA2[F513]          <1> 		mov	[cs:Line],al		; start at line 0
   327                              <1> 
   328 00000F7C F8                  <1> 		clc
   329 00000F7D EB01                <1> 		jmp	.lx			; successful initialisation
   330                              <1> 
   331 00000F7F F9                  <1> 	.err:	stc
   332 00000F80 61                  <1> 	.lx:	popa
   333 00000F81 C3                  <1> 		ret
   334                              <1> 
   335                              <1> ;??????????????????????????????????????????????????????????????????????????????
   336                              <1> ; This routine does the actual playing.  It MUST be called 50 times a second
   337                              <1> ; to maintain accurate music playback.  Refer to accompanying timer source-code
   338                              <1> ; for ways of providing a 50/sec timer service.
   339                              <1> ;������������������������������������������������������������������������������
   340 00000F82 60                  <1> PlayMusic:	pusha
   341 00000F83 1E                  <1> 		push	ds
   342                              <1> 
   343 00000F84 2E8E1E[E713]        <1> 		mov	ds,[cs:ModSeg]	; segment of module
   344                              <1> 
   345 00000F89 2E803E[EA13]00      <1> 		cmp	byte [cs:SpeedCnt],0
   346 00000F8F 7407                <1> 		jz	.la		; play a line of music
   347 00000F91 2EFE0E[EA13]        <1> 		dec	byte [cs:SpeedCnt]
   348 00000F96 EB7C                <1> 		jmp	.lx		; no new line, so just update effects
   349                              <1> 
   350                              <1> 	; switch off any effects that are in operation
   351 00000F98 BE0800              <1> 	.la:	mov	si,8
   352 00000F9B 30C0                <1> 		xor	al,al
   353                              <1> 
   354 00000F9D 2E8884[D513]        <1> 	.laa:	mov	[cs:PortSlide+si],al	; reset any slides
   355 00000FA2 2E8884[DE13]        <1> 		mov	[cs:VolSlide+si],al	; reset any slides
   356 00000FA7 2E8884[CC13]        <1> 		mov	[cs:ToneSlide+si],al	; reset any slides
   357 00000FAC 4E                  <1> 		dec	si
   358 00000FAD 79EE                <1> 		jns	.laa
   359                              <1> 
   360                              <1> 	; playing a new line, PatternPos should have been set-up already
   361 00000FAF 2E8B36[F313]        <1> 		mov	si,[cs:PatternPos]
   362 00000FB4 09F6                <1> 		or	si,si
   363 00000FB6 743C                <1> 		jz	.lb		; rest of this pattern is blank
   364                              <1> 
   365 00000FB8 8A04                <1> 		mov	al,[si]		; line indicator
   366 00000FBA 247F                <1> 		and	al,7fh		; eliminate bit 7
   367 00000FBC 2E3A06[F513]        <1> 		cmp	al,[cs:Line]	; is this current line?
   368 00000FC1 7531                <1> 		jnz	.lb		; haven't reached it yet
   369                              <1> 
   370 00000FC3 F60480              <1> 		test	byte [si],80h	; last line?
   371 00000FC6 7407                <1> 		jz	.lc		; no, still more to check
   372 00000FC8 2EC706[F313]0000    <1> 		mov	word [cs:PatternPos],0	; mark rest of pattern as blank
   373                              <1> 
   374 00000FCF 46                  <1> 	.lc:	inc	si		; move to first channel
   375                              <1> 
   376                              <1> 	; play channels
   377 00000FD0 8A0C                <1> 	.lf:	mov	cl,[si]		; channel we are processing
   378 00000FD2 51                  <1> 		push	cx
   379 00000FD3 80E17F              <1> 		and	cl,7fh		; get rid of bit 7
   380 00000FD6 8B4401              <1> 		mov	ax,[1+si]	; AL=octave/note, AH=inst/command
   381 00000FD9 83C603              <1> 		add	si,3
   382                              <1> 
   383 00000FDC F6C40F              <1> 		test	ah,15		; if there's a cmd, there'll be a param.
   384 00000FDF 7403                <1> 		jz	.le		; no parameter byte
   385 00000FE1 8A2C                <1> 		mov	ch,[si]		; read parameter
   386 00000FE3 46                  <1> 		inc	si
   387                              <1> 
   388 00000FE4 E8A900              <1> 	.le:	call	PlayNote	; play the note
   389                              <1> 
   390 00000FE7 59                  <1> 		pop	cx
   391 00000FE8 7230                <1> 		jc	.lg		; skip rest of line, AX has new line
   392                              <1> 
   393 00000FEA F6C180              <1> 		test	cl,80h		; last channel to play?
   394 00000FED 74E1                <1> 		jz	.lf		; not yet
   395                              <1> 
   396 00000FEF 2E8936[F313]        <1> 		mov	[cs:PatternPos],si; keep position in crunched track
   397                              <1> 
   398                              <1> 	; update pointers
   399 00000FF4 2EA0[E913]          <1> 	.lb:	mov	al,[cs:Speed]	; needs to be set AFTER note playing
   400 00000FF8 FEC8                <1> 		dec	al
   401 00000FFA 2EA2[EA13]          <1> 		mov	[cs:SpeedCnt],al	;    for new speeds to take effect!
   402                              <1> 
   403 00000FFE 2EFE06[F513]        <1> 		inc	byte [cs:Line]
   404 00001003 2E803E[F513]40      <1> 		cmp	byte [cs:Line],64	; end of pattern?
   405 00001009 7209                <1> 		jb	.lx		; nope
   406                              <1> 
   407 0000100B 2EC606[F513]00      <1> 		mov	byte [cs:Line],0	; top of next pattern
   408 00001011 E84600              <1> 		call	NextPattern
   409                              <1> 
   410                              <1> 	; now update effects (effect is acted upon straight away)
   411 00001014 E8BA01              <1> 	.lx:	call	UpdateNotes
   412                              <1> 
   413 00001017 1F                  <1> 		pop	ds
   414 00001018 61                  <1> 		popa
   415 00001019 C3                  <1> 		ret
   416                              <1> ;������������������������������������������������������������������������������
   417                              <1> 	; jump to line AX
   418 0000101A 2E8A1E[E913]        <1> 	.lg:	mov	bl,[cs:Speed]	; needs to be set AFTER note playing
   419 0000101F 2E881E[EA13]        <1> 		mov	[cs:SpeedCnt],bl	;    for new speeds to take effect!
   420                              <1> 
   421 00001024 2EA2[F513]          <1> 		mov	[cs:Line],al
   422                              <1> 
   423                              <1> 		; find start of next pattern
   424 00001028 E82F00              <1> 		call	NextPattern
   425 0000102B 74E7                <1> 		jz	.lx		; there isn't any data in next pattern
   426                              <1> 
   427                              <1> 		; find line that is greater or equal to the current line
   428 0000102D 8A0C                <1> 	.ll:	mov	cl,[si]		; line id.
   429 0000102F 80E17F              <1> 		and	cl,7fh		; ignore bit 7
   430 00001032 38C1                <1> 		cmp	cl,al
   431 00001034 731D                <1> 		jae	.lh		; found line
   432                              <1> 
   433 00001036 F60480              <1> 		test	byte [si],80h
   434 00001039 7404                <1> 		jz	.li		; not last line
   435 0000103B 31F6                <1> 		xor	si,si
   436 0000103D EB14                <1> 		jmp	.lh		; ignore rest of pattern as it's last
   437                              <1> 
   438                              <1> 		; skip to next line definition
   439 0000103F 46                  <1> 	.li:	inc	si
   440 00001040 8A0C                <1> 	.lj:	mov	cl,[si]
   441 00001042 83C603              <1> 		add	si,3
   442 00001045 2EF644FF0F          <1> 		test	byte [cs:si-1],15	; is there a valid command?
   443 0000104A 7401                <1> 		jz	.lk
   444 0000104C 46                  <1> 		inc	si		; skip parameter
   445                              <1> 
   446 0000104D 00C9                <1> 	.lk:	add	cl,cl
   447 0000104F 73EF                <1> 		jnc	.lj		; wasn't last channel spec.
   448 00001051 EBDA                <1> 		jmp	.ll		; check next line
   449                              <1> 
   450 00001053 2E8936[F313]        <1> 	.lh:	mov	[cs:PatternPos],si
   451 00001058 EBBA                <1> 		jmp	.lx
   452                              <1> 
   453                              <1> 
   454                              <1> 
   455                              <1> 
   456                              <1> 
   457                              <1> ;??????????????????????????????????????????????????????????????????????????????
   458                              <1> ; Advances pointers to next pattern in order list.
   459                              <1> ;������������������������������������������������������������������������������
   460 0000105A 2E8B1E[EF13]        <1> NextPattern:	mov	bx,[cs:OrderPos]
   461 0000105F 43                  <1> 		inc	bx
   462 00001060 2E3B1E[EB13]        <1> 		cmp	bx,[cs:OrderSize]
   463 00001065 7202                <1> 		jb	.ld
   464 00001067 31DB                <1> 		xor	bx,bx		; end of tune, move back to start
   465                              <1> 
   466 00001069 2E891E[EF13]        <1> 	.ld:	mov	[cs:OrderPos],bx
   467 0000106E 2E8B36[ED13]        <1> 		mov	si,[cs:OrderList]
   468 00001073 8A18                <1> 		mov	bl,[si+bx]	; no. of next pattern
   469                              <1> 
   470 00001075 F6C380              <1> 		test	bl,80h
   471 00001078 7405                <1> 		jz	.lda
   472 0000107A 80E37F              <1> 		and	bl,7fh
   473 0000107D EBEA                <1> 		jmp	.ld		; bit 7 = jump to new order
   474                              <1> 
   475 0000107F 2E8B36[F113]        <1> 	.lda:	mov	si,[cs:PatternList]
   476 00001084 01DB                <1> 		add	bx,bx
   477 00001086 8B30                <1> 		mov	si,[si+bx]	; offset of next pattern
   478 00001088 2E8936[F313]        <1> 		mov	[cs:PatternPos],si
   479 0000108D 09F6                <1> 		or	si,si
   480 0000108F C3                  <1> 		ret
   481                              <1> 
   482                              <1> 
   483                              <1> 
   484                              <1> 
   485                              <1> 
   486                              <1> ;??????????????????????????????????????????????????????????????????????????????
   487                              <1> ; Plays a note on a channel.
   488                              <1> ; IN:
   489                              <1> ;	AL	- Octave (high nibble), Note (low nibble)
   490                              <1> ;	AH	- instrument (high nibble), command (low nibble)
   491                              <1> ;	CL	- channel to play note on (0..8)
   492                              <1> ;	CH	- parameter byte if command is non-zero
   493                              <1> ; OUT:
   494                              <1> ;	CARRY	- set if a line is to be jumped to
   495                              <1> ;	AX	- line to jump to if CARRY set
   496                              <1> ; Note: don't use SI or segment regs., otherwise registers do not need saving.
   497                              <1> ;������������������������������������������������������������������������������
   498 00001090 89CF                <1> PlayNote:	mov	di,cx
   499 00001092 83E70F              <1> 		and	di,15
   500 00001095 88E6                <1> 		mov	dh,ah
   501 00001097 80E60F              <1> 		and	dh,15		; command
   502                              <1> 
   503 0000109A 08C0                <1> 		or	al,al
   504 0000109C 0F849800            <1> 		jz	.lb		; no note playing, process command
   505                              <1> 
   506                              <1> 	; check to see if we are actually performing a tone slide
   507 000010A0 80FE03              <1> 		cmp	dh,cmToneSlide
   508 000010A3 753C                <1> 		jnz	.lt		; nope, play note
   509                              <1> 
   510                              <1> 		; note/octave are used as parameters then (instrument ignored)
   511 000010A5 89C3                <1> 		mov	bx,ax
   512 000010A7 83E30F              <1> 		and	bx,15		; note
   513 000010AA C0E804              <1> 		shr	al,4
   514 000010AD 83E007              <1> 		and	ax,7		; octave
   515 000010B0 4B                  <1> 		dec	bx		; we want 1..12
   516 000010B1 83FB0C              <1> 		cmp	bx,12
   517 000010B4 0F838B00            <1> 		jae	.lx		; not a valid note (probably KEY-OFF)
   518                              <1> 
   519 000010B8 69C05801            <1> 		imul	ax,FreqRange	; scale octave
   520 000010BC 01DB                <1> 		add	bx,bx
   521 000010BE 2E0387[B911]        <1> 		add	ax,[cs:NoteFreq+bx]	; add frequency of this note
   522 000010C3 2D5601              <1> 		sub	ax,FreqStart	; so range starts from zero
   523 000010C6 2E8885[BA13]        <1> 		mov	[cs:ToneSlideFreqL+di],al	; destination frequency
   524 000010CB 2E88A5[C313]        <1> 		mov	[cs:ToneSlideFreqH+di],ah
   525                              <1> 
   526                              <1> 		; set tone slide speed
   527 000010D0 2EC685[CC13]01      <1> 		mov	byte [cs:ToneSlide+di],1	; switch tone slide on
   528 000010D6 08ED                <1> 		or	ch,ch
   529 000010D8 7469                <1> 		jz	.lx		; use last speed setting
   530 000010DA 2E88AD[B113]        <1> 		mov	[cs:ToneSlideSpeed+di],ch
   531 000010DF EB62                <1> 		jmp	.lx
   532                              <1> 
   533                              <1> 	; KEY-OFF the previous note
   534 000010E1 50                  <1> 	.lt:	push	ax
   535 000010E2 2E8A85[A813]        <1> 		mov	al,[cs:OldB0+di]	; old register value
   536 000010E7 24DF                <1> 		and	al, ~ 20h	; clear KEY-ON bit
   537 000010E9 2E8885[A813]        <1> 		mov	[cs:OldB0+di],al	; so slides after KEYOFF work correctly
   538 000010EE 88CC                <1> 		mov	ah,cl
   539 000010F0 80C4B0              <1> 		add	ah,0b0h
   540 000010F3 E85802              <1> 		call	Adlib
   541 000010F6 58                  <1> 		pop	ax
   542                              <1> 
   543                              <1> 	; load instrument (if any)
   544 000010F7 88E2                <1> 		mov	dl,ah
   545 000010F9 00C0                <1> 		add	al,al
   546 000010FB D0DA                <1> 		rcr	dl,1
   547 000010FD C0EA03              <1> 		shr	dl,3		; instrument no.
   548 00001100 7403                <1> 		jz	.la		; no instrument to load
   549 00001102 E8B501              <1> 		call	LoadInst
   550                              <1> 
   551                              <1> 	; load note into channel
   552 00001105 88C3                <1> 	.la:	mov	bl,al
   553 00001107 83E31E              <1> 		and	bx,15*2		; note * 2
   554 0000110A 83FB1E              <1> 		cmp	bx,15*2
   555 0000110D 7429                <1> 		jz	.lb		; just a KEY-OFF so we're done
   556                              <1> 
   557 0000110F 2E8B9F[B711]        <1> 		mov	bx,[cs:NoteFreq-2+bx]	; frequency of note (BX-1)
   558 00001114 C0E803              <1> 		shr	al,3		; octave
   559 00001117 241C                <1> 		and	al,7*4
   560 00001119 0C20                <1> 		or	al,20h		; KEY-ON
   561 0000111B 08F8                <1> 		or	al,bh		; Frequency high byte
   562 0000111D B4B0                <1> 		mov	ah,0b0h
   563 0000111F 00CC                <1> 		add	ah,cl
   564 00001121 2E8885[A813]        <1> 		mov	[cs:OldB0+di],al	; record the register value
   565 00001126 50                  <1> 		push	ax
   566                              <1> 
   567 00001127 80EC10              <1> 		sub	ah,10h
   568 0000112A 88D8                <1> 		mov	al,bl		; Frequency low byte
   569 0000112C 2E8885[9F13]        <1> 		mov	[cs:OldA0+di],al
   570 00001131 E81A02              <1> 		call	Adlib
   571                              <1> 
   572 00001134 58                  <1> 		pop	ax
   573 00001135 E81602              <1> 		call	Adlib
   574                              <1> 
   575                              <1> 	; process command (if any), DH has command, CH has parameter
   576 00001138 31DB                <1> 	.lb:	xor	bx,bx
   577 0000113A 88F3                <1> 		mov	bl,dh		; command
   578 0000113C 01DB                <1> 		add	bx,bx
   579 0000113E 2EFFA7[9911]        <1> 		jmp	[cs:.Effects+bx]
   580                              <1> 
   581 00001143 F8                  <1> 	.lx:	clc
   582 00001144 C3                  <1> 	.lxx:	ret
   583                              <1> ;������������������������������������������������������������������������������
   584                              <1> ; Portamento up
   585 00001145 2E88AD[D513]        <1> .PortUp:	mov	[cs:PortSlide+di],ch
   586 0000114A EBF7                <1> 		jmp	.lx
   587                              <1> ;������������������������������������������������������������������������������
   588                              <1> ; Portamento down
   589 0000114C F6DD                <1> .PortDown:	neg	ch
   590 0000114E 2E88AD[D513]        <1> 		mov	[cs:PortSlide+di],ch
   591 00001153 EBEE                <1> 		jmp	.lx
   592                              <1> ;������������������������������������������������������������������������������
   593                              <1> ; Tone slide to note (no note supplied)
   594 00001155 08ED                <1> .ToneSlide:	or	ch,ch		; parameter has speed of tone slide
   595 00001157 7405                <1> 		jz	.lja		; keep last tone slide speed
   596 00001159 2E88AD[B113]        <1> 		mov	[cs:ToneSlideSpeed+di],ch
   597                              <1> 
   598 0000115E 2EC685[CC13]01      <1> 	.lja:	mov	byte [cs:ToneSlide+di],1	; tone slide on
   599 00001164 EBDD                <1> 		jmp	.lx
   600                              <1> ;������������������������������������������������������������������������������
   601                              <1> ; Volume slide & Volume + Tone Slide
   602                              <1> .ToneVolSlide:
   603 00001166 80FD32              <1> .VolSlide:	cmp	ch,50		; <50 = slide down, >50 = slide up
   604 00001169 7205                <1> 		jb	.lga
   605 0000116B 80ED32              <1> 		sub	ch,50
   606 0000116E F6DD                <1> 		neg	ch
   607                              <1> 
   608 00001170 2E88AD[DE13]        <1> 	.lga:	mov	[cs:VolSlide+di],ch
   609                              <1> 
   610 00001175 80FE05              <1> 		cmp	dh,cmToneVolSlide	; just plain volume slide
   611 00001178 75C9                <1> 		jnz	.lx
   612 0000117A 2EC685[CC13]01      <1> 		mov	byte [cs:ToneSlide+di],1	; tone slide on
   613 00001180 EBC1                <1> 		jmp	.lx
   614                              <1> ;������������������������������������������������������������������������������
   615                              <1> ; Set volume
   616 00001182 E89D01              <1> .SetVolume:	call	SetVolume	; CH has volume, CL has channel
   617 00001185 EBBC                <1> 		jmp	.lx
   618                              <1> ;������������������������������������������������������������������������������
   619                              <1> ; jump to line in next pattern
   620 00001187 80FD40              <1> .JumpToLine:	cmp	ch,64
   621 0000118A 73B7                <1> 		jae	.lx		; ignore as it is invalid
   622 0000118C 31C0                <1> 		xor	ax,ax
   623 0000118E 88E8                <1> 		mov	al,ch
   624 00001190 F9                  <1> 		stc
   625 00001191 C3                  <1> 		ret			; skip rest of channels
   626                              <1> ;������������������������������������������������������������������������������
   627                              <1> ; Set speed
   628 00001192 2E882E[E913]        <1> .SetSpeed:	mov	[cs:Speed],ch
   629 00001197 EBAA                <1> 		jmp	.lx
   630                              <1> ;������������������������������������������������������������������������������
   631 00001199 [4311]              <1> .Effects	dw	.lx
   632 0000119B [4511]              <1> 		dw	.PortUp
   633 0000119D [4C11]              <1> 		dw	.PortDown
   634 0000119F [5511]              <1> 		dw	.ToneSlide
   635 000011A1 [4311]              <1> 		dw	.lx
   636 000011A3 [6611]              <1> 		dw	.ToneVolSlide
   637 000011A5 [4311]              <1> 		dw	.lx
   638 000011A7 [4311]              <1> 		dw	.lx
   639 000011A9 [4311]              <1> 		dw	.lx
   640 000011AB [4311]              <1> 		dw	.lx
   641 000011AD [6611]              <1> 		dw	.VolSlide
   642 000011AF [4311]              <1> 		dw	.lx
   643 000011B1 [8211]              <1> 		dw	.SetVolume
   644 000011B3 [8711]              <1> 		dw	.JumpToLine
   645 000011B5 [4311]              <1> 		dw	.lx
   646 000011B7 [9211]              <1> 		dw	.SetSpeed
   647                              <1> 
   648 000011B9 6B0181019801B001CA- <1> NoteFreq	dw	16bh,181h,198h,1b0h,1cah,1e5h	; 156h = C
   648 000011C2 01E501              <1>
   649 000011C5 020220024102630287- <1> 		dw	202h,220h,241h,263h,287h,2aeh
   649 000011CE 02AE02              <1>
   650                              <1> 
   651                              <1> 
   652                              <1> 
   653                              <1> 
   654                              <1> 
   655                              <1> ;??????????????????????????????????????????????????????????????????????????????
   656                              <1> ; Check each channel for ongoing effects to update.
   657                              <1> ;������������������������������������������������������������������������������
   658 000011D1 30FF                <1> UpdateNotes:	xor	bh,bh		; channel index
   659 000011D3 31F6                <1> 		xor	si,si
   660                              <1> 
   661                              <1> 	; process portamentos
   662 000011D5 2E8A9C[D513]        <1> 	.la:	mov	bl,[cs:PortSlide+si]
   663 000011DA 08DB                <1> 		or	bl,bl
   664 000011DC 740D                <1> 		jz	.lb		; no slide for this channel
   665 000011DE E88100              <1> 		call	GetFreq
   666 000011E1 88DD                <1> 		mov	ch,bl
   667 000011E3 C1F908              <1> 		sar	cx,8		; sign extend 8bit->16bit
   668 000011E6 01C8                <1> 		add	ax,cx
   669 000011E8 E89B00              <1> 		call	SetFreq
   670                              <1> 
   671                              <1> 	; process volume slides
   672 000011EB 2E8AAC[DE13]        <1> 	.lb:	mov	ch,[cs:VolSlide+si]
   673 000011F0 2E8A8C[9613]        <1> 		mov	cl,[cs:Old43+si]	; contains current volume
   674 000011F5 80E13F              <1> 		and	cl,3fh
   675 000011F8 80F13F              <1> 		xor	cl,3fh
   676 000011FB 08ED                <1> 		or	ch,ch
   677 000011FD 741A                <1> 		jz	.lc
   678 000011FF 790B                <1> 		jns	.lba
   679                              <1> 
   680                              <1> 		; slide volume up
   681 00001201 28E9                <1> 		sub	cl,ch
   682 00001203 80F940              <1> 		cmp	cl,64
   683 00001206 720A                <1> 		jb	.lbb
   684 00001208 B13F                <1> 		mov	cl,63
   685 0000120A EB06                <1> 		jmp	.lbb
   686                              <1> 
   687                              <1> 		; slide volume down
   688 0000120C 28E9                <1> 	.lba:	sub	cl,ch
   689 0000120E 7902                <1> 		jns	.lbb
   690 00001210 30C9                <1> 		xor	cl,cl
   691                              <1> 
   692 00001212 88CD                <1> 	.lbb:	mov	ch,cl
   693 00001214 88F9                <1> 		mov	cl,bh		; channel to set
   694 00001216 E80901              <1> 		call	SetVolume
   695                              <1> 
   696                              <1> 	; process tone slides
   697 00001219 2E80BC[CC13]00      <1> 	.lc:	cmp	byte [cs:ToneSlide+si],0
   698 0000121F 7436                <1> 		jz	.lx		; no tone slide
   699 00001221 2E8A9C[B113]        <1> 		mov	bl,[cs:ToneSlideSpeed+si]	; shouldn't get wiped uc
   700                              <1> 
   701                              <1> 		; get current absolute frequency
   702 00001226 E83900              <1> 		call	GetFreq
   703                              <1> 
   704                              <1> 		; sign extend speed/direction
   705 00001229 88DE                <1> 		mov	dh,bl
   706 0000122B C1FA08              <1> 		sar	dx,8
   707                              <1> 
   708                              <1> 		; get destination frequency
   709 0000122E 2E8A8C[BA13]        <1> 		mov	cl,[cs:ToneSlideFreqL+si]
   710 00001233 2E8AAC[C313]        <1> 		mov	ch,[cs:ToneSlideFreqH+si]
   711 00001238 39C8                <1> 		cmp	ax,cx
   712 0000123A 7410                <1> 		jz	.le		; already at destination?!
   713 0000123C 7708                <1> 		ja	.ld		; tone slide down (source > dest)
   714                              <1> 
   715                              <1> 		; doing a tone slide up
   716 0000123E 01D0                <1> 		add	ax,dx
   717 00001240 39C8                <1> 		cmp	ax,cx
   718 00001242 7210                <1> 		jb	.lg		; still under destination
   719 00001244 EB06                <1> 		jmp	.le		; reached destination
   720                              <1> 
   721                              <1> 		; doing a tone slide down
   722 00001246 29D0                <1> 	.ld:	sub	ax,dx
   723 00001248 39C8                <1> 		cmp	ax,cx
   724 0000124A 7708                <1> 		ja	.lg		; still over destination
   725                              <1> 
   726                              <1> 		; reached destination so stop tone slide
   727 0000124C 89C8                <1> 	.le:	mov	ax,cx		; clip it onto destination
   728 0000124E 2EC684[CC13]00      <1> 		mov	byte [cs:ToneSlide+si],0	; disables tone slide
   729                              <1> 
   730                              <1> 		; write new frequency back to channel
   731 00001254 E82F00              <1> 	.lg:	call	SetFreq
   732                              <1> 
   733 00001257 FEC7                <1> 	.lx:	inc	bh
   734 00001259 46                  <1> 		inc	si
   735 0000125A 83FE09              <1> 		cmp	si,9
   736 0000125D 0F8274FF            <1> 		jb	.la
   737 00001261 C3                  <1> 		ret
   738                              <1> 
   739                              <1> 
   740                              <1> 
   741                              <1> 
   742                              <1> 
   743                              <1> ;??????????????????????????????????????????????????????????????????????????????
   744                              <1> ; Returns the current absolute frequency of channel
   745                              <1> ; IN:
   746                              <1> ;	SI	- channel
   747                              <1> ; OUT:
   748                              <1> ;	AX	- frequency
   749                              <1> ; USES:
   750                              <1> ;	CX, DX
   751                              <1> ;������������������������������������������������������������������������������
   752 00001262 2E8A8C[9F13]        <1> GetFreq:	mov	cl,[cs:OldA0+si]
   753 00001267 2E8AAC[A813]        <1> 		mov	ch,[cs:OldB0+si]
   754 0000126C 80E503              <1> 		and	ch,3		; mask to get high frequency
   755 0000126F 81E95601            <1> 		sub	cx,FreqStart
   756 00001273 2E8A84[A813]        <1> 		mov	al,[cs:OldB0+si]
   757 00001278 C0E802              <1> 		shr	al,2
   758 0000127B 83E007              <1> 		and	ax,7		; mask to get octave
   759 0000127E BA5801              <1> 		mov	dx,FreqRange
   760 00001281 F7E2                <1> 		mul	dx
   761 00001283 01C8                <1> 		add	ax,cx
   762 00001285 C3                  <1> 		ret
   763                              <1> 
   764                              <1> 
   765                              <1> 
   766                              <1> 
   767                              <1> 
   768                              <1> ;??????????????????????????????????????????????????????????????????????????????
   769                              <1> ; Sets the channel's frequency
   770                              <1> ; IN:
   771                              <1> ;	AX	- absolute frequency
   772                              <1> ;	SI	- channel
   773                              <1> ; USES:
   774                              <1> ;	CX, DX
   775                              <1> ;������������������������������������������������������������������������������
   776 00001286 B95801              <1> SetFreq:	mov	cx,FreqRange
   777 00001289 31D2                <1> 		xor	dx,dx
   778 0000128B F7F1                <1> 		div	cx		; extracts octave in AX and freq. in DX
   779 0000128D 81C25601            <1> 		add	dx,FreqStart
   780                              <1> 
   781 00001291 2E8AA4[A813]        <1> 		mov	ah,[cs:OldB0+si]
   782 00001296 80E4E0              <1> 		and	ah,11100000b	; keep old toggles
   783 00001299 C0E002              <1> 		shl	al,2		; move octave to correct bit position
   784 0000129C 08E0                <1> 		or	al,ah		; insert octave
   785 0000129E 08F0                <1> 		or	al,dh		; insert high frequency
   786 000012A0 88FC                <1> 		mov	ah,bh
   787 000012A2 80C4B0              <1> 		add	ah,0b0h
   788 000012A5 2E8884[A813]        <1> 		mov	[cs:OldB0+si],al
   789 000012AA E8A100              <1> 		call	Adlib
   790                              <1> 
   791 000012AD 80EC10              <1> 		sub	ah,10h
   792 000012B0 88D0                <1> 		mov	al,dl		; low frequency
   793 000012B2 2E8884[9F13]        <1> 		mov	[cs:OldA0+si],al
   794 000012B7 E99400              <1> 		jmp	Adlib
   795                              <1> 
   796                              <1> 
   797                              <1> 
   798                              <1> 
   799                              <1> 
   800                              <1> ;??????????????????????????????????????????????????????????????????????????????
   801                              <1> ; Load in instrument data into a given channel.
   802                              <1> ; IN:
   803                              <1> ;	CL	- channel to load instrument into (0..8)
   804                              <1> ;	DL	- instrument no. (1..31)
   805                              <1> ;������������������������������������������������������������������������������
   806 000012BA 50                  <1> LoadInst:	push	ax
   807 000012BB 53                  <1> 		push	bx
   808 000012BC 56                  <1> 		push	si
   809                              <1> 
   810 000012BD 89CE                <1> 		mov	si,cx
   811 000012BF 81E6FF00            <1> 		and	si,0ffh
   812 000012C3 2E8AA4[1913]        <1> 		mov	ah,[cs:ChannelOffs+si]	; Adlib register offsets
   813                              <1> 
   814 000012C8 31DB                <1> 		xor	bx,bx
   815 000012CA 88D3                <1> 		mov	bl,dl
   816 000012CC 4B                  <1> 		dec	bx
   817 000012CD 01DB                <1> 		add	bx,bx
   818 000012CF 2E8B9F[5813]        <1> 		mov	bx,[cs:InstPtrs+bx]	; get instrument offset
   819 000012D4 09DB                <1> 		or	bx,bx
   820 000012D6 743D                <1> 		jz	.lx		; no instrument data ?!
   821                              <1> 
   822 000012D8 8A4702              <1> 		mov	al,[2+bx]
   823 000012DB 2E8884[9613]        <1> 		mov	[cs:Old43+si],al	; old 43.. value
   824                              <1> 
   825 000012E0 B204                <1> 		mov	dl,4
   826                              <1> 
   827 000012E2 8A4701              <1> 	.la:	mov	al,[1+bx]
   828 000012E5 E86600              <1> 		call	Adlib		; load carrier
   829 000012E8 80C403              <1> 		add	ah,3
   830 000012EB 8A07                <1> 		mov	al,[bx]
   831 000012ED E85E00              <1> 		call	Adlib		; load modulator
   832 000012F0 83C302              <1> 		add	bx,2
   833                              <1> 
   834 000012F3 80C41D              <1> 		add	ah,20h-3
   835 000012F6 FECA                <1> 		dec	dl
   836 000012F8 75E8                <1> 		jnz	.la
   837                              <1> 
   838 000012FA 80C440              <1> 		add	ah,40h		; do E0 range now
   839 000012FD 8A4702              <1> 		mov	al,[2+bx]
   840 00001300 E84B00              <1> 		call	Adlib
   841 00001303 80C403              <1> 		add	ah,3
   842 00001306 8A4701              <1> 		mov	al,[1+bx]
   843 00001309 E84200              <1> 		call	Adlib
   844                              <1> 
   845 0000130C B4C0                <1> 		mov	ah,0c0h
   846 0000130E 00CC                <1> 		add	ah,cl
   847 00001310 8A07                <1> 		mov	al,[bx]
   848 00001312 E83900              <1> 		call	Adlib
   849                              <1> 
   850 00001315 5E                  <1> 	.lx:	pop	si
   851 00001316 5B                  <1> 		pop	bx
   852 00001317 58                  <1> 		pop	ax
   853 00001318 C3                  <1> 		ret
   854                              <1> 
   855 00001319 20212228292A303132  <1> ChannelOffs	db	20h,21h,22h,28h,29h,2ah,30h,31h,32h
   856                              <1> 
   857                              <1> 
   858                              <1> 
   859                              <1> 
   860                              <1> 
   861                              <1> ;??????????????????????????????????????????????????????????????????????????????
   862                              <1> ; Outputs a value to an ADLIB register.
   863                              <1> ; IN:
   864                              <1> ;	CL	- channel to set volume on
   865                              <1> ;	CH	- new volume
   866                              <1> ;������������������������������������������������������������������������������
   867 00001322 50                  <1> SetVolume:	push	ax
   868 00001323 53                  <1> 		push	bx
   869                              <1> 
   870 00001324 31DB                <1> 		xor	bx,bx
   871 00001326 88CB                <1> 		mov	bl,cl
   872                              <1> 
   873                              <1> 	; ensure volume is within range
   874 00001328 80FD40              <1> 		cmp	ch,64
   875 0000132B 7202                <1> 		jb	.la
   876 0000132D B53F                <1> 		mov	ch,63
   877                              <1> 
   878                              <1> 	; get old 43.. value
   879 0000132F 2E8A87[9613]        <1> 	.la:	mov	al,[cs:Old43+bx]
   880 00001334 24C0                <1> 		and	al,0c0h		; mask out volume bits
   881 00001336 80F53F              <1> 		xor	ch,3fh
   882 00001339 08E8                <1> 		or	al,ch		; insert volume
   883 0000133B 2E8887[9613]        <1> 		mov	[cs:Old43+bx],al	; keep new 43.. value
   884                              <1> 
   885                              <1> 	; write new volume into Adlib
   886 00001340 2E8AA7[1913]        <1> 		mov	ah,[cs:ChannelOffs+bx]
   887 00001345 80C423              <1> 		add	ah,23h
   888 00001348 E80300              <1> 		call	Adlib
   889                              <1> 
   890 0000134B 5B                  <1> 		pop	bx
   891 0000134C 58                  <1> 		pop	ax
   892 0000134D C3                  <1> 		ret
   893                              <1> 
   894                              <1> 
   895                              <1> 
   896                              <1> 
   897                              <1> 
   898                              <1> ;??????????????????????????????????????????????????????????????????????????????
   899                              <1> ; Outputs a value to an ADLIB register.
   900                              <1> ; IN:
   901                              <1> ;	AH	- register no.
   902                              <1> ;	AL	- value
   903                              <1> ;������������������������������������������������������������������������������
   904                              <1> Adlib:	
   905 0000134E 1E                  <1> 		push ds
   906                              <1> 		
   907 0000134F 0E                  <1> 		push cs
   908 00001350 1F                  <1> 		pop ds
   909                              <1> 		
   910 00001351 E8(4B80)            <1> 		call os_adlib_regwrite
   911                              <1> 		
   912 00001354 1F                  <1> 		pop ds
   913 00001355 C3                  <1> 		ret
   914                              <1> 
   915                              <1> ;Adlib equ os_adlib_regwrite
   916                              <1> 
   917                              <1> 
   918                              <1> 
   919                              <1> 
   920                              <1> ; Variables
   921                              <1> ;������������������������������������������������������������������������������
   922 00001356 8803                <1> AdlibPort	dw	388h		; default Adlib base port
   923                              <1> 
   924 00001358 0000<rep 1Fh>       <1> InstPtrs	times	31 dw 0	; offsets of instrument data
   925 00001396 00<rep 9h>          <1> Old43		times	9 db 0	; record of 43..   register values
   926 0000139F 00<rep 9h>          <1> OldA0		times	9 db 0	; record of A0..A8 register values
   927 000013A8 00<rep 9h>          <1> OldB0		times	9 db 0	; record of B0..B8 register values
   928                              <1> 
   929 000013B1 01<rep 9h>          <1> ToneSlideSpeed	times	9 db 1	; speed of tone slide
   930                              <1> 
   931 000013BA 00<rep 9h>          <1> ToneSlideFreqL	times 9 db 0	; destination frequency of tone slide
   932 000013C3 00<rep 9h>          <1> ToneSlideFreqH	times 9 db 0
   933                              <1> 
   934 000013CC 00<rep 9h>          <1> ToneSlide	times 9 db 0	; tone slide flag
   935 000013D5 00<rep 9h>          <1> PortSlide	times 9 db 0	; portamento slide
   936 000013DE 00<rep 9h>          <1> VolSlide	times 9 db 0	; volume slide
   937                              <1> 
   938 000013E7 0000                <1> ModSeg		dw 0	; segment of module (starts at offset 0)
   939 000013E9 00                  <1> Speed		db 0	; speed (n/50Hz) of tune
   940 000013EA 00                  <1> SpeedCnt	db 0	; counter used for deriving speed
   941                              <1> 
   942 000013EB 0000                <1> OrderSize	dw 0	; no. of entries in Order List
   943 000013ED 0000                <1> OrderList	dw 0	; offset in module of Order List
   944 000013EF 0000                <1> OrderPos	dw 0	; current playing position in Order List
   945                              <1> 
   946 000013F1 0000                <1> PatternList	dw 0	; offset of pattern offset table in module
   947 000013F3 0000                <1> PatternPos	dw 0	; offset to current line in current pattern
   948 000013F5 00                  <1> Line		db 0	; current line being played (usually +1)
   949                              <1> 
   950                              <1> 	; end of PLAYER.ASM base - define your stuff here!
   951                              <1> %ifndef RAD_NO_DEFAULT_PLAYER
   952 000013F6 0000<rep 2h>        <1> old_irq_timer: times 2 dw 0
   953 000013FA 0000                <1> timer_increment: dw 0
   954 000013FC 0000                <1> timer_counter: dw 0
   955                              <1> %endif
   300                                  	%include "player/monopian.asm"
     1                              <1> piano:
     2 000013FE E831ED              <1> 	call start.draw_clear_background
     3                              <1> 	
     4                              <1> 	mov16 dx, 1, 9
    35 00001401 BA0109              <2>  mov %1, (%2 + %3 * 256)
     5 00001404 E8(0680)            <1> 	call os_move_cursor
     6 00001407 BE[5A06]            <1> 	mov si, start.piano0
     7 0000140A E8(0380)            <1> 	call os_print_string
     8 0000140D E8(8A80)            <1> 	call os_hide_cursor
     9                              <1> 	
    10                              <1> .pianoloop:
    11                              <1> 	mov16 dx, 1, 17
    35 00001410 BA0111              <2>  mov %1, (%2 + %3 * 256)
    12 00001413 E8(0680)            <1> 	call os_move_cursor
    13                              <1> 
    14 00001416 BE[8E05]            <1> 	mov si, start.octavemsg
    15 00001419 E8(0380)            <1> 	call os_print_string
    16                              <1> 	
    17 0000141C A0[8D05]            <1> 	mov al, [start.octave]
    18 0000141F E8(7280)            <1> 	call os_print_1hex
    19                              <1> 	
    20 00001422 E8(1280)            <1> 	call os_wait_for_key
    21                              <1> 
    22 00001425 80FC48              <1> 	cmp ah, 72
    23 00001428 7444                <1> 	je .octave_up
    24                              <1> 	
    25 0000142A 80FC50              <1> 	cmp ah, 80
    26 0000142D 7432                <1> 	je .octave_down
    27                              <1> 	
    28 0000142F 3C20                <1> 	cmp al, ' '
    29 00001431 7448                <1> 	je .execstop
    30                              <1> 	
    31 00001433 3C1B                <1> 	cmp al, 27
    32 00001435 0F84C7EB            <1> 	je start
    33                              <1> 	
    34 00001439 BE[9705]            <1> 	mov si, start.keydata1
    35 0000143C BF[BD05]            <1> 	mov di, start.notedata1
    36                              <1> 	
    37                              <1> .decodeloop:
    38 0000143F 8A3C                <1> 	mov bh, [si]
    39 00001441 46                  <1> 	inc si
    40 00001442 83C702              <1> 	add di, 2
    41                              <1> 	
    42 00001445 84FF                <1> 	test bh, bh
    43 00001447 74C7                <1> 	jz .pianoloop
    44                              <1> 	
    45 00001449 38FC                <1> 	cmp ah, bh
    46 0000144B 75F2                <1> 	jne .decodeloop
    47                              <1> 	
    48 0000144D 83EF02              <1> 	sub di, 2				; We've overflowed a bit
    49 00001450 8B05                <1> 	mov ax, [di]
    50                              <1> 	
    51 00001452 8A1E[8D05]          <1> 	mov bl, [start.octave]
    52 00001456 B106                <1> 	mov cl, 6
    53 00001458 28D9                <1> 	sub cl, bl
    54 0000145A D3E8                <1> 	shr ax, cl
    55                              <1> 	
    56 0000145C E8(1B80)            <1> 	call os_speaker_tone
    57                              <1> 	
    58 0000145F EBAF                <1> 	jmp .pianoloop
    59                              <1> 	
    60                              <1> .octave_down:
    61 00001461 803E[8D05]01        <1> 	cmp byte [start.octave], 1
    62 00001466 74A8                <1> 	je .pianoloop
    63 00001468 FE0E[8D05]          <1> 	dec byte [start.octave]
    64 0000146C EBA2                <1> 	jmp .pianoloop
    65                              <1> 	
    66                              <1> .octave_up:
    67 0000146E 803E[8D05]06        <1> 	cmp byte [start.octave], 6
    68 00001473 749B                <1> 	je .pianoloop
    69 00001475 FE06[8D05]          <1> 	inc byte [start.octave]
    70 00001479 EB95                <1> 	jmp .pianoloop
    71                              <1> 	
    72                              <1> .execstop:
    73 0000147B E8(1E80)            <1> 	call os_speaker_off
    74 0000147E EB90                <1> 	jmp .pianoloop
    75                              <1> 	
   301                                  	%include "player/polypian.asm"
     1                              <1> polypiano:
     2 00001480 E8A0EC              <1> 	call start.draw_background
     3                              <1> 	
     4 00001483 B8[F015]            <1> 	mov ax, buffer
     5 00001486 BB[A615]            <1> 	mov bx, .channelmsg
     6 00001489 E8(A580)            <1> 	call os_input_dialog
     7                              <1> 	
     8 0000148C BE[F015]            <1> 	mov si, buffer
     9 0000148F E8(AE80)            <1> 	call os_string_to_int
    10                              <1> 	
    11 00001492 3C09                <1> 	cmp al, 9
    12 00001494 0F8FE100            <1> 	jg .error
    13                              <1> 
    14 00001498 3C01                <1> 	cmp al, 1
    15 0000149A 0F8CDB00            <1> 	jl .error
    16                              <1> 	
    17                              <1> .init_adlib:
    18 0000149E C606[8B15]00        <1> 	mov byte [.currentchannel], 0
    19 000014A3 A2[8C15]            <1> 	mov [.numofchannels], al
    20                              <1> 
    21                              <1> 	clr si
    31 000014A6 31F6                <2>  xor %1, %1
    22 000014A8 B91C07              <1> 	mov cx, 1820
    23 000014AB 88C3                <1> 	mov bl, al
    24 000014AD E8(D880)            <1> 	call os_start_adlib
    25                              <1> 	
    26 000014B0 B90700              <1> 	mov cx, 7					; We will only read 7 registers here
    27 000014B3 BE[8D15]            <1> 	mov si, .adlibsquare
    28                              <1> 	
    29                              <1> .preparechannels:
    30 000014B6 AD                  <1> 	lodsw
    31                              <1> 	
    32 000014B7 51                  <1> 	push cx
    33                              <1> 	clr bx
    31 000014B8 31DB                <2>  xor %1, %1
    34 000014BA B90900              <1> 	mov cx, 9
    35                              <1> 	
    36                              <1> .channelloop:
    37 000014BD 50                  <1> 	push ax
    38 000014BE 02A7[9D15]          <1> 	add ah, [.adliboffsets + bx]
    39 000014C2 43                  <1> 	inc bx
    40                              <1> 	
    41 000014C3 E8(4B80)            <1> 	call os_adlib_regwrite
    42 000014C6 58                  <1> 	pop ax
    43                              <1> 	
    44 000014C7 E2F4                <1> 	loop .channelloop
    45                              <1> 	
    46 000014C9 59                  <1> 	pop cx
    47 000014CA E2EA                <1> 	loop .preparechannels
    48                              <1> 	
    49 000014CC AD                  <1> 	lodsw
    50                              <1> 	
    51                              <1> .feedbackloop:					; Write the 8th register
    52 000014CD E8(4B80)            <1> 	call os_adlib_regwrite
    53 000014D0 FEC4                <1> 	inc ah
    54 000014D2 80FCC9              <1> 	cmp ah, 0C9h
    55 000014D5 75F6                <1> 	jne .feedbackloop
    56                              <1> 	
    57 000014D7 E858EC              <1> 	call start.draw_clear_background
    58                              <1> 
    59                              <1> 	mov16 dx, 1, 9
    35 000014DA BA0109              <2>  mov %1, (%2 + %3 * 256)
    60 000014DD E8(0680)            <1> 	call os_move_cursor
    61 000014E0 BE[5A06]            <1> 	mov si, start.piano0
    62 000014E3 E8(0380)            <1> 	call os_print_string
    63 000014E6 E8(8A80)            <1> 	call os_hide_cursor
    64                              <1> 	
    65                              <1> .pianoloop:
    66                              <1> 	mov16 dx, 1, 17
    35 000014E9 BA0111              <2>  mov %1, (%2 + %3 * 256)
    67 000014EC E8(0680)            <1> 	call os_move_cursor
    68                              <1> 	
    69 000014EF BE[8E05]            <1> 	mov si, start.octavemsg
    70 000014F2 E8(0380)            <1> 	call os_print_string
    71                              <1> 	
    72 000014F5 A0[8D05]            <1> 	mov al, [start.octave]
    73 000014F8 E8(7280)            <1> 	call os_print_1hex
    74                              <1> 	
    75 000014FB E8(1280)            <1> 	call os_wait_for_key
    76                              <1> 
    77 000014FE 80FC48              <1> 	cmp ah, 72
    78 00001501 7454                <1> 	je .octave_up
    79                              <1> 	
    80 00001503 80FC50              <1> 	cmp ah, 80
    81 00001506 7442                <1> 	je .octave_down
    82                              <1> 	
    83 00001508 3C20                <1> 	cmp al, ' '
    84 0000150A 7458                <1> 	je .execstop
    85                              <1> 	
    86 0000150C 3C1B                <1> 	cmp al, 27
    87 0000150E 7463                <1> 	je .end
    88                              <1> 	
    89 00001510 BE[9705]            <1> 	mov si, start.keydata1
    90 00001513 BF[BD05]            <1> 	mov di, start.notedata1
    91                              <1> 	
    92                              <1> .decodeloop:
    93 00001516 8A3C                <1> 	mov bh, [si]
    94 00001518 46                  <1> 	inc si
    95 00001519 83C702              <1> 	add di, 2
    96                              <1> 	
    97 0000151C 84FF                <1> 	test bh, bh
    98 0000151E 74C9                <1> 	jz .pianoloop
    99                              <1> 	
   100 00001520 38FC                <1> 	cmp ah, bh
   101 00001522 75F2                <1> 	jne .decodeloop
   102                              <1> 	
   103 00001524 83EF02              <1> 	sub di, 2				; We've overflowed a bit
   104 00001527 8B05                <1> 	mov ax, [di]
   105                              <1> 	
   106 00001529 8A1E[8D05]          <1> 	mov bl, [start.octave]
   107 0000152D B106                <1> 	mov cl, 6
   108 0000152F 28D9                <1> 	sub cl, bl
   109 00001531 D3E8                <1> 	shr ax, cl
   110                              <1> 	
   111 00001533 8A0E[8B15]          <1> 	mov cl, [.currentchannel]	
   112 00001537 E8(C680)            <1> 	call os_adlib_calcfreq
   113                              <1> 	
   114 0000153A FEC1                <1> 	inc cl
   115 0000153C 3A0E[8C15]          <1> 	cmp cl, [.numofchannels]
   116 00001540 7502                <1> 	jne .no_reset_counter
   117                              <1> 
   118                              <1> 	clr cl
    31 00001542 30C9                <2>  xor %1, %1
   119                              <1> 	
   120                              <1> .no_reset_counter:
   121 00001544 880E[8B15]          <1> 	mov [.currentchannel], cl
   122                              <1> 	
   123 00001548 EB9F                <1> 	jmp .pianoloop
   124                              <1> 	
   125                              <1> .octave_down:
   126 0000154A 803E[8D05]01        <1> 	cmp byte [start.octave], 1
   127 0000154F 7E98                <1> 	jle .pianoloop
   128 00001551 FE0E[8D05]          <1> 	dec byte [start.octave]
   129 00001555 EB92                <1> 	jmp .pianoloop
   130                              <1> 	
   131                              <1> .octave_up:
   132 00001557 803E[8D05]06        <1> 	cmp byte [start.octave], 6
   133 0000155C 7D8B                <1> 	jge .pianoloop
   134 0000155E FE06[8D05]          <1> 	inc byte [start.octave]
   135 00001562 EB85                <1> 	jmp .pianoloop
   136                              <1> 	
   137                              <1> .execstop:
   138                              <1> 	clr cl
    31 00001564 30C9                <2>  xor %1, %1
   139                              <1> 	
   140                              <1> .stoploop:
   141 00001566 E8(0581)            <1> 	call os_adlib_noteoff
   142                              <1> 
   143 00001569 FEC1                <1> 	inc cl
   144 0000156B 80F909              <1> 	cmp cl, 9
   145 0000156E 75F6                <1> 	jne .stoploop
   146                              <1> 	
   147 00001570 E976FF              <1> 	jmp .pianoloop
   148                              <1> 	
   149                              <1> .end:
   150 00001573 E8(0281)            <1> 	call os_stop_adlib
   151 00001576 E987EA              <1> 	jmp start
   152                              <1> 
   153                              <1> .error:
   154 00001579 B8[C415]            <1> 	mov ax, .channelerr
   155 0000157C BB[D915]            <1> 	mov bx, .channelerr2
   156                              <1> 	clr cx
    31 0000157F 31C9                <2>  xor %1, %1
   157                              <1> 	clr dx
    31 00001581 31D2                <2>  xor %1, %1
   158 00001583 E8(3980)            <1> 	call os_dialog_box
   159                              <1> 	
   160 00001586 B009                <1> 	mov al, 9
   161 00001588 E913FF              <1> 	jmp .init_adlib
   162                              <1> 	
   163 0000158B 00                  <1> 	.currentchannel		db 0
   164 0000158C 00                  <1> 	.numofchannels		db 0
   165                              <1> 	
   166 0000158D 0220                <1> 	.adlibsquare		db 02h, 20h
   167 0000158F 0123                <1> 						db 01h, 23h
   168 00001591 1940                <1> 						db 19h, 40h
   169 00001593 F060                <1> 						db 0F0h,60h
   170 00001595 F063                <1> 						db 0F0h,63h
   171 00001597 F080                <1> 						db 0F0h,80h
   172 00001599 FF83                <1> 						db 0FFh,83h
   173 0000159B 0EC0                <1> 						db 0Eh, 0C0h
   174                              <1> 						
   175 0000159D 00010208090A101112  <1> 	.adliboffsets		db 0, 1, 2, 8, 9, 10, 16, 17, 18
   176                              <1> 
   177 000015A6 486F77206D616E7920- <1> 	.channelmsg			db 'How many notes at once? (1-9)', 0
   177 000015AF 6E6F74657320617420- <1>
   177 000015B8 6F6E63653F2028312D- <1>
   177 000015C1 392900              <1>
   178 000015C4 4E756D626572206E6F- <1> 	.channelerr			db 'Number not in range.', 0
   178 000015CD 7420696E2072616E67- <1>
   178 000015D6 652E00              <1>
   179 000015D9 44656661756C746564- <1> 	.channelerr2		db 'Defaulted to 9 notes.', 0
   179 000015E2 20746F2039206E6F74- <1>
   179 000015EB 65732E00            <1>
   302                                  
   303 000015EF 90                      align 16
   304                                  ;test_module: incbin RAD_MODULE_NAME
   305                                  buffer:
   306                                  buffer2 equ buffer + 14000
   307                                  
   308                                  ; ------------------------------------------------------------------
   309                                  
