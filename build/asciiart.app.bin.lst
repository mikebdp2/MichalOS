     1                                  ; ------------------------------------------------------------------
     2                                  ; MichalOS Ascii Artist
     3                                  ; ------------------------------------------------------------------
     4                                  
     5                                  	%INCLUDE "include/program.inc"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; Include file for MichalOS program or kernel module development
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> 	BITS 16
     6                              <1> 	ORG 100h
     7                              <1> 	
     8                              <1> 	%include "include/constants.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS kernel/program development - constants & macros
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ------------------------------------------------------------------
     6                              <2> ; COLOURS (eg for os_draw_background and os_draw_block)
     7                              <2> 
     8                              <2> %DEFINE BLACK_ON_WHITE		11110000b
     9                              <2> %DEFINE WHITE_ON_BLACK		00001111b
    10                              <2> 
    11                              <2> ; ------------------------------------------------------------------
    12                              <2> ; KEYS
    13                              <2> 
    14                              <2> %DEFINE KEY_UP		72
    15                              <2> %DEFINE KEY_DOWN	80
    16                              <2> %DEFINE KEY_LEFT	75
    17                              <2> %DEFINE KEY_RIGHT	77
    18                              <2> 
    19                              <2> %DEFINE KEY_ESC		27
    20                              <2> %DEFINE KEY_ENTER	13
    21                              <2> 
    22                              <2> ; ------------------------------------------------------------------
    23                              <2> ; MACROS
    24                              <2> 
    25                              <2> %macro syscall 1
    26                              <2> 	mov bp, %1
    27                              <2> 	call os_syscall
    28                              <2> %endmacro
    29                              <2> 
    30                              <2> %macro clr 1
    31                              <2> 	xor %1, %1
    32                              <2> %endmacro
    33                              <2> 
    34                              <2> %macro mov16 3
    35                              <2> 	mov %1, (%2 + %3 * 256)
    36                              <2> %endmacro
    37                              <2> 
    38                              <2> %macro movs 2
    39                              <2> 	push %2
    40                              <2> 	pop %1
    41                              <2> %endmacro
    42                              <2> 
    43                              <2> ; ------------------------------------------------------------------
    44                              <2> ; MEMORY LOCATIONS
    45                              <2> 
    46                              <2> %define ADLIB_BUFFER 0500h
    47                              <2> %define DESKTOP_BACKGROUND 0600h
    48                              <2> %define SYSTEM_FONT 1600h
    49                              <2> %define FILE_MANAGER 2600h
    50                              <2> %define DISK_PARAMS 2E00h
    51                              <2> 
    52                              <2> %define DISK_BUFFER 0E000h
    53                              <2> %define CONFIG_FILE 57000
    54                              <2> %define CONFIG_FILE_SIZE 83
    55                              <2> 
    56                              <2> ; ------------------------------------------------------------------
    57                              <2> ; CONFIG FILE LOCATIONS
    58                              <2> 
    59                              <2> %define CONFIG(x) (CONFIG_FILE + x)
    60                              <2> 
    61                              <2> ; 0 = Desktop background color (BYTE)
    62                              <2> %define CONFIG_DESKTOP_BG_COLOR CONFIG(0)
    63                              <2> 
    64                              <2> ; 1 = Window background color (BYTE)
    65                              <2> %define CONFIG_WINDOW_BG_COLOR CONFIG(1)
    66                              <2> 
    67                              <2> ; 2 = Password enabled (BYTE)
    68                              <2> %define CONFIG_PASSWORD_ENABLED CONFIG(2)
    69                              <2> 
    70                              <2> ; 3 - 35 = Password data (STRING, 32 chars + '\0')
    71                              <2> %define CONFIG_PASSWORD CONFIG(3)
    72                              <2> %define CFG_PASSWORD_MAX_INPUT_LENGTH 32
    73                              <2> %define CFG_PASSWORD_MAX_LENGTH 33
    74                              <2> 
    75                              <2> ; 36 - 68 = Username (STRING, 32 chars + '\0')
    76                              <2> %define CONFIG_USERNAME CONFIG(36)
    77                              <2> %define CFG_USERNAME_MAX_INPUT_LENGTH 32
    78                              <2> %define CFG_USERNAME_MAX_LENGTH 33
    79                              <2> 
    80                              <2> ; 69 - Sound enabled on startup (BYTE)
    81                              <2> %define CONFIG_SOUND_ENABLED CONFIG(69)
    82                              <2> 
    83                              <2> ; 70 - Adlib driver number
    84                              <2> %define CONFIG_ADLIB_DRIVER CONFIG(70)
    85                              <2> %define CFG_ADLIB_STD_DRIVER 0
    86                              <2> %define CFG_ADLIB_PWM_DRIVER 1
    87                              <2> %define CFG_ADLIB_PWM_LOUD_DRIVER 2
    88                              <2> 
    89                              <2> ; 71 - Menu screen dimming enabled (BYTE)
    90                              <2> %define CONFIG_MENU_DIMMING CONFIG(71)
    91                              <2> 
    92                              <2> ; 72 - Menu color (BYTE)
    93                              <2> %define CONFIG_MENU_BG_COLOR CONFIG(72)
    94                              <2> 
    95                              <2> ; 73 - "DOS" font enabled (BYTE)
    96                              <2> %define CONFIG_FONT CONFIG(73)
    97                              <2> %define CFG_FONT_MICHALOS 0
    98                              <2> %define CFG_FONT_BIOS 1
    99                              <2> 
   100                              <2> ; 74 - Minutes to wait for screensaver (BYTE)
   101                              <2> %define CONFIG_SCREENSAVER_MINUTES CONFIG(74)
   102                              <2> 
   103                              <2> ; 75 - System stack size in 16-byte blocks (WORD)
   104                              <2> %define CONFIG_STACKSGMT_SIZE CONFIG(75)
   105                              <2> 
   106                              <2> ; 77 - 80 - Unused *******************************
   107                              <2> 
   108                              <2> ; 81 - Minute time offset (WORD)
   109                              <2> %define CONFIG_TIMEZONE_OFFSET CONFIG(81)
   110                              <2> 
   111                              <2> ; ------------------------------------------------------------------
   112                              <2> ; MUSICAL NOTE FREQUENCY LIST
   113                              <2> 
   114                              <2> A2		equ 110
   115                              <2> AS2		equ 117
   116                              <2> B2		equ 124
   117                              <2> C3		equ 131
   118                              <2> CS3		equ 139
   119                              <2> D3		equ 147
   120                              <2> DS3		equ 156
   121                              <2> E3		equ 165
   122                              <2> F3		equ 175
   123                              <2> FS3		equ 185
   124                              <2> G3		equ 196
   125                              <2> GS3		equ 208
   126                              <2> A3		equ 220
   127                              <2> AS3		equ 233
   128                              <2> B3		equ 247
   129                              <2> C4		equ 262
   130                              <2> CS4		equ 277
   131                              <2> D4		equ 294
   132                              <2> DS4		equ 311
   133                              <2> E4		equ 330
   134                              <2> F4		equ 349
   135                              <2> FS4		equ 370
   136                              <2> G4		equ 392
   137                              <2> GS4		equ 415
   138                              <2> A4		equ 440
   139                              <2> AS4		equ 466
   140                              <2> B4		equ 494
   141                              <2> C5		equ 523
   142                              <2> CS5		equ 554
   143                              <2> D5		equ 587
   144                              <2> DS5		equ 622
   145                              <2> E5		equ 659
   146                              <2> F5		equ 698
   147                              <2> FS5		equ 740
   148                              <2> G5		equ 784
   149                              <2> GS5		equ 831
   150                              <2> A5		equ 880
   151                              <2> AS5		equ 932
   152                              <2> B5		equ 988
   153                              <2> C6		equ 1046
   154                              <2> CS6		equ 1109
   155                              <2> D6		equ 1175
   156                              <2> DS6		equ 1245
   157                              <2> E6		equ 1319
   158                              <2> F6		equ 1397
   159                              <2> FS6		equ 1480
   160                              <2> G6		equ 1568
   161                              <2> GS6		equ 1661
   162                              <2> A6		equ 1760
   163                              <2> AS6		equ 1865
   164                              <2> B6		equ 1976
   165                              <2> C7		equ 2093
   166                              <2> CS7		equ 2217
   167                              <2> D7		equ 2349
   168                              <2> DS7		equ 2489
   169                              <2> E7		equ 2637
   170                              <2> F7		equ 2794
   171                              <2> FS7		equ 2960
   172                              <2> G7		equ 3136
   173                              <2> GS7		equ 3322
   174                              <2> A7		equ 3520
   175                              <2> AS7		equ 3729
   176                              <2> B7		equ 3951
   177                              <2> C8		equ 4186
   178                              <2> CS8		equ 4435
   179                              <2> D8		equ 4699
   180                              <2> DS8		equ 4978
   181                              <2> E8		equ 5274
   182                              <2> F8		equ 5588
   183                              <2> FS8		equ 5920
   184                              <2> G8		equ 6272
   185                              <2> GS8		equ 6645
   186                              <2> A8		equ 7040
   187                              <2> AS8		equ 7459
   188                              <2> B8		equ 7902
     9                              <1> 	%include "include/syscalls.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS program development - syscalls
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ==================================================================
     6                              <2> ; MichalOS Sound functions (PC speaker, YM3812)
     7                              <2> ; ==================================================================
     8                              <2> 
     9                              <2> ; ------------------------------------------------------------------
    10                              <2> ; os_speaker_tone -- Generate PC speaker tone (call os_speaker_off to turn off)
    11                              <2> ; IN: AX = note frequency (in Hz)
    12                              <2> ; OUT: None, registers preserved
    13                              <2> 
    14                              <2> os_speaker_tone equ 32795
    15                              <2> 
    16                              <2> ; ------------------------------------------------------------------
    17                              <2> ; os_speaker_raw_period -- Generate PC speaker tone (call os_speaker_off to turn off)
    18                              <2> ; IN: AX = note period (= 105000000 / 88 / freq)
    19                              <2> ; OUT: None, registers preserved
    20                              <2> 
    21                              <2> os_speaker_raw_period equ 33107
    22                              <2> 
    23                              <2> ; ------------------------------------------------------------------
    24                              <2> ; os_speaker_note_length -- Generate PC speaker tone for a set amount of time and then stop
    25                              <2> ; IN: AX = note frequency, CX = length (in ticks)
    26                              <2> ; OUT: None, registers preserved
    27                              <2> 
    28                              <2> os_speaker_note_length equ 32900
    29                              <2> 
    30                              <2> ; ------------------------------------------------------------------
    31                              <2> ; os_speaker_off -- Turn off PC speaker
    32                              <2> ; IN/OUT: None, registers preserved
    33                              <2> 
    34                              <2> os_speaker_off equ 32798
    35                              <2> 
    36                              <2> ; ------------------------------------------------------------------
    37                              <2> ; os_speaker_muted -- Check if the PC speaker is muted
    38                              <2> ; OUT: ZF set if muted, clear if not
    39                              <2> 
    40                              <2> os_speaker_muted equ 33125
    41                              <2> 
    42                              <2> ; ------------------------------------------------------------------
    43                              <2> ; os_start_adlib -- Starts the selected Adlib driver
    44                              <2> ; IN: SI = interrupt handler, CX = prescaler, BL = number of channels
    45                              <2> ; The interrupt will fire at 33144 Hz (the closest possible to 32768 Hz) divided by CX.
    46                              <2> ; Common prescaler values:
    47                              <2> ;		33 = ~1 kHz (1004.362 Hz)
    48                              <2> ;		663 = ~50 Hz (49.991 Hz)
    49                              <2> ;		1820 = ~18.2 Hz (18.211 Hz)
    50                              <2> ; OUT: None, registers preserved
    51                              <2> 
    52                              <2> os_start_adlib equ 32984
    53                              <2> 
    54                              <2> ; ------------------------------------------------------------------
    55                              <2> ; os_stop_adlib -- Stops the Adlib driver
    56                              <2> ; IN/OUT: None, registers preserved
    57                              <2> 
    58                              <2> os_stop_adlib equ 33026
    59                              <2> 
    60                              <2> ; ------------------------------------------------------------------
    61                              <2> ; os_adlib_regwrite -- Write to a YM3812 register
    62                              <2> ; IN: AH/AL - register address/value to write
    63                              <2> 
    64                              <2> os_adlib_regwrite equ 32843
    65                              <2> 
    66                              <2> ; ------------------------------------------------------------------
    67                              <2> ; os_adlib_mute -- Mute the YM3812's current state
    68                              <2> ; IN/OUT: None
    69                              <2> 
    70                              <2> os_adlib_mute equ 33044
    71                              <2> 
    72                              <2> ; ------------------------------------------------------------------
    73                              <2> ; os_adlib_unmute -- Unmute the YM3812's current state
    74                              <2> ; IN/OUT: None
    75                              <2> 
    76                              <2> os_adlib_unmute equ 33089
    77                              <2> 
    78                              <2> ; ------------------------------------------------------------------
    79                              <2> ; os_adlib_calcfreq -- Play a frequency
    80                              <2> ; IN: AX - frequency, CL = channel
    81                              <2> ; OUT: None, registers preserved
    82                              <2> 
    83                              <2> os_adlib_calcfreq equ 32966
    84                              <2> 
    85                              <2> ; ------------------------------------------------------------------
    86                              <2> ; os_adlib_noteoff -- Turns off a note
    87                              <2> ; IN: CL = channel
    88                              <2> ; OUT: None, registers preserved
    89                              <2> 
    90                              <2> os_adlib_noteoff equ 33029
    91                              <2> 
    92                              <2> ; ==================================================================
    93                              <2> ; MichalOS Text display output functions
    94                              <2> ; ==================================================================
    95                              <2> 
    96                              <2> ; ------------------------------------------------------------------
    97                              <2> ; os_putchar -- Puts a character on the screen
    98                              <2> ; IN: AL = character
    99                              <2> ; OUT: None, registers preserved
   100                              <2> 
   101                              <2> os_putchar equ 32981
   102                              <2> 
   103                              <2> ; ------------------------------------------------------------------
   104                              <2> ; os_put_chars -- Puts up to a set amount of characters on the screen
   105                              <2> ; IN: BL = terminator, DS:SI = location, CX = character count
   106                              <2> ; OUT: None, registers preserved
   107                              <2> 
   108                              <2> os_put_chars equ 32996
   109                              <2> 
   110                              <2> ; ------------------------------------------------------------------
   111                              <2> ; os_print_string -- Displays text
   112                              <2> ; IN: DS:SI = message location (zero-terminated string)
   113                              <2> ; OUT: None, registers preserved
   114                              <2> 
   115                              <2> os_print_string equ 32771
   116                              <2> 
   117                              <2> ; ------------------------------------------------------------------
   118                              <2> ; os_print_string_box -- Displays text inside a text-box.
   119                              <2> ; IN: DS:SI = message location (zero-terminated string), DL = left alignment
   120                              <2> ; OUT: None, registers preserved
   121                              <2> 
   122                              <2> os_print_string_box equ 32993
   123                              <2> 
   124                              <2> ; ------------------------------------------------------------------
   125                              <2> ; os_format_string -- Displays colored text
   126                              <2> ; IN: DS:SI = message location (zero-terminated string), BL = text color
   127                              <2> ; OUT: None, registers preserved
   128                              <2> 
   129                              <2> os_format_string equ 32978
   130                              <2> 
   131                              <2> ; ------------------------------------------------------------------
   132                              <2> ; os_clear_screen -- Clears the screen to background
   133                              <2> ; IN/OUT: None, registers preserved
   134                              <2> 
   135                              <2> os_clear_screen equ 32777
   136                              <2> 
   137                              <2> ; ------------------------------------------------------------------
   138                              <2> ; os_move_cursor -- Moves cursor in text mode
   139                              <2> ; IN: DH, DL = row, column
   140                              <2> ; OUT: None, registers preserved
   141                              <2> 
   142                              <2> os_move_cursor equ 32774
   143                              <2> 
   144                              <2> ; ------------------------------------------------------------------
   145                              <2> ; os_get_cursor_pos -- Return position of text cursor
   146                              <2> ; IN: None
   147                              <2> ; OUT: DH, DL = row, column
   148                              <2> 
   149                              <2> os_get_cursor_pos equ 32870
   150                              <2> 
   151                              <2> ; ------------------------------------------------------------------
   152                              <2> ; os_show_cursor -- Turns on cursor in text mode
   153                              <2> ; IN/OUT: None, registers preserved
   154                              <2> 
   155                              <2> os_show_cursor equ 32903
   156                              <2> 
   157                              <2> ; ------------------------------------------------------------------
   158                              <2> ; os_hide_cursor -- Turns off cursor in text mode
   159                              <2> ; IN/OUT: None, registers preserved
   160                              <2> 
   161                              <2> os_hide_cursor equ 32906
   162                              <2> 
   163                              <2> ; ------------------------------------------------------------------
   164                              <2> ; os_draw_block -- Render block of specified colour
   165                              <2> ; IN: BL/DL/DH/SI/DI = colour/start X pos/start Y pos/width/finish Y pos
   166                              <2> ; OUT: None, registers preserved
   167                              <2> 
   168                              <2> os_draw_block equ 32945
   169                              <2> 
   170                              <2> ; ------------------------------------------------------------------
   171                              <2> ; os_file_selector -- Show a file selection dialog
   172                              <2> ; IN: None
   173                              <2> ; OUT: AX = location of filename string (or carry set if Esc pressed)
   174                              <2> 
   175                              <2> os_file_selector equ 32855
   176                              <2> 
   177                              <2> ; ------------------------------------------------------------------
   178                              <2> ; os_file_selector_filtered -- Show a file selection dialog only 
   179                              <2> ; with files mathing the filter
   180                              <2> ; IN: ES:BX = location of file extension list (0 if none)
   181                              <2> ; OUT: DS:AX = location of filename string (or carry set if Esc pressed)
   182                              <2> 
   183                              <2> os_file_selector_filtered equ 33122
   184                              <2> 
   185                              <2> ; ------------------------------------------------------------------
   186                              <2> ; os_list_dialog_tooltip -- Show a dialog with a list of options and a tooltip.
   187                              <2> ; That means, when the user changes the selection, the application will be called back
   188                              <2> ; to change the tooltip's contents.
   189                              <2> ; IN: DS:AX = comma-separated list of strings to show (zero-terminated),
   190                              <2> ;     DS:BX = first help string, DS:CX = second help string
   191                              <2> ;     SI = key/display callback (see os_list_dialog_ex)
   192                              <2> ;     if AX = 0: DI = entry display callback, DX = number of entries
   193                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   194                              <2> 
   195                              <2> os_list_dialog_tooltip equ 32912
   196                              <2> 
   197                              <2> ; ------------------------------------------------------------------
   198                              <2> ; os_list_dialog -- Show a dialog with a list of options
   199                              <2> ; IN: ES:AX = comma-separated list of strings to show (zero-terminated),
   200                              <2> ;     ES:BX = first help string, ES:CX = second help string
   201                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   202                              <2> 
   203                              <2> os_list_dialog equ 32936
   204                              <2> 
   205                              <2> ; ------------------------------------------------------------------
   206                              <2> ; os_list_dialog_ex -- Show a dialog with a list of options
   207                              <2> ; IN: DS:BX = pointer to setup struct
   208                              <2> ;       Addr Size Description
   209                              <2> ;       000h word Pointer to entry display callback (accepts CX as entry ID, prints out result) - valid only if ptr to list is zero
   210                              <2> ;       002h word Pointer to comma-separated list of strings to show (zero-terminated)
   211                              <2> ;       004h word Pointer to key/entry change callback (accepts AX as entry ID, CX as keypress),
   212                              <2> ;       006h word Number of entries (if 0, then it is automatically calculated from 002h)
   213                              <2> ;       008h word Pointer to first help string (if 0, then the list will fill the whole dialog)
   214                              <2> ;       00Ah word Pointer to second help string
   215                              <2> ;       00Ch word (ES) Pointer to history data (points to a 5 byte array)
   216                              <2> ;       00Eh byte Screen X position
   217                              <2> ;       00Fh byte Screen Y position
   218                              <2> ;       010h byte Dialog width
   219                              <2> ;       011h byte Dialog height
   220                              <2> ;       012h word Source segment (used for comma-separated list & help strings)
   221                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   222                              <2> 
   223                              <2> os_list_dialog_ex equ 33113
   224                              <2> 
   225                              <2> ; ------------------------------------------------------------------
   226                              <2> ; os_select_list -- Draws a list of entries (defined by a callback) to select from.
   227                              <2> ; IN: AX = width/height, BL = color, CX = number of entries, DX = X/Y pos,
   228                              <2> ;     SI = callback (if C clear = accepts an entry ID in CX, prints an appropriate string,
   229                              <2> ;     if C set = accepts key input in AX, entry ID in CX; not required to preserve regs),
   230                              <2> ;     ES:DI = pointer to a history struct (word .num_of_entries, word .skip_num, byte .cursor) or 0 if none
   231                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   232                              <2> 
   233                              <2> os_select_list equ 33110
   234                              <2> 
   235                              <2> ; ------------------------------------------------------------------
   236                              <2> ; os_draw_background -- Clear screen with white top and bottom bars
   237                              <2> ; containing text, and a coloured middle section.
   238                              <2> ; IN: DS:AX/BX = top/bottom string locations, CX = colour (256 if the app wants to display the default background)
   239                              <2> ; OUT: None, registers preserved
   240                              <2> 
   241                              <2> os_draw_background equ 32807
   242                              <2> 
   243                              <2> ; ------------------------------------------------------------------
   244                              <2> ; os_print_newline -- Reset cursor to start of next line
   245                              <2> ; IN/OUT: None, registers preserved
   246                              <2> 
   247                              <2> os_print_newline equ 32783
   248                              <2> 
   249                              <2> ; ------------------------------------------------------------------
   250                              <2> ; os_dump_registers -- Dumps all register contents in hex to the screen
   251                              <2> ; IN: All registers
   252                              <2> ; OUT: None, registers preserved
   253                              <2> 
   254                              <2> os_dump_registers equ 32909
   255                              <2> 
   256                              <2> ; ------------------------------------------------------------------
   257                              <2> ; os_input_dialog -- Get text string from user via a dialog box
   258                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   259                              <2> ; OUT: None, registers preserved
   260                              <2> 
   261                              <2> os_input_dialog equ 32933
   262                              <2> 
   263                              <2> ; ------------------------------------------------------------------
   264                              <2> ; os_password_dialog -- Get a password from user via a dialog box
   265                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   266                              <2> ; OUT: None, registers preserved
   267                              <2> 
   268                              <2> os_password_dialog equ 33041
   269                              <2> 
   270                              <2> ; ------------------------------------------------------------------
   271                              <2> ; os_dialog_box -- Print dialog box in middle of screen, with button(s)
   272                              <2> ; IN: DS:AX, DS:BX, DS:CX = string locations (set registers to 0 for no display),
   273                              <2> ; IN: DX = 0 for single 'OK' dialog,
   274                              <2> ;          1 for two-button 'OK' and 'Cancel' ('OK' selected by default),
   275                              <2> ;          2 for two-button 'OK' and 'Cancel' ('Cancel' selected by default)
   276                              <2> ; OUT: If two-button mode, AX = 0 for OK and 1 for cancel
   277                              <2> ; NOTE: Each string is limited to 40 characters
   278                              <2> 
   279                              <2> os_dialog_box equ 32825
   280                              <2> 
   281                              <2> ; ------------------------------------------------------------------
   282                              <2> ; os_print_space -- Print a space to the screen
   283                              <2> ; IN/OUT: None, registers preserved
   284                              <2> 
   285                              <2> os_print_space equ 32873
   286                              <2> 
   287                              <2> ; ------------------------------------------------------------------
   288                              <2> ; os_print_digit -- Displays contents of AX as a single digit
   289                              <2> ; Works up to base 37, ie digits 0-Z
   290                              <2> ; IN: AX = "digit" to format and print
   291                              <2> ; OUT: None, registers preserved
   292                              <2> 
   293                              <2> os_print_digit equ 32879
   294                              <2> 
   295                              <2> ; ------------------------------------------------------------------
   296                              <2> ; os_print_1hex -- Displays low nibble of AL in hex format
   297                              <2> ; IN: AL = number to format and print
   298                              <2> ; OUT: None, registers preserved
   299                              <2> 
   300                              <2> os_print_1hex equ 32882
   301                              <2> 
   302                              <2> ; ------------------------------------------------------------------
   303                              <2> ; os_print_2hex -- Displays AL in hex format
   304                              <2> ; IN: AL = number to format and print
   305                              <2> ; OUT: None, registers preserved
   306                              <2> 
   307                              <2> os_print_2hex equ 32885
   308                              <2> 
   309                              <2> ; ------------------------------------------------------------------
   310                              <2> ; os_print_4hex -- Displays AX in hex format
   311                              <2> ; IN: AX = number to format and print
   312                              <2> ; OUT: None, registers preserved
   313                              <2> 
   314                              <2> os_print_4hex equ 32888
   315                              <2> 
   316                              <2> ; ------------------------------------------------------------------
   317                              <2> ; os_print_8hex - Displays EAX in hex format
   318                              <2> ; IN: EAX = unsigned integer
   319                              <2> ; OUT: None, registers preserved
   320                              <2> 
   321                              <2> os_print_8hex equ 33065
   322                              <2> 
   323                              <2> ; ------------------------------------------------------------------
   324                              <2> ; os_print_int -- Prints an integer in decimal.
   325                              <2> ; IN: AX = unsigned integer
   326                              <2> ; OUT: None, registers preserved
   327                              <2> 
   328                              <2> os_print_int equ 33101
   329                              <2> 
   330                              <2> ; ------------------------------------------------------------------
   331                              <2> ; os_print_32int -- Prints a 32 bit integer in decimal.
   332                              <2> ; IN: EAX = unsigned integer
   333                              <2> ; OUT: None, registers preserved
   334                              <2> 
   335                              <2> os_print_32int equ 32951
   336                              <2> 
   337                              <2> ; ------------------------------------------------------------------
   338                              <2> ; os_input_string -- Take string from keyboard entry
   339                              <2> ; IN: ES:AX = location of string
   340                              <2> ; OUT: None, registers preserved
   341                              <2> 
   342                              <2> os_input_string equ 32819
   343                              <2> 
   344                              <2> ; ------------------------------------------------------------------
   345                              <2> ; os_input_password -- Take password from keyboard entry
   346                              <2> ; IN: ES:AX = location of string
   347                              <2> ; OUT: None, registers preserved
   348                              <2> 
   349                              <2> os_input_password equ 33077
   350                              <2> 
   351                              <2> ; ------------------------------------------------------------------
   352                              <2> ; os_set_max_input_length -- Set the maximum length for the next string input
   353                              <2> ; IN: AL = maximum number of characters
   354                              <2> ; OUT: None, registers preserved
   355                              <2> 
   356                              <2> os_set_max_input_length equ 33131
   357                              <2> 
   358                              <2> ; ------------------------------------------------------------------
   359                              <2> ; os_input_string_ex -- Take string from keyboard entry
   360                              <2> ; IN: ES:AX = location of string, CH = 0 if normal input, 1 if password input,
   361                              <2> ;     DS:SI = callback on keys where AL = 0 (input: AX = keypress)
   362                              <2> ; OUT: None, registers preserved
   363                              <2> 
   364                              <2> os_input_string_ex equ 33119
   365                              <2> 
   366                              <2> ; ------------------------------------------------------------------
   367                              <2> ; os_color_selector - Pops up a color selector.
   368                              <2> ; IN: None
   369                              <2> ; OUT: color number (0-15)
   370                              <2> 
   371                              <2> os_color_selector equ 33053
   372                              <2> 
   373                              <2> ; ------------------------------------------------------------------
   374                              <2> ; os_temp_box -- Draws a dialog box with up to 5 lines of text.
   375                              <2> ; IN: DS:SI/AX/BX/CX/DX = string locations (or 0 for no display)
   376                              <2> ; OUT: None, registers preserved
   377                              <2> 
   378                              <2> os_temp_box equ 33086
   379                              <2> 
   380                              <2> ; ------------------------------------------------------------------
   381                              <2> ; os_reset_font -- Resets the font to the selected default.
   382                              <2> ; IN/OUT = None, registers preserved
   383                              <2> 
   384                              <2> os_reset_font equ 32990
   385                              <2> 
   386                              <2> ; ------------------------------------------------------------------
   387                              <2> ; os_draw_logo -- Draws the MichalOS logo.
   388                              <2> ; IN: None
   389                              <2> ; OUT: A very beautiful logo :-)
   390                              <2> 
   391                              <2> os_draw_logo equ 32852
   392                              <2> 
   393                              <2> ; ------------------------------------------------------------------
   394                              <2> ; os_draw_icon -- Draws an icon (in the MichalOS format).
   395                              <2> ; IN: DS:SI = address of the icon
   396                              <2> ; OUT: None, registers preserved
   397                              <2> 
   398                              <2> os_draw_icon equ 33023
   399                              <2> 
   400                              <2> ; ------------------------------------------------------------------
   401                              <2> ; os_option_menu -- Show a menu with a list of options
   402                              <2> ; IN: AX = comma-separated list of strings to show (zero-terminated)
   403                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc, left or right pressed
   404                              <2> 
   405                              <2> os_option_menu equ 32876
   406                              <2> 
   407                              <2> ; ==================================================================
   408                              <2> ; MichalOS Graphics functions
   409                              <2> ; Some graphics routines have been borrowed from TachyonOS
   410                              <2> ; ==================================================================
   411                              <2> 
   412                              <2> ; ------------------------------------------------------------------
   413                              <2> ; os_init_graphics_mode -- Initializes graphics mode.
   414                              <2> ; IN/OUT: None, registers preserved
   415                              <2> 
   416                              <2> os_init_graphics_mode equ 33020
   417                              <2> 
   418                              <2> ; ------------------------------------------------------------------
   419                              <2> ; os_init_text_mode -- Deinitializes graphics mode.
   420                              <2> ; IN/OUT: None, registers preserved
   421                              <2> 
   422                              <2> os_init_text_mode equ 33095
   423                              <2> 
   424                              <2> ; ------------------------------------------------------------------
   425                              <2> ; os_set_pixel -- Sets a pixel on the screen to a given value.
   426                              <2> ; IN: ES = destination memory segment, CX = X coordinate, AX = Y coordinate, BL = color
   427                              <2> ; OUT: None, registers preserved
   428                              <2> 
   429                              <2> os_set_pixel equ 33017
   430                              <2> 
   431                              <2> ; ------------------------------------------------------------------
   432                              <2> ; os_draw_line -- Draws a line with the Bresenham's line algorithm.
   433                              <2> ; Translated from an implementation in C (http://www.edepot.com/linebresenham.html)
   434                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour
   435                              <2> ; OUT: None, registers preserved
   436                              <2> 
   437                              <2> os_draw_line equ 32999
   438                              <2> 
   439                              <2> ; ------------------------------------------------------------------
   440                              <2> ; os_draw_rectangle -- Draws a rectangle.
   441                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour, CF = set if filled or clear if not
   442                              <2> ; OUT: None, registers preserved
   443                              <2> 
   444                              <2> os_draw_rectangle equ 33047
   445                              <2> 
   446                              <2> ; ------------------------------------------------------------------
   447                              <2> ; os_draw_polygon -- Draws a freeform shape.
   448                              <2> ; IN: ES = destination memory segment, BH = number of points, BL = colour, SI = location of shape points data
   449                              <2> ; OUT: None, registers preserved
   450                              <2> ; DATA FORMAT: x1, y1, x2, y2, x3, y3, etc
   451                              <2> 
   452                              <2> os_draw_polygon equ 33002
   453                              <2> 
   454                              <2> ; ------------------------------------------------------------------
   455                              <2> ; os_clear_graphics -- Clears the graphics screen with a given color.
   456                              <2> ; IN: ES = destination memory segment, BL = colour to set
   457                              <2> ; OUT: None, registers preserved
   458                              <2> 
   459                              <2> os_clear_graphics equ 33008
   460                              <2> 
   461                              <2> ; ----------------------------------------
   462                              <2> ; os_draw_circle -- draw a circular shape
   463                              <2> ; IN: ES = destination memory segment, AL = colour, BX = radius, CX = middle X, DX = middle y
   464                              <2> ; OUT: None, registers preserved
   465                              <2> 
   466                              <2> os_draw_circle equ 33005
   467                              <2> 
   468                              <2> ; ==================================================================
   469                              <2> ; MichalOS Keyboard input handling functions
   470                              <2> ; ==================================================================
   471                              <2> 
   472                              <2> ; ------------------------------------------------------------------
   473                              <2> ; os_wait_for_key -- Waits for keypress and returns key
   474                              <2> ; Also handles the screensaver. TODO: move the screensaver code to "int.asm"
   475                              <2> ; IN: None
   476                              <2> ; OUT: AX = key pressed, other regs preserved
   477                              <2> 
   478                              <2> os_wait_for_key equ 32786
   479                              <2> 
   480                              <2> ; ------------------------------------------------------------------
   481                              <2> ; os_check_for_key -- Scans keyboard buffer for input, but doesn't wait
   482                              <2> ; Also handles special keyboard shortcuts.
   483                              <2> ; IN: None
   484                              <2> ; OUT: AX = 0 if no key pressed, otherwise scan code
   485                              <2> 
   486                              <2> os_check_for_key equ 32789
   487                              <2> 
   488                              <2> ; ==================================================================
   489                              <2> ; MichalOS Port I/O functions
   490                              <2> ; ==================================================================
   491                              <2> 
   492                              <2> ; ------------------------------------------------------------------
   493                              <2> ; os_serial_port_enable -- Set up the serial port for transmitting data
   494                              <2> ; IN: AX = 0 for normal mode (9600 baud), or 1 for slow mode (1200 baud)
   495                              <2> ; OUT: None, registers preserved
   496                              <2> 
   497                              <2> os_serial_port_enable equ 32954
   498                              <2> 
   499                              <2> ; ------------------------------------------------------------------
   500                              <2> ; os_send_via_serial -- Send a byte via the serial port
   501                              <2> ; IN: AL = byte to send via serial
   502                              <2> ; OUT: AH = Bit 7 clear on success
   503                              <2> 
   504                              <2> os_send_via_serial equ 32861
   505                              <2> 
   506                              <2> ; ------------------------------------------------------------------
   507                              <2> ; os_get_via_serial -- Get a byte from the serial port
   508                              <2> ; IN: None
   509                              <2> ; OUT: AL = byte that was received, AH = Bit 7 clear on success
   510                              <2> 
   511                              <2> os_get_via_serial equ 32864
   512                              <2> 
   513                              <2> ; ==================================================================
   514                              <2> ; MichalOS Disk access functions
   515                              <2> ; ==================================================================
   516                              <2> 
   517                              <2> ; ------------------------------------------------------------------
   518                              <2> ; os_report_free_space -- Returns the amount of free space on disk
   519                              <2> ; IN: None
   520                              <2> ; OUT: AX = Number of sectors free
   521                              <2> 
   522                              <2> os_report_free_space equ 32894
   523                              <2> 
   524                              <2> ; ------------------------------------------------------------------
   525                              <2> ; os_get_file_list -- Generate comma-separated string of files on floppy
   526                              <2> ; IN/OUT: AX = location to store zero-terminated filename string
   527                              <2> 
   528                              <2> os_get_file_list equ 32831
   529                              <2> 
   530                              <2> ; ------------------------------------------------------------------
   531                              <2> ; os_load_file -- Load a file into RAM
   532                              <2> ; IN: AX = location of filename, ES:CX = location in RAM to load file
   533                              <2> ; OUT: BX = file size (in bytes), carry set if file not found
   534                              <2> 
   535                              <2> os_load_file equ 32801
   536                              <2> 
   537                              <2> ; --------------------------------------------------------------------------
   538                              <2> ; os_write_file -- Save (max 64K) file to disk
   539                              <2> ; IN: AX = filename, ES:BX = data location, CX = bytes to write
   540                              <2> ; OUT: Carry clear if OK, set if failure
   541                              <2> 
   542                              <2> os_write_file equ 32915
   543                              <2> 
   544                              <2> ; --------------------------------------------------------------------------
   545                              <2> ; os_file_exists -- Check for presence of file on the floppy
   546                              <2> ; IN: AX = filename location; OUT: carry clear if found, set if not
   547                              <2> 
   548                              <2> os_file_exists equ 32918
   549                              <2> 
   550                              <2> ; --------------------------------------------------------------------------
   551                              <2> ; os_create_file -- Creates a new 0-byte file on the floppy disk
   552                              <2> ; IN: AX = location of filename
   553                              <2> ; OUT: None, registers preserved
   554                              <2> 
   555                              <2> os_create_file equ 32921
   556                              <2> 
   557                              <2> ; --------------------------------------------------------------------------
   558                              <2> ; os_remove_file -- Deletes the specified file from the filesystem
   559                              <2> ; IN: AX = location of filename to remove
   560                              <2> 
   561                              <2> os_remove_file equ 32924
   562                              <2> 
   563                              <2> ; --------------------------------------------------------------------------
   564                              <2> ; os_rename_file -- Change the name of a file on the disk
   565                              <2> ; IN: AX = filename to change, BX = new filename (zero-terminated strings)
   566                              <2> ; OUT: carry set on error
   567                              <2> 
   568                              <2> os_rename_file equ 32927
   569                              <2> 
   570                              <2> ; --------------------------------------------------------------------------
   571                              <2> ; os_get_file_size -- Get file size information for specified file
   572                              <2> ; IN: AX = filename; OUT: EBX = file size in bytes (up to 4GB)
   573                              <2> ; or carry set if file not found
   574                              <2> 
   575                              <2> os_get_file_size equ 32930
   576                              <2> 
   577                              <2> ; --------------------------------------------------------------------------
   578                              <2> ; os_get_file_datetime -- Get file write time/date information for specified file
   579                              <2> ; IN: AX = filename; OUT: BX = time of creation (HHHHHMMMMMMSSSSS), CX = date of creation (YYYYYYYMMMMDDDDD)
   580                              <2> ; or carry set if file not found
   581                              <2> 
   582                              <2> os_get_file_datetime equ 33011
   583                              <2> 
   584                              <2> ; --------------------------------------------------------------------------
   585                              <2> ; os_get_boot_disk -- Returns the boot disk number.
   586                              <2> ; IN: None
   587                              <2> ; OUT: DL = boot disk number for use in INT 13h calls
   588                              <2> 
   589                              <2> os_get_boot_disk equ 33062
   590                              <2> 
   591                              <2> ; ==================================================================
   592                              <2> ; MichalOS Miscellaneous functions
   593                              <2> ; ==================================================================
   594                              <2> 
   595                              <2> ; ------------------------------------------------------------------
   596                              <2> ; os_read_config_byte -- Reads a byte from the config
   597                              <2> ; IN: BX = offset
   598                              <2> ; OUT: AL = value
   599                              <2> 
   600                              <2> os_read_config_byte equ 33134
   601                              <2> 
   602                              <2> ; ------------------------------------------------------------------
   603                              <2> ; os_read_config_word -- Reads a word from the config
   604                              <2> ; IN: BX = offset
   605                              <2> ; OUT: AX = value
   606                              <2> 
   607                              <2> os_read_config_word equ 33137
   608                              <2> 
   609                              <2> ; ------------------------------------------------------------------
   610                              <2> ; os_write_config_byte -- Writes a byte to the config
   611                              <2> ; NOTE: This will only affect the config in memory,
   612                              <2> ; run os_save_config to save the changes to disk!
   613                              <2> ; IN: BX = offset, AL = value
   614                              <2> ; OUT: None, registers preserved
   615                              <2> 
   616                              <2> os_write_config_byte equ 33140
   617                              <2> 
   618                              <2> ; ------------------------------------------------------------------
   619                              <2> ; os_write_config_word -- Writes a byte to the config
   620                              <2> ; NOTE: This will only affect the config in memory,
   621                              <2> ; run os_save_config to save the changes to disk!
   622                              <2> ; IN: BX = offset, AX = value
   623                              <2> ; OUT: None, registers preserved
   624                              <2> 
   625                              <2> os_write_config_word equ 33143
   626                              <2> 
   627                              <2> ; ------------------------------------------------------------------
   628                              <2> ; os_save_config -- Saves the current config to disk
   629                              <2> ; OUT: Carry set if error
   630                              <2> 
   631                              <2> os_save_config equ 33146
   632                              <2> 
   633                              <2> ; ------------------------------------------------------------------
   634                              <2> ; os_exit -- Exits the application, launches another one (if possible)
   635                              <2> ; IN: AX = if not 0, then ptr to filename of application to be launched,
   636                              <2> ;     BX = 1 if the application calling os_exit should be re-launched after
   637                              <2> ;     the requested application exits
   638                              <2> ; OUT: None, register preserved
   639                              <2> 
   640                              <2> os_exit equ 32780
   641                              <2> 
   642                              <2> ; ------------------------------------------------------------------
   643                              <2> ; os_clear_registers -- Clear all registers
   644                              <2> ; IN: None
   645                              <2> ; OUT: Cleared registers
   646                              <2> 
   647                              <2> os_clear_registers equ 32975
   648                              <2> 
   649                              <2> ; ------------------------------------------------------------------
   650                              <2> ; os_get_os_name -- Get the OS name string
   651                              <2> ; IN: None
   652                              <2> ; OUT: DS:SI = OS name string, zero-terminated
   653                              <2> 
   654                              <2> os_get_os_name equ 33083
   655                              <2> 
   656                              <2> ; ------------------------------------------------------------------
   657                              <2> ; os_get_memory -- Gets the amount of system RAM.
   658                              <2> ; IN: None
   659                              <2> ; OUT: AX = conventional memory (in kB), BX = high memory (in kB)
   660                              <2> 
   661                              <2> os_get_memory equ 33050
   662                              <2> 
   663                              <2> ; ------------------------------------------------------------------
   664                              <2> ; os_int_1Ah -- Middle-man between the INT 1Ah call and the kernel/apps (used for timezones).
   665                              <2> ; IN/OUT: same as int 1Ah
   666                              <2> 
   667                              <2> os_int_1Ah equ 33032
   668                              <2> 
   669                              <2> ; ==================================================================
   670                              <2> ; MichalOS/MikeOS 4.5 BASIC interpreter
   671                              <2> ; ==================================================================
   672                              <2> 
   673                              <2> ; ------------------------------------------------------------------
   674                              <2> ; The BASIC interpreter execution starts here -- a parameter string
   675                              <2> ; is passed in SI and copied into the first string, unless SI = 0
   676                              <2> 
   677                              <2> os_run_basic equ 32963
   678                              <2> 
   679                              <2> ; ==================================================================
   680                              <2> ; MichalOS Math functions
   681                              <2> ; ==================================================================
   682                              <2> 
   683                              <2> ; ------------------------------------------------------------------
   684                              <2> ; os_get_random -- Return a random integer between low and high (inclusive)
   685                              <2> ; IN: AX = low integer, BX = high integer
   686                              <2> ; OUT: CX = random integer
   687                              <2> 
   688                              <2> os_get_random equ 32948
   689                              <2> 
   690                              <2> ; ------------------------------------------------------------------
   691                              <2> ; os_bcd_to_int -- Converts a binary coded decimal number to an integer
   692                              <2> ; IN: AL = BCD number
   693                              <2> ; OUT: AX = integer value
   694                              <2> 
   695                              <2> os_bcd_to_int equ 32846
   696                              <2> 
   697                              <2> ; ------------------------------------------------------------------
   698                              <2> ; os_int_to_bcd -- Converts an integer to a binary coded decimal number
   699                              <2> ; IN: AL = integer value
   700                              <2> ; OUT: AL = BCD number
   701                              <2> 
   702                              <2> os_int_to_bcd equ 33035
   703                              <2> 
   704                              <2> ; ------------------------------------------------------------------
   705                              <2> ; os_math_power -- Calculates EAX^EBX.
   706                              <2> ; IN: EAX^EBX = input
   707                              <2> ; OUT: EAX = result
   708                              <2> 
   709                              <2> os_math_power equ 33071
   710                              <2> 
   711                              <2> ; ------------------------------------------------------------------
   712                              <2> ; os_math_root -- Approximates the EBXth root of EAX.
   713                              <2> ; IN: EAX = input, EBX = root
   714                              <2> ; OUT: EAX(EDX = 0) = result; EAX to EDX = range
   715                              <2> 
   716                              <2> os_math_root equ 33074
   717                              <2> 
   718                              <2> ; ==================================================================
   719                              <2> ; MichalOS String manipulation functions
   720                              <2> ; ==================================================================
   721                              <2> 
   722                              <2> ; ------------------------------------------------------------------
   723                              <2> ; os_string_encrypt -- Encrypts a string using a totally military-grade encryption algorithm
   724                              <2> ; IN: DS:SI = Input string/Output string
   725                              <2> ; OUT: None, registers preserved
   726                              <2> 
   727                              <2> os_string_encrypt equ 33014
   728                              <2> 
   729                              <2> ; ------------------------------------------------------------------
   730                              <2> ; os_string_add -- Add a string on top of another string
   731                              <2> ; IN: DS:AX = Main string, DS:BX = Added string
   732                              <2> ; OUT: None, registers preserved
   733                              <2> 
   734                              <2> os_string_add equ 32897
   735                              <2> 
   736                              <2> ; ------------------------------------------------------------------
   737                              <2> ; os_string_length -- Return length of a string
   738                              <2> ; IN: DS:AX = string location
   739                              <2> ; OUT AX = length (other regs preserved)
   740                              <2> 
   741                              <2> os_string_length equ 32810
   742                              <2> 
   743                              <2> ; ------------------------------------------------------------------
   744                              <2> ; os_string_reverse -- Reverse the characters in a string
   745                              <2> ; IN: DS:SI = string location
   746                              <2> ; OUT: None, registers preserved
   747                              <2> 
   748                              <2> os_string_reverse equ 32939
   749                              <2> 
   750                              <2> ; ------------------------------------------------------------------
   751                              <2> ; os_find_char_in_string -- Find location of character in a string
   752                              <2> ; IN: DS:SI = string location, AL = character to find
   753                              <2> ; OUT: AX = location in string, or 0 if char not present
   754                              <2> 
   755                              <2> os_find_char_in_string equ 32867
   756                              <2> 
   757                              <2> ; ------------------------------------------------------------------
   758                              <2> ; os_string_uppercase -- Convert zero-terminated string to upper case
   759                              <2> ; IN: DS:AX = string location
   760                              <2> ; OUT: None, registers preserved
   761                              <2> 
   762                              <2> os_string_uppercase equ 32813
   763                              <2> 
   764                              <2> ; ------------------------------------------------------------------
   765                              <2> ; os_string_lowercase -- Convert zero-terminated string to lower case
   766                              <2> ; IN: DS:AX = string location
   767                              <2> ; OUT: None, registers preserved
   768                              <2> 
   769                              <2> os_string_lowercase equ 32816
   770                              <2> 
   771                              <2> ; ------------------------------------------------------------------
   772                              <2> ; os_string_copy -- Copy one string into another
   773                              <2> ; IN: DS:SI = source, ES:DI = destination (programmer ensure sufficient room)
   774                              <2> ; OUT: None, registers preserved
   775                              <2> 
   776                              <2> os_string_copy equ 32822
   777                              <2> 
   778                              <2> ; ------------------------------------------------------------------
   779                              <2> ; os_string_join -- Join two strings into a third string
   780                              <2> ; IN: DS:AX = string one, DS:BX = string two, ES:CX = destination string
   781                              <2> ; OUT: None, registers preserved
   782                              <2> 
   783                              <2> os_string_join equ 32828
   784                              <2> 
   785                              <2> ; ------------------------------------------------------------------
   786                              <2> ; os_string_chomp -- Strip leading and trailing spaces from a string
   787                              <2> ; IN: DS:AX = string location
   788                              <2> ; OUT: None, registers preserved
   789                              <2> 
   790                              <2> os_string_chomp equ 32837
   791                              <2> 
   792                              <2> ; ------------------------------------------------------------------
   793                              <2> ; os_string_compare -- See if two strings match
   794                              <2> ; IN: DS:SI = string one, DS:DI = string two
   795                              <2> ; OUT: carry set if same, clear if different
   796                              <2> 
   797                              <2> os_string_compare equ 32834
   798                              <2> 
   799                              <2> ; ------------------------------------------------------------------
   800                              <2> ; os_string_parse -- Take string (eg "run foo bar baz") and return
   801                              <2> ; pointers to zero-terminated strings (eg AX = "run", BX = "foo" etc.)
   802                              <2> ; IN: DS:SI = string
   803                              <2> ; OUT: AX, BX, CX, DX = individual strings
   804                              <2> 
   805                              <2> os_string_parse equ 32960
   806                              <2> 
   807                              <2> ; ------------------------------------------------------------------
   808                              <2> ; os_string_to_int -- Convert decimal string to integer value
   809                              <2> ; IN: DS:SI = string location (max 5 chars, up to '65535')
   810                              <2> ; OUT: AX = number
   811                              <2> 
   812                              <2> os_string_to_int equ 32942
   813                              <2> 
   814                              <2> ; ------------------------------------------------------------------
   815                              <2> ; os_string_to_hex -- Convert hexadecimal string to integer value
   816                              <2> ; IN: DS:SI = string location (max 8 chars, up to 'FFFFFFFF')
   817                              <2> ; OUT: EAX = number
   818                              <2> 
   819                              <2> os_string_to_hex equ 32840
   820                              <2> 
   821                              <2> ; ------------------------------------------------------------------
   822                              <2> ; os_int_to_string -- Convert unsigned integer to string
   823                              <2> ; IN: AX = unsigned int
   824                              <2> ; OUT: DS:AX = string location
   825                              <2> 
   826                              <2> os_int_to_string equ 32792
   827                              <2> 
   828                              <2> ; ------------------------------------------------------------------
   829                              <2> ; os_sint_to_string -- Convert signed integer to string
   830                              <2> ; IN: AX = signed int
   831                              <2> ; OUT: DS:AX = string location
   832                              <2> 
   833                              <2> os_sint_to_string equ 32957
   834                              <2> 
   835                              <2> ; ------------------------------------------------------------------
   836                              <2> ; os_get_time_string -- Get current time in a string (eg '10:25')
   837                              <2> ; IN: ES:BX = string location
   838                              <2> ; OUT: None, registers preserved
   839                              <2> 
   840                              <2> os_get_time_string equ 32849
   841                              <2> 
   842                              <2> ; ------------------------------------------------------------------
   843                              <2> ; os_get_date_string -- Get current date in a string (eg '12/31/2007')
   844                              <2> ; IN: ES:BX = string location
   845                              <2> ; OUT: None, registers preserved
   846                              <2> 
   847                              <2> os_get_date_string equ 32858
   848                              <2> 
   849                              <2> ; ------------------------------------------------------------------
   850                              <2> ; os_string_tokenize -- Reads tokens separated by specified char from
   851                              <2> ; a string. Returns pointer to next token, or 0 if none left
   852                              <2> ; IN: AL = separator char, DS:SI = beginning
   853                              <2> ; OUT: DI = next token or 0 if none
   854                              <2> 
   855                              <2> os_string_tokenize equ 32972
   856                              <2> 
   857                              <2> ; ------------------------------------------------------------------
   858                              <2> ; os_string_callback_tokenizer -- Prints a token from string, requests are done by callback
   859                              <2> ; IN: DS:AX = comma-separated string
   860                              <2> ; OUT: AL = AH = max length of any token, CX = number of entries in the list,
   861                              <2> ;      DX:SI = callback location (if C clear, accepts CX as entry ID, prints out result)
   862                              <2> 
   863                              <2> os_string_callback_tokenizer equ 33128
   864                              <2> 
   865                              <2> ; ------------------------------------------------------------------
   866                              <2> ; os_32int_to_string -- Converts an unsigned 32-bit integer into a string
   867                              <2> ; IN: EAX = unsigned int
   868                              <2> ; OUT: DS:AX = string location
   869                              <2> 
   870                              <2> os_32int_to_string equ 33059
   871                              <2> 
   872                              <2> ; ------------------------------------------------------------------
   873                              <2> ; os_string_to_32int -- Converts a string into a 32-bit integer
   874                              <2> ; IN: DS:SI = string location
   875                              <2> ; OUT: EAX = unsigned integer
   876                              <2> 
   877                              <2> os_string_to_32int equ 33068
   878                              <2> 
   879                              <2> ; ==================================================================
   880                              <2> ; MichalOS ZX7 decompression routine
   881                              <2> ; ==================================================================
   882                              <2> 
   883                              <2> ; ------------------------------------------------------------------
   884                              <2> ; os_decompress_zx7 -- Decompresses ZX7-packed data.
   885                              <2> ; IN: DS:SI = source, ES:DI = destination
   886                              <2> ; OUT: None, registers preserved
   887                              <2> 
   888                              <2> os_decompress_zx7 equ 33038
   889                              <2> 
   890                              <2> ; ==================================================================
   891                              <2> ; MichalOS Interrupt management & app timer functions
   892                              <2> ; ==================================================================
   893                              <2> 
   894                              <2> ; -----------------------------------------------------------------
   895                              <2> ; os_modify_int_handler -- Change location of interrupt handler
   896                              <2> ; IN: CL = int number, DI:SI = handler location
   897                              <2> ; OUT: None, registers preserved
   898                              <2> 
   899                              <2> os_modify_int_handler equ 33056
   900                              <2> 
   901                              <2> ; -----------------------------------------------------------------
   902                              <2> ; os_get_int_handler -- Change location of interrupt handler
   903                              <2> ; IN: CL = int number
   904                              <2> ; OUT: DI:SI = handler location
   905                              <2> 
   906                              <2> os_get_int_handler equ 33080
   907                              <2> 
   908                              <2> ; ------------------------------------------------------------------
   909                              <2> ; os_pause -- Delay execution for a specified number of ticks (18.2 Hz by default)
   910                              <2> ; IN: AX = amount of ticks to wait
   911                              <2> ; OUT: None, registers preserved
   912                              <2> 
   913                              <2> os_pause equ 32804
   914                              <2> 
   915                              <2> ; -----------------------------------------------------------------
   916                              <2> ; os_attach_app_timer -- Attach a timer interrupt to an application and sets the timer speed
   917                              <2> ; Formula: speed = (105000000 / 88) / frequency
   918                              <2> ; IN: DS:SI = handler location, CX = speed
   919                              <2> ; OUT: None, registers preserved
   920                              <2> 
   921                              <2> os_attach_app_timer equ 32969
   922                              <2> 
   923                              <2> ; -----------------------------------------------------------------
   924                              <2> ; os_return_app_timer -- Returns the timer interrupt back to the system and resets the timer speed
   925                              <2> ; IN/OUT: None, registers preserved
   926                              <2> 
   927                              <2> os_return_app_timer equ 32987
   928                              <2> 
   929                              <2> ; -----------------------------------------------------------------
   930                              <2> ; os_set_timer_speed -- Sets the timer's trigger speed.
   931                              <2> ; Formula: speed = (105000000 / 88) / frequency
   932                              <2> ; IN: CX = speed
   933                              <2> ; OUT: Nothing, registers preserved
   934                              <2> 
   935                              <2> os_set_timer_speed equ 32891
   936                              <2> 
   937                              <2> ; ==================================================================
   938                              <2> ; MichalOS Low-level disk driver
   939                              <2> ; ==================================================================
   940                              <2> 
   941                              <2> ; --------------------------------------------------------------------------
   942                              <2> ; os_disk_read_sector -- Read a single sector from disk
   943                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   944                              <2> 
   945                              <2> os_disk_read_sector equ 33092
   946                              <2> 
   947                              <2> ; --------------------------------------------------------------------------
   948                              <2> ; os_disk_read_multiple_sectors -- Read multiple sectors from disk
   949                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   950                              <2> 
   951                              <2> os_disk_read_multiple_sectors equ 33104
   952                              <2> 
   953                              <2> ; --------------------------------------------------------------------------
   954                              <2> ; os_disk_write_sector -- Write a single sector to disk
   955                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   956                              <2> 
   957                              <2> os_disk_write_sector equ 33098
   958                              <2> 
   959                              <2> ; --------------------------------------------------------------------------
   960                              <2> ; os_disk_write_multiple_sectors -- Write multiple sectors to disk
   961                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   962                              <2> 
   963                              <2> os_disk_write_multiple_sectors equ 33116
   964                              <2> 
    10                              <1> 
    11                              <1> %macro oscall 1
    12                              <1> 	mov bp, %1
    13                              <1> 	int 40h
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> ; -----------------------------------------------------------------
     6                                  	
     7                                  start:
     8 00000000 E88E05                  	call draw_background
     9 00000003 BF[BF06]                	mov di, buffer
    10 00000006 B82007                  	mov ax, 0720h
    11 00000009 B9D007                  	mov cx, 80 * 25
    12 0000000C F3AB                    	rep stosw
    13                                  	
    14                                  .loop:
    15 0000000E E8F205                  	call sub_draw_screen	
    16 00000011 E8(1280)                	call os_wait_for_key
    17                                  	
    18 00000014 80FC48                  	cmp ah, 72
    19 00000017 0F846F01                	je .go_up
    20                                  	
    21 0000001B 80FC4B                  	cmp ah, 75
    22 0000001E 0F84B901                	je .go_left
    23                                  	
    24 00000022 80FC4D                  	cmp ah, 77
    25 00000025 0F84DD01                	je .go_right
    26                                  	
    27 00000029 80FC50                  	cmp ah, 80
    28 0000002C 0F848001                	je .go_down
    29                                  
    30 00000030 3D090F                  	cmp ax, 0F09h	; Tab
    31 00000033 0F84E401                	je .go_far_right
    32                                  	
    33 00000037 3D000F                  	cmp ax, 0F00h	; Shift + Tab
    34 0000003A 0F84B201                	je .go_far_left
    35                                  	
    36 0000003E 3C08                    	cmp al, 8
    37 00000040 0F843001                	je .backspace
    38                                  	
    39 00000044 3C0D                    	cmp al, 13
    40 00000046 0F846601                	je .go_down
    41                                  	
    42 0000004A 80FC3B                  	cmp ah, 59
    43 0000004D 7438                    	je .file_menu
    44                                  	
    45 0000004F 80FC3C                  	cmp ah, 60
    46 00000052 747C                    	je .new_attrib
    47                                  	
    48 00000054 80FC3D                  	cmp ah, 61
    49 00000057 0F84E500                	je .fill_attrib
    50                                  	
    51 0000005B 80FC3E                  	cmp ah, 62
    52 0000005E 0F842A04                	je char_picker
    53                                  
    54 00000062 80FC3F                  	cmp ah, 63
    55 00000065 744B                    	je .paste_char
    56                                  	
    57 00000067 80FC40                  	cmp ah, 64
    58 0000006A 7454                    	je .fill_char
    59                                  	
    60 0000006C 80FC86                  	cmp ah, 134
    61 0000006F 0F84BE01                	je .help
    62                                  	
    63 00000073 84C0                    	test al, al
    64 00000075 7497                    	jz .loop
    65                                  	
    66 00000077 3C1B                    	cmp al, 27
    67 00000079 740B                    	je .exit
    68                                  	
    69 0000007B E80F06                  	call sub_get_mem_ptr
    70 0000007E 8A26[BE06]              	mov ah, [current_attrib]
    71 00000082 AB                      	stosw
    72                                  	
    73 00000083 E98001                  	jmp .go_right
    74                                  	
    75                                  .exit:
    76 00000086 C3                      	ret	
    77                                  
    78                                  .file_menu:
    79 00000087 B8[B303]                	mov ax, .file_list
    80 0000008A E8(6C80)                	call os_option_menu
    81                                  	
    82 0000008D 0F827DFF                	jc .loop
    83                                  	
    84 00000091 83F801                  	cmp ax, 1
    85 00000094 0F845F02                	je .new
    86                                  	
    87 00000098 83F802                  	cmp ax, 2
    88 0000009B 0F846802                	je .open
    89                                  	
    90 0000009F 83F803                  	cmp ax, 3
    91 000000A2 0F84AB02                	je .save
    92                                  	
    93 000000A6 83F804                  	cmp ax, 4
    94 000000A9 0F84DF02                	je .save_as
    95                                  	
    96 000000AD 83F805                  	cmp ax, 5
    97 000000B0 74D4                    	je .exit
    98                                  
    99                                  .paste_char:
   100 000000B2 8A26[BE06]              	mov ah, [current_attrib]
   101 000000B6 A0[9005]                	mov al, [char_picker.selected_char]
   102 000000B9 E8D105                  	call sub_get_mem_ptr
   103 000000BC AB                      	stosw
   104 000000BD E94601                  	jmp .go_right
   105                                  
   106                                  .fill_char:
   107 000000C0 BF[BF06]                	mov di, buffer
   108 000000C3 B9D007                  	mov cx, 80 * 25
   109 000000C6 A0[9005]                	mov al, [char_picker.selected_char]
   110                                  	
   111                                  .fill_char_loop:
   112 000000C9 AA                      	stosb
   113 000000CA 47                      	inc di
   114                                  	
   115 000000CB E2FC                    	loop .fill_char_loop
   116                                  	
   117 000000CD E93EFF                  	jmp .loop
   118                                  	
   119                                  	
   120                                  .new_attrib:
   121 000000D0 B8[FC00]                	mov ax, .color_msg
   122 000000D3 BB[2301]                	mov bx, .color2_msg
   123 000000D6 31C9                    	xor cx, cx
   124 000000D8 31D2                    	xor dx, dx
   125 000000DA E8(3980)                	call os_dialog_box
   126                                  	
   127 000000DD E82305                  	call sub_draw_screen
   128                                  
   129 000000E0 E8(1D81)                	call os_color_selector
   130 000000E3 0F8227FF                	jc .loop
   131 000000E7 88C3                    	mov bl, al
   132                                  	
   133 000000E9 E8(1D81)                	call os_color_selector
   134 000000EC 0F821EFF                	jc .loop
   135 000000F0 C0E004                  	shl al, 4
   136 000000F3 00C3                    	add bl, al
   137                                  	
   138 000000F5 881E[BE06]              	mov [current_attrib], bl
   139 000000F9 E912FF                  	jmp .loop
   140                                  	
   141 000000FC 466972737420796F75-     	.color_msg	db 'First you will pick a foreground color', 0
   141 00000105 2077696C6C20706963-
   141 0000010E 6B206120666F726567-
   141 00000117 726F756E6420636F6C-
   141 00000120 6F7200             
   142 00000123 616E64207468656E20-     	.color2_msg	db 'and then a background color.', 0
   142 0000012C 61206261636B67726F-
   142 00000135 756E6420636F6C6F72-
   142 0000013E 2E00               
   143                                  
   144                                  .fill_attrib:
   145 00000140 B8[FC00]                	mov ax, .color_msg
   146 00000143 BB[2301]                	mov bx, .color2_msg
   147 00000146 31C9                    	xor cx, cx
   148 00000148 31D2                    	xor dx, dx
   149 0000014A E8(3980)                	call os_dialog_box
   150                                  	
   151 0000014D E8B304                  	call sub_draw_screen
   152                                  
   153 00000150 E8(1D81)                	call os_color_selector
   154 00000153 0F82B7FE                	jc .loop
   155 00000157 88C3                    	mov bl, al
   156                                  	
   157 00000159 E8(1D81)                	call os_color_selector
   158 0000015C 0F82AEFE                	jc .loop
   159 00000160 C0E004                  	shl al, 4
   160 00000163 00C3                    	add bl, al
   161                                  	
   162 00000165 BF[C006]                	mov di, buffer + 1
   163 00000168 B9D007                  	mov cx, 80 * 25
   164 0000016B 88D8                    	mov al, bl
   165                                  	
   166                                  .fill_loop:
   167 0000016D AA                      	stosb
   168 0000016E 47                      	inc di
   169                                  	
   170 0000016F E2FC                    	loop .fill_loop
   171                                  	
   172 00000171 E99AFE                  	jmp .loop
   173                                  
   174                                  	
   175                                  .backspace:
   176 00000174 FE0E[BB06]              	dec byte [cursor_x]
   177 00000178 803E[BB06]00            	cmp byte [cursor_x], 0
   178 0000017D 0F8C8500                	jl .go_right
   179 00000181 E80905                  	call sub_get_mem_ptr
   180 00000184 B020                    	mov al, 32
   181 00000186 AA                      	stosb
   182 00000187 E984FE                  	jmp .loop
   183                                  
   184                                  .go_up:
   185 0000018A FE0E[BC06]              	dec byte [cursor_y]
   186 0000018E A0[BC06]                	mov al, [cursor_y]
   187 00000191 3A06[BD06]              	cmp al, [cursor_y_offset]
   188 00000195 0F8D75FE                	jge .loop
   189                                  	
   190 00000199 FE0E[BD06]              	dec byte [cursor_y_offset]
   191 0000019D 3CFF                    	cmp al, 255
   192 0000019F 0F856BFE                	jne .loop
   193                                  	
   194 000001A3 C606[BD06]02            	mov byte [cursor_y_offset], 2
   195 000001A8 C606[BC06]18            	mov byte [cursor_y], 24
   196 000001AD E95EFE                  	jmp .loop
   197                                  
   198                                  .go_down:
   199 000001B0 FE06[BC06]              	inc byte [cursor_y]
   200 000001B4 A0[BC06]                	mov al, [cursor_y]
   201 000001B7 8A1E[BD06]              	mov bl, [cursor_y_offset]
   202 000001BB 80C317                  	add bl, 23
   203 000001BE 38D8                    	cmp al, bl
   204 000001C0 0F8C4AFE                	jl .loop
   205                                  	
   206 000001C4 FE06[BD06]              	inc byte [cursor_y_offset]
   207 000001C8 3C19                    	cmp al, 25
   208 000001CA 0F8540FE                	jne .loop
   209                                  	
   210 000001CE C606[BD06]00            	mov byte [cursor_y_offset], 0
   211 000001D3 C606[BC06]00            	mov byte [cursor_y], 0
   212 000001D8 E933FE                  	jmp .loop
   213                                  	
   214                                  .go_left:
   215 000001DB FE0E[BB06]              	dec byte [cursor_x]
   216 000001DF 803E[BB06]00            	cmp byte [cursor_x], 0
   217 000001E4 0F8D26FE                	jge .loop
   218                                  	
   219 000001E8 C606[BB06]4F            	mov byte [cursor_x], 79
   220 000001ED E91EFE                  	jmp .loop
   221                                  	
   222                                  .go_far_left:
   223 000001F0 802E[BB06]08            	sub byte [cursor_x], 8
   224 000001F5 803E[BB06]00            	cmp byte [cursor_x], 0
   225 000001FA 0F8D10FE                	jge .loop
   226                                  	
   227 000001FE 8006[BB06]50            	add byte [cursor_x], 80
   228 00000203 E908FE                  	jmp .loop
   229                                  	
   230                                  .go_right:
   231 00000206 FE06[BB06]              	inc byte [cursor_x]
   232 0000020A 803E[BB06]50            	cmp byte [cursor_x], 80
   233 0000020F 0F85FBFD                	jne .loop
   234                                  	
   235 00000213 C606[BB06]00            	mov byte [cursor_x], 0
   236 00000218 E9F3FD                  	jmp .loop
   237                                  	
   238                                  .go_far_right:
   239 0000021B 8006[BB06]08            	add byte [cursor_x], 8
   240 00000220 803E[BB06]50            	cmp byte [cursor_x], 80
   241 00000225 0F8CE5FD                	jl .loop
   242                                  	
   243 00000229 802E[BB06]50            	sub byte [cursor_x], 80
   244 0000022E E9DDFD                  	jmp .loop
   245                                  	
   246                                  .help:
   247 00000231 B8[4002]                	mov ax, .help_list
   248 00000234 BB[E302]                	mov bx, .help_msg
   249 00000237 B9[F602]                	mov cx, .help_msg2
   250 0000023A E8(A880)                	call os_list_dialog
   251 0000023D E9CEFD                  	jmp .loop
   252                                  	
   253 00000240 5B46315D202D204669-     	.help_list		db '[F1] - File,[F2] - Color picker,[F3] - Fill screen with color,[F4] - Character picker,[F5] - Use the chosen character,[F6] - Fill screen with the chosen character', 0
   253 00000249 6C652C5B46325D202D-
   253 00000252 20436F6C6F72207069-
   253 0000025B 636B65722C5B46335D-
   253 00000264 202D2046696C6C2073-
   253 0000026D 637265656E20776974-
   253 00000276 6820636F6C6F722C5B-
   253 0000027F 46345D202D20436861-
   253 00000288 726163746572207069-
   253 00000291 636B65722C5B46355D-
   253 0000029A 202D20557365207468-
   253 000002A3 652063686F73656E20-
   253 000002AC 636861726163746572-
   253 000002B5 2C5B46365D202D2046-
   253 000002BE 696C6C207363726565-
   253 000002C7 6E2077697468207468-
   253 000002D0 652063686F73656E20-
   253 000002D9 636861726163746572-
   253 000002E2 00                 
   254 000002E3 48656C7066756C2073-     	.help_msg		db 'Helpful shortcuts:', 0
   254 000002EC 686F7274637574733A-
   254 000002F5 00                 
   255 000002F6 00                      	.help_msg2		db 0
   256                                  	
   257                                  .new:
   258 000002F7 BF[BF06]                	mov di, buffer
   259                                  	clr al
    31 000002FA 30C0                <1>  xor %1, %1
   260 000002FC B90001                  	mov cx, 256
   261 000002FF F3AA                    	rep stosb
   262                                  	
   263 00000301 BE[BF06]                	mov si, buffer
   264 00000304 E9F9FC                  	jmp start
   265                                  	
   266                                  .open:
   267 00000307 BB[5804]                	mov bx, .extension_number
   268 0000030A E8(6281)                	call os_file_selector_filtered		; Get filename
   269 0000030D 0F82EFFC                	jc start
   270                                  	
   271 00000311 89C3                    	mov bx, ax			; Save filename for now
   272                                  
   273 00000313 89C7                    	mov di, ax
   274                                  
   275 00000315 E8(2A80)                	call os_string_length
   276 00000318 01C7                    	add di, ax			; DI now points to last char in filename
   277                                  
   278 0000031A 4F                      	dec di
   279 0000031B 4F                      	dec di
   280 0000031C 4F                      	dec di				; ...and now to first char of extension!
   281                                  	
   282 0000031D 60                      	pusha
   283                                  	
   284 0000031E BE[5904]                	mov si, .asc_extension
   285 00000321 B90300                  	mov cx, 3
   286 00000324 F3A6                    	rep cmpsb			; Does the extension contain 'PCX'?
   287 00000326 7410                    	je .valid_asc_extension		; Skip ahead if so
   288                                  	
   289 00000328 61                      	popa
   290                                  					; Otherwise show error dialog
   291                                  	clr dx				; One button for dialog box
    31 00000329 31D2                <1>  xor %1, %1
   292 0000032B B8[5D04]                	mov ax, .err_string
   293 0000032E BB[7004]                	mov bx, .err_string2
   294                                  	clr cx
    31 00000331 31C9                <1>  xor %1, %1
   295 00000333 E8(3980)                	call os_dialog_box
   296 00000336 EBCF                    	jmp .open
   297                                  	
   298                                  .valid_asc_extension:
   299 00000338 61                      	popa
   300 00000339 89D8                    	mov ax, bx
   301 0000033B 89C6                    	mov si, ax
   302 0000033D BF[0B04]                	mov di, .load_file
   303 00000340 E8(3680)                	call os_string_copy
   304 00000343 B9[BF06]                	mov cx, buffer
   305 00000346 E8(2180)                	call os_load_file
   306 00000349 C606[5704]01            	mov byte [.save_flag], 1
   307 0000034E E9BDFC                  	jmp .loop
   308                                  	
   309                                  .save:
   310 00000351 803E[5704]00            	cmp byte [.save_flag], 0
   311 00000356 7434                    	je .save_as
   312                                  	
   313 00000358 B8[0B04]                	mov ax, .load_file
   314 0000035B E8(9C80)                	call os_remove_file
   315 0000035E 721D                    	jc .save_error
   316                                  	
   317 00000360 B8[0B04]                	mov ax, .load_file
   318 00000363 B9A00F                  	mov cx, 80 * 25 * 2
   319 00000366 BB[BF06]                	mov bx, buffer
   320 00000369 E8(9380)                	call os_write_file
   321 0000036C 720F                    	jc .save_error
   322                                  	
   323                                  .save_ok:
   324 0000036E B8[8004]                	mov ax, .save_ok_msg
   325                                  	clr bx
    31 00000371 31DB                <1>  xor %1, %1
   326                                  	clr cx
    31 00000373 31C9                <1>  xor %1, %1
   327                                  	clr dx
    31 00000375 31D2                <1>  xor %1, %1
   328 00000377 E8(3980)                	call os_dialog_box
   329                                  	
   330 0000037A E991FC                  	jmp .loop
   331                                  
   332                                  .save_error:
   333 0000037D B8[D403]                	mov ax, .save_error_msg
   334                                  	clr bx
    31 00000380 31DB                <1>  xor %1, %1
   335                                  	clr cx
    31 00000382 31C9                <1>  xor %1, %1
   336                                  	clr dx
    31 00000384 31D2                <1>  xor %1, %1
   337 00000386 E8(3980)                	call os_dialog_box
   338 00000389 E982FC                  	jmp .loop
   339                                  	
   340                                  .save_as:
   341 0000038C B8[1B04]                	mov ax, .filenamebuff
   342 0000038F BB[EB03]                	mov bx, .save_msg
   343 00000392 E8(A580)                	call os_input_dialog
   344                                  	
   345 00000395 E8(2D80)                	call os_string_uppercase
   346                                  	
   347 00000398 B9A00F                  	mov cx, 80 * 25 * 2
   348 0000039B BB[BF06]                	mov bx, buffer
   349 0000039E E8(9380)                	call os_write_file
   350 000003A1 72DA                    	jc .save_error
   351                                  	
   352 000003A3 C606[5704]01            	mov byte [.save_flag], 1
   353 000003A8 BE[1B04]                	mov si, .filenamebuff
   354 000003AB BF[0B04]                	mov di, .load_file
   355 000003AE E8(3680)                	call os_string_copy
   356 000003B1 EBBB                    	jmp .save_ok
   357                                  
   358 000003B3 4E65772C4F70656E2E-     	.file_list			db 'New,Open...,Save,Save as...,Exit', 0
   358 000003BC 2E2E2C536176652C53-
   358 000003C5 6176652061732E2E2E-
   358 000003CE 2C4578697400       
   359 000003D4 4572726F7220736176-     	.save_error_msg		db 'Error saving the file!', 0
   359 000003DD 696E67207468652066-
   359 000003E6 696C652100         
   360 000003EB 456E74657220612066-     	.save_msg			db 'Enter a filename (PICTURE.ASC):', 0
   360 000003F4 696C656E616D652028-
   360 000003FD 504943545552452E41-
   360 00000406 5343293A00         
   361 0000040B 556E6E616D65642070-     	.load_file			db 'Unnamed picture', 0
   361 00000414 69637475726500     
   362 0000041B 00<rep 3Ch>             	.filenamebuff		times 60 db 0
   363 00000457 00                      	.save_flag			db 0
   364 00000458 01                      	.extension_number	db 1
   365 00000459 41534300                	.asc_extension		db 'ASC', 0
   366 0000045D 496E76616C69642066-     	.err_string			db 'Invalid file type!', 0
   366 00000466 696C65207479706521-
   366 0000046F 00                 
   367 00000470 383078323520415343-     	.err_string2		db '80x25 ASC only!', 0
   367 00000479 206F6E6C792100     
   368 00000480 46696C652073617665-     	.save_ok_msg		db 'File saved.', 0
   368 00000489 642E00             
   369                                  	
   370                                  char_picker:
   371 0000048C 8A1EA9DE                	mov bl, [CONFIG_WINDOW_BG_COLOR]
   372 00000490 BA0B02                  	mov dx, 2 * 256 + 11
   373 00000493 BE3A00                  	mov si, 58
   374 00000496 BF1700                  	mov di, 23
   375 00000499 E8(B180)                	call os_draw_block
   376                                  	
   377 0000049C B3F0                    	mov bl, 0F0h
   378 0000049E BA0C03                  	mov dx, 3 * 256 + 12
   379 000004A1 BE2400                  	mov si, 36
   380 000004A4 BF1600                  	mov di, 22
   381 000004A7 E8(B180)                	call os_draw_block
   382                                  	
   383 000004AA BA0D05                  	mov dx, 5 * 256 + 13
   384                                  	clr al
    31 000004AD 30C0                <1>  xor %1, %1
   385                                  	
   386                                  .vert_loop:
   387 000004AF E8(0680)                	call os_move_cursor
   388 000004B2 E8(7280)                	call os_print_1hex
   389 000004B5 FEC0                    	inc al
   390 000004B7 FEC6                    	inc dh
   391 000004B9 3C10                    	cmp al, 16
   392 000004BB 75F2                    	jne .vert_loop
   393                                  	
   394 000004BD BA0F04                  	mov dx, 4 * 256 + 15
   395                                  	clr al
    31 000004C0 30C0                <1>  xor %1, %1
   396                                  	
   397                                  .horiz_loop:
   398 000004C2 E8(0680)                	call os_move_cursor
   399 000004C5 E8(7280)                	call os_print_1hex
   400 000004C8 FEC0                    	inc al
   401 000004CA 80C202                  	add dl, 2
   402 000004CD 3C10                    	cmp al, 16
   403 000004CF 75F1                    	jne .horiz_loop
   404                                  	
   405                                  .redraw:
   406                                  	clr al
    31 000004D1 30C0                <1>  xor %1, %1
   407 000004D3 BA0F05                  	mov dx, 5 * 256 + 15
   408 000004D6 B3F0                    	mov bl, 0F0h
   409                                  	
   410                                  .char_loop:
   411 000004D8 E8(0680)                	call os_move_cursor
   412                                  
   413 000004DB E8D101                  	call sub_putchar
   414                                  	
   415 000004DE 80C202                  	add dl, 2
   416 000004E1 FEC0                    	inc al
   417 000004E3 80FA2F                  	cmp dl, 15 + 2 * 16
   418 000004E6 75F0                    	jne .char_loop
   419                                  	
   420 000004E8 B20F                    	mov dl, 15
   421 000004EA FEC6                    	inc dh
   422 000004EC 84C0                    	test al, al
   423 000004EE 75E8                    	jnz .char_loop
   424                                  	
   425 000004F0 BA3203                  	mov dx, 3 * 256 + 50
   426 000004F3 E8(0680)                	call os_move_cursor
   427 000004F6 BE[7705]                	mov si, .ascii_msg
   428 000004F9 E8(0380)                	call os_print_string
   429                                  	
   430 000004FC A0[9005]                	mov al, [.selected_char]
   431 000004FF E8(7580)                	call os_print_2hex
   432                                  	
   433 00000502 BA3205                  	mov dx, 5 * 256 + 50
   434 00000505 E8(0680)                	call os_move_cursor
   435 00000508 BE[8405]                	mov si, .char_msg
   436 0000050B E8(0380)                	call os_print_string
   437                                  	
   438 0000050E A0[9005]                	mov al, [.selected_char]
   439 00000511 8A1EA9DE                	mov bl, [CONFIG_WINDOW_BG_COLOR]
   440 00000515 E89701                  	call sub_putchar
   441                                  	
   442 00000518 8A36[9005]              	mov dh, [.selected_char]
   443 0000051C 80E6F0                  	and dh, 0F0h
   444 0000051F C0EE04                  	shr dh, 4
   445 00000522 80C605                  	add dh, 5
   446                                  	
   447 00000525 8A16[9005]              	mov dl, [.selected_char]
   448 00000529 80E20F                  	and dl, 0Fh
   449 0000052C D0E2                    	shl dl, 1
   450 0000052E 80C20F                  	add dl, 15
   451 00000531 E8(0680)                	call os_move_cursor
   452                                  	
   453                                  .loop:
   454 00000534 E8(1280)                	call os_wait_for_key
   455                                  	
   456 00000537 80FC48                  	cmp ah, 72
   457 0000053A 741D                    	je .go_up
   458                                  	
   459 0000053C 80FC4B                  	cmp ah, 75
   460 0000053F 7428                    	je .go_left
   461                                  	
   462 00000541 80FC4D                  	cmp ah, 77
   463 00000544 742A                    	je .go_right
   464                                  	
   465 00000546 80FC50                  	cmp ah, 80
   466 00000549 7416                    	je .go_down
   467                                  
   468 0000054B 3C0D                    	cmp al, 13
   469 0000054D 0F84BDFA                	je start.loop
   470                                  	
   471 00000551 3C1B                    	cmp al, 27
   472 00000553 0F84B7FA                	je start.loop
   473                                  	
   474 00000557 EBDB                    	jmp .loop
   475                                  	
   476                                  .go_up:
   477 00000559 802E[9005]10            	sub byte [.selected_char], 16
   478 0000055E E970FF                  	jmp .redraw
   479                                  	
   480                                  .go_down:
   481 00000561 8006[9005]10            	add byte [.selected_char], 16
   482 00000566 E968FF                  	jmp .redraw
   483                                  	
   484                                  .go_left:
   485 00000569 FE0E[9005]              	dec byte [.selected_char]
   486 0000056D E961FF                  	jmp .redraw
   487                                  	
   488                                  .go_right:
   489 00000570 FE06[9005]              	inc byte [.selected_char]
   490 00000574 E95AFF                  	jmp .redraw
   491                                  	
   492 00000577 415343494920636F64-     	.ascii_msg		db 'ASCII code: ', 0
   492 00000580 653A2000           
   493 00000584 436861726163746572-     	.char_msg		db 'Character: ', 0
   493 0000058D 3A2000             
   494 00000590 00                      	.selected_char	db 0
   495                                  	
   496                                  draw_background:
   497 00000591 B8[9E05]                	mov ax, .title_msg
   498 00000594 BB[B705]                	mov bx, .footer_msg
   499 00000597 B90700                  	mov cx, 7
   500 0000059A E8(2780)                	call os_draw_background
   501 0000059D C3                      	ret
   502                                  	
   503 0000059E 4D696368616C4F5320-     	.title_msg			db 'MichalOS ASCII Artist - ', 0
   503 000005A7 415343494920417274-
   503 000005B0 697374202D2000     
   504 000005B7 5B46315D202D204669-     	.footer_msg			db '[F1] - File, [F2] - Change color, [F3] - Fill with color, [F12] - More help', 0
   504 000005C0 6C652C205B46325D20-
   504 000005C9 2D204368616E676520-
   504 000005D2 636F6C6F722C205B46-
   504 000005DB 335D202D2046696C6C-
   504 000005E4 207769746820636F6C-
   504 000005ED 6F722C205B4631325D-
   504 000005F6 202D204D6F72652068-
   504 000005FF 656C7000           
   505                                  	
   506                                  sub_draw_screen:
   507 00000603 E8(8A80)                	call os_hide_cursor
   508 00000606 BE[BF06]                	mov si, buffer	
   509                                  
   510 00000609 B8A000                  	mov ax, 160			; Get the drawable screen area
   511 0000060C 0FB61E[BD06]            	movzx bx, byte [cursor_y_offset]
   512 00000611 F7E3                    	mul bx
   513 00000613 01C6                    	add si, ax
   514                                  	
   515                                  	clr bh
    31 00000615 30FF                <1>  xor %1, %1
   516 00000617 B90100                  	mov cx, 1
   517 0000061A BA0001                  	mov dx, 100h
   518                                  	
   519                                  .loop:
   520 0000061D AD                      	lodsw
   521                                  	
   522 0000061E E8(0680)                	call os_move_cursor
   523                                  
   524 00000621 88E3                    	mov bl, ah
   525 00000623 B409                    	mov ah, 9
   526 00000625 CD10                    	int 10h
   527                                  	
   528 00000627 FEC2                    	inc dl
   529 00000629 80FA50                  	cmp dl, 80
   530 0000062C 75EF                    	jne .loop
   531                                  	
   532                                  	clr dl
    31 0000062E 30D2                <1>  xor %1, %1
   533 00000630 FEC6                    	inc dh
   534 00000632 80FE18                  	cmp dh, 24
   535 00000635 75E6                    	jne .loop
   536                                  	
   537 00000637 BA3300                  	mov dx, 51
   538 0000063A E8(0680)                	call os_move_cursor
   539                                  	
   540 0000063D BE[8406]                	mov si, .x_msg
   541 00000640 E8(0380)                	call os_print_string
   542                                  	
   543 00000643 0FB606[BB06]            	movzx ax, byte [cursor_x]
   544 00000648 E8(4D81)                	call os_print_int
   545                                  	
   546 0000064B BE[8806]                	mov si, .y_msg
   547 0000064E E8(0380)                	call os_print_string
   548                                  	
   549 00000651 0FB606[BC06]            	movzx ax, byte [cursor_y]
   550 00000656 E8(4D81)                	call os_print_int
   551 00000659 E8(6980)                	call os_print_space
   552                                  	
   553 0000065C BA1900                  	mov dx, 25
   554 0000065F E8(0680)                	call os_move_cursor
   555                                  	
   556 00000662 B82009                  	mov ax, 0920h
   557 00000665 BB7000                  	mov bx, 70h
   558 00000668 B91400                  	mov cx, 20
   559 0000066B CD10                    	int 10h
   560                                  	
   561 0000066D BE[0B04]                	mov si, start.load_file
   562 00000670 E8(0380)                	call os_print_string
   563                                  	
   564 00000673 8B16[BB06]              	mov dx, [cursor_x]
   565 00000677 FEC6                    	inc dh
   566 00000679 2A36[BD06]              	sub dh, [cursor_y_offset]
   567 0000067D E8(0680)                	call os_move_cursor	
   568 00000680 E8(8780)                	call os_show_cursor
   569 00000683 C3                      	ret
   570                                  	
   571 00000684 583A2000                	.x_msg		db 'X: ', 0
   572 00000688 20593A2000              	.y_msg		db ' Y: ', 0
   573                                  	
   574                                  	
   575                                  sub_get_mem_ptr:
   576 0000068D 60                      	pusha
   577 0000068E 0FB606[BC06]            	movzx ax, [cursor_y]
   578 00000693 BB5000                  	mov bx, 80
   579 00000696 F7E3                    	mul bx
   580 00000698 0FB61E[BB06]            	movzx bx, [cursor_x]
   581 0000069D 01D8                    	add ax, bx
   582 0000069F D1E0                    	shl ax, 1
   583 000006A1 05[BF06]                	add ax, buffer
   584 000006A4 A3[AD06]                	mov [.tmp], ax
   585 000006A7 61                      	popa
   586 000006A8 8B3E[AD06]              	mov di, [.tmp]
   587 000006AC C3                      	ret
   588                                  	
   589 000006AD 0000                    	.tmp	dw 0
   590                                  	
   591                                  sub_putchar:
   592 000006AF 60                      	pusha
   593 000006B0 B409                    	mov ah, 09h
   594                                  	clr bh
    31 000006B2 30FF                <1>  xor %1, %1
   595 000006B4 B90100                  	mov cx, 1
   596 000006B7 CD10                    	int 10h
   597 000006B9 61                      	popa
   598 000006BA C3                      	ret
   599                                  	
   600 000006BB 00                      	cursor_x			db 0
   601 000006BC 00                      	cursor_y			db 0
   602 000006BD 00                      	cursor_y_offset		db 0
   603 000006BE 07                      	current_attrib		db 7
   604                                  	
   605                                  ; ------------------------------------------------------------------
   606                                  
   607                                  buffer:
