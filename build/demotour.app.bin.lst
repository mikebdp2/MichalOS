     1                                  ; ------------------------------------------------------------------
     2                                  ; MichalOS Demo tour & initial setup
     3                                  ; ------------------------------------------------------------------
     4                                  
     5                                  	%INCLUDE "include/program.inc"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; Include file for MichalOS program or kernel module development
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> 	BITS 16
     6                              <1> 	ORG 100h
     7                              <1> 	
     8                              <1> 	%include "include/constants.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS kernel/program development - constants & macros
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ------------------------------------------------------------------
     6                              <2> ; COLOURS (eg for os_draw_background and os_draw_block)
     7                              <2> 
     8                              <2> %DEFINE BLACK_ON_WHITE		11110000b
     9                              <2> %DEFINE WHITE_ON_BLACK		00001111b
    10                              <2> 
    11                              <2> ; ------------------------------------------------------------------
    12                              <2> ; KEYS
    13                              <2> 
    14                              <2> %DEFINE KEY_UP		72
    15                              <2> %DEFINE KEY_DOWN	80
    16                              <2> %DEFINE KEY_LEFT	75
    17                              <2> %DEFINE KEY_RIGHT	77
    18                              <2> 
    19                              <2> %DEFINE KEY_ESC		27
    20                              <2> %DEFINE KEY_ENTER	13
    21                              <2> 
    22                              <2> ; ------------------------------------------------------------------
    23                              <2> ; MACROS
    24                              <2> 
    25                              <2> %macro syscall 1
    26                              <2> 	mov bp, %1
    27                              <2> 	call os_syscall
    28                              <2> %endmacro
    29                              <2> 
    30                              <2> %macro clr 1
    31                              <2> 	xor %1, %1
    32                              <2> %endmacro
    33                              <2> 
    34                              <2> %macro mov16 3
    35                              <2> 	mov %1, (%2 + %3 * 256)
    36                              <2> %endmacro
    37                              <2> 
    38                              <2> %macro movs 2
    39                              <2> 	push %2
    40                              <2> 	pop %1
    41                              <2> %endmacro
    42                              <2> 
    43                              <2> ; ------------------------------------------------------------------
    44                              <2> ; MEMORY LOCATIONS
    45                              <2> 
    46                              <2> %define ADLIB_BUFFER 0500h
    47                              <2> %define DESKTOP_BACKGROUND 0600h
    48                              <2> %define SYSTEM_FONT 1600h
    49                              <2> %define FILE_MANAGER 2600h
    50                              <2> %define DISK_PARAMS 2E00h
    51                              <2> 
    52                              <2> %define DISK_BUFFER 0E000h
    53                              <2> %define CONFIG_FILE 57000
    54                              <2> %define CONFIG_FILE_SIZE 83
    55                              <2> 
    56                              <2> ; ------------------------------------------------------------------
    57                              <2> ; CONFIG FILE LOCATIONS
    58                              <2> 
    59                              <2> %define CONFIG(x) (CONFIG_FILE + x)
    60                              <2> 
    61                              <2> ; 0 = Desktop background color (BYTE)
    62                              <2> %define CONFIG_DESKTOP_BG_COLOR CONFIG(0)
    63                              <2> 
    64                              <2> ; 1 = Window background color (BYTE)
    65                              <2> %define CONFIG_WINDOW_BG_COLOR CONFIG(1)
    66                              <2> 
    67                              <2> ; 2 = Password enabled (BYTE)
    68                              <2> %define CONFIG_PASSWORD_ENABLED CONFIG(2)
    69                              <2> 
    70                              <2> ; 3 - 35 = Password data (STRING, 32 chars + '\0')
    71                              <2> %define CONFIG_PASSWORD CONFIG(3)
    72                              <2> %define CFG_PASSWORD_MAX_INPUT_LENGTH 32
    73                              <2> %define CFG_PASSWORD_MAX_LENGTH 33
    74                              <2> 
    75                              <2> ; 36 - 68 = Username (STRING, 32 chars + '\0')
    76                              <2> %define CONFIG_USERNAME CONFIG(36)
    77                              <2> %define CFG_USERNAME_MAX_INPUT_LENGTH 32
    78                              <2> %define CFG_USERNAME_MAX_LENGTH 33
    79                              <2> 
    80                              <2> ; 69 - Sound enabled on startup (BYTE)
    81                              <2> %define CONFIG_SOUND_ENABLED CONFIG(69)
    82                              <2> 
    83                              <2> ; 70 - Adlib driver number
    84                              <2> %define CONFIG_ADLIB_DRIVER CONFIG(70)
    85                              <2> %define CFG_ADLIB_STD_DRIVER 0
    86                              <2> %define CFG_ADLIB_PWM_DRIVER 1
    87                              <2> %define CFG_ADLIB_PWM_LOUD_DRIVER 2
    88                              <2> 
    89                              <2> ; 71 - Menu screen dimming enabled (BYTE)
    90                              <2> %define CONFIG_MENU_DIMMING CONFIG(71)
    91                              <2> 
    92                              <2> ; 72 - Menu color (BYTE)
    93                              <2> %define CONFIG_MENU_BG_COLOR CONFIG(72)
    94                              <2> 
    95                              <2> ; 73 - "DOS" font enabled (BYTE)
    96                              <2> %define CONFIG_FONT CONFIG(73)
    97                              <2> %define CFG_FONT_MICHALOS 0
    98                              <2> %define CFG_FONT_BIOS 1
    99                              <2> 
   100                              <2> ; 74 - Minutes to wait for screensaver (BYTE)
   101                              <2> %define CONFIG_SCREENSAVER_MINUTES CONFIG(74)
   102                              <2> 
   103                              <2> ; 75 - System stack size in 16-byte blocks (WORD)
   104                              <2> %define CONFIG_STACKSGMT_SIZE CONFIG(75)
   105                              <2> 
   106                              <2> ; 77 - 80 - Unused *******************************
   107                              <2> 
   108                              <2> ; 81 - Minute time offset (WORD)
   109                              <2> %define CONFIG_TIMEZONE_OFFSET CONFIG(81)
   110                              <2> 
   111                              <2> ; ------------------------------------------------------------------
   112                              <2> ; MUSICAL NOTE FREQUENCY LIST
   113                              <2> 
   114                              <2> A2		equ 110
   115                              <2> AS2		equ 117
   116                              <2> B2		equ 124
   117                              <2> C3		equ 131
   118                              <2> CS3		equ 139
   119                              <2> D3		equ 147
   120                              <2> DS3		equ 156
   121                              <2> E3		equ 165
   122                              <2> F3		equ 175
   123                              <2> FS3		equ 185
   124                              <2> G3		equ 196
   125                              <2> GS3		equ 208
   126                              <2> A3		equ 220
   127                              <2> AS3		equ 233
   128                              <2> B3		equ 247
   129                              <2> C4		equ 262
   130                              <2> CS4		equ 277
   131                              <2> D4		equ 294
   132                              <2> DS4		equ 311
   133                              <2> E4		equ 330
   134                              <2> F4		equ 349
   135                              <2> FS4		equ 370
   136                              <2> G4		equ 392
   137                              <2> GS4		equ 415
   138                              <2> A4		equ 440
   139                              <2> AS4		equ 466
   140                              <2> B4		equ 494
   141                              <2> C5		equ 523
   142                              <2> CS5		equ 554
   143                              <2> D5		equ 587
   144                              <2> DS5		equ 622
   145                              <2> E5		equ 659
   146                              <2> F5		equ 698
   147                              <2> FS5		equ 740
   148                              <2> G5		equ 784
   149                              <2> GS5		equ 831
   150                              <2> A5		equ 880
   151                              <2> AS5		equ 932
   152                              <2> B5		equ 988
   153                              <2> C6		equ 1046
   154                              <2> CS6		equ 1109
   155                              <2> D6		equ 1175
   156                              <2> DS6		equ 1245
   157                              <2> E6		equ 1319
   158                              <2> F6		equ 1397
   159                              <2> FS6		equ 1480
   160                              <2> G6		equ 1568
   161                              <2> GS6		equ 1661
   162                              <2> A6		equ 1760
   163                              <2> AS6		equ 1865
   164                              <2> B6		equ 1976
   165                              <2> C7		equ 2093
   166                              <2> CS7		equ 2217
   167                              <2> D7		equ 2349
   168                              <2> DS7		equ 2489
   169                              <2> E7		equ 2637
   170                              <2> F7		equ 2794
   171                              <2> FS7		equ 2960
   172                              <2> G7		equ 3136
   173                              <2> GS7		equ 3322
   174                              <2> A7		equ 3520
   175                              <2> AS7		equ 3729
   176                              <2> B7		equ 3951
   177                              <2> C8		equ 4186
   178                              <2> CS8		equ 4435
   179                              <2> D8		equ 4699
   180                              <2> DS8		equ 4978
   181                              <2> E8		equ 5274
   182                              <2> F8		equ 5588
   183                              <2> FS8		equ 5920
   184                              <2> G8		equ 6272
   185                              <2> GS8		equ 6645
   186                              <2> A8		equ 7040
   187                              <2> AS8		equ 7459
   188                              <2> B8		equ 7902
     9                              <1> 	%include "include/syscalls.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS program development - syscalls
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ==================================================================
     6                              <2> ; MichalOS Sound functions (PC speaker, YM3812)
     7                              <2> ; ==================================================================
     8                              <2> 
     9                              <2> ; ------------------------------------------------------------------
    10                              <2> ; os_speaker_tone -- Generate PC speaker tone (call os_speaker_off to turn off)
    11                              <2> ; IN: AX = note frequency (in Hz)
    12                              <2> ; OUT: None, registers preserved
    13                              <2> 
    14                              <2> os_speaker_tone equ 32795
    15                              <2> 
    16                              <2> ; ------------------------------------------------------------------
    17                              <2> ; os_speaker_raw_period -- Generate PC speaker tone (call os_speaker_off to turn off)
    18                              <2> ; IN: AX = note period (= 105000000 / 88 / freq)
    19                              <2> ; OUT: None, registers preserved
    20                              <2> 
    21                              <2> os_speaker_raw_period equ 33107
    22                              <2> 
    23                              <2> ; ------------------------------------------------------------------
    24                              <2> ; os_speaker_note_length -- Generate PC speaker tone for a set amount of time and then stop
    25                              <2> ; IN: AX = note frequency, CX = length (in ticks)
    26                              <2> ; OUT: None, registers preserved
    27                              <2> 
    28                              <2> os_speaker_note_length equ 32900
    29                              <2> 
    30                              <2> ; ------------------------------------------------------------------
    31                              <2> ; os_speaker_off -- Turn off PC speaker
    32                              <2> ; IN/OUT: None, registers preserved
    33                              <2> 
    34                              <2> os_speaker_off equ 32798
    35                              <2> 
    36                              <2> ; ------------------------------------------------------------------
    37                              <2> ; os_speaker_muted -- Check if the PC speaker is muted
    38                              <2> ; OUT: ZF set if muted, clear if not
    39                              <2> 
    40                              <2> os_speaker_muted equ 33125
    41                              <2> 
    42                              <2> ; ------------------------------------------------------------------
    43                              <2> ; os_start_adlib -- Starts the selected Adlib driver
    44                              <2> ; IN: SI = interrupt handler, CX = prescaler, BL = number of channels
    45                              <2> ; The interrupt will fire at 33144 Hz (the closest possible to 32768 Hz) divided by CX.
    46                              <2> ; Common prescaler values:
    47                              <2> ;		33 = ~1 kHz (1004.362 Hz)
    48                              <2> ;		663 = ~50 Hz (49.991 Hz)
    49                              <2> ;		1820 = ~18.2 Hz (18.211 Hz)
    50                              <2> ; OUT: None, registers preserved
    51                              <2> 
    52                              <2> os_start_adlib equ 32984
    53                              <2> 
    54                              <2> ; ------------------------------------------------------------------
    55                              <2> ; os_stop_adlib -- Stops the Adlib driver
    56                              <2> ; IN/OUT: None, registers preserved
    57                              <2> 
    58                              <2> os_stop_adlib equ 33026
    59                              <2> 
    60                              <2> ; ------------------------------------------------------------------
    61                              <2> ; os_adlib_regwrite -- Write to a YM3812 register
    62                              <2> ; IN: AH/AL - register address/value to write
    63                              <2> 
    64                              <2> os_adlib_regwrite equ 32843
    65                              <2> 
    66                              <2> ; ------------------------------------------------------------------
    67                              <2> ; os_adlib_mute -- Mute the YM3812's current state
    68                              <2> ; IN/OUT: None
    69                              <2> 
    70                              <2> os_adlib_mute equ 33044
    71                              <2> 
    72                              <2> ; ------------------------------------------------------------------
    73                              <2> ; os_adlib_unmute -- Unmute the YM3812's current state
    74                              <2> ; IN/OUT: None
    75                              <2> 
    76                              <2> os_adlib_unmute equ 33089
    77                              <2> 
    78                              <2> ; ------------------------------------------------------------------
    79                              <2> ; os_adlib_calcfreq -- Play a frequency
    80                              <2> ; IN: AX - frequency, CL = channel
    81                              <2> ; OUT: None, registers preserved
    82                              <2> 
    83                              <2> os_adlib_calcfreq equ 32966
    84                              <2> 
    85                              <2> ; ------------------------------------------------------------------
    86                              <2> ; os_adlib_noteoff -- Turns off a note
    87                              <2> ; IN: CL = channel
    88                              <2> ; OUT: None, registers preserved
    89                              <2> 
    90                              <2> os_adlib_noteoff equ 33029
    91                              <2> 
    92                              <2> ; ==================================================================
    93                              <2> ; MichalOS Text display output functions
    94                              <2> ; ==================================================================
    95                              <2> 
    96                              <2> ; ------------------------------------------------------------------
    97                              <2> ; os_putchar -- Puts a character on the screen
    98                              <2> ; IN: AL = character
    99                              <2> ; OUT: None, registers preserved
   100                              <2> 
   101                              <2> os_putchar equ 32981
   102                              <2> 
   103                              <2> ; ------------------------------------------------------------------
   104                              <2> ; os_put_chars -- Puts up to a set amount of characters on the screen
   105                              <2> ; IN: BL = terminator, DS:SI = location, CX = character count
   106                              <2> ; OUT: None, registers preserved
   107                              <2> 
   108                              <2> os_put_chars equ 32996
   109                              <2> 
   110                              <2> ; ------------------------------------------------------------------
   111                              <2> ; os_print_string -- Displays text
   112                              <2> ; IN: DS:SI = message location (zero-terminated string)
   113                              <2> ; OUT: None, registers preserved
   114                              <2> 
   115                              <2> os_print_string equ 32771
   116                              <2> 
   117                              <2> ; ------------------------------------------------------------------
   118                              <2> ; os_print_string_box -- Displays text inside a text-box.
   119                              <2> ; IN: DS:SI = message location (zero-terminated string), DL = left alignment
   120                              <2> ; OUT: None, registers preserved
   121                              <2> 
   122                              <2> os_print_string_box equ 32993
   123                              <2> 
   124                              <2> ; ------------------------------------------------------------------
   125                              <2> ; os_format_string -- Displays colored text
   126                              <2> ; IN: DS:SI = message location (zero-terminated string), BL = text color
   127                              <2> ; OUT: None, registers preserved
   128                              <2> 
   129                              <2> os_format_string equ 32978
   130                              <2> 
   131                              <2> ; ------------------------------------------------------------------
   132                              <2> ; os_clear_screen -- Clears the screen to background
   133                              <2> ; IN/OUT: None, registers preserved
   134                              <2> 
   135                              <2> os_clear_screen equ 32777
   136                              <2> 
   137                              <2> ; ------------------------------------------------------------------
   138                              <2> ; os_move_cursor -- Moves cursor in text mode
   139                              <2> ; IN: DH, DL = row, column
   140                              <2> ; OUT: None, registers preserved
   141                              <2> 
   142                              <2> os_move_cursor equ 32774
   143                              <2> 
   144                              <2> ; ------------------------------------------------------------------
   145                              <2> ; os_get_cursor_pos -- Return position of text cursor
   146                              <2> ; IN: None
   147                              <2> ; OUT: DH, DL = row, column
   148                              <2> 
   149                              <2> os_get_cursor_pos equ 32870
   150                              <2> 
   151                              <2> ; ------------------------------------------------------------------
   152                              <2> ; os_show_cursor -- Turns on cursor in text mode
   153                              <2> ; IN/OUT: None, registers preserved
   154                              <2> 
   155                              <2> os_show_cursor equ 32903
   156                              <2> 
   157                              <2> ; ------------------------------------------------------------------
   158                              <2> ; os_hide_cursor -- Turns off cursor in text mode
   159                              <2> ; IN/OUT: None, registers preserved
   160                              <2> 
   161                              <2> os_hide_cursor equ 32906
   162                              <2> 
   163                              <2> ; ------------------------------------------------------------------
   164                              <2> ; os_draw_block -- Render block of specified colour
   165                              <2> ; IN: BL/DL/DH/SI/DI = colour/start X pos/start Y pos/width/finish Y pos
   166                              <2> ; OUT: None, registers preserved
   167                              <2> 
   168                              <2> os_draw_block equ 32945
   169                              <2> 
   170                              <2> ; ------------------------------------------------------------------
   171                              <2> ; os_file_selector -- Show a file selection dialog
   172                              <2> ; IN: None
   173                              <2> ; OUT: AX = location of filename string (or carry set if Esc pressed)
   174                              <2> 
   175                              <2> os_file_selector equ 32855
   176                              <2> 
   177                              <2> ; ------------------------------------------------------------------
   178                              <2> ; os_file_selector_filtered -- Show a file selection dialog only 
   179                              <2> ; with files mathing the filter
   180                              <2> ; IN: ES:BX = location of file extension list (0 if none)
   181                              <2> ; OUT: DS:AX = location of filename string (or carry set if Esc pressed)
   182                              <2> 
   183                              <2> os_file_selector_filtered equ 33122
   184                              <2> 
   185                              <2> ; ------------------------------------------------------------------
   186                              <2> ; os_list_dialog_tooltip -- Show a dialog with a list of options and a tooltip.
   187                              <2> ; That means, when the user changes the selection, the application will be called back
   188                              <2> ; to change the tooltip's contents.
   189                              <2> ; IN: DS:AX = comma-separated list of strings to show (zero-terminated),
   190                              <2> ;     DS:BX = first help string, DS:CX = second help string
   191                              <2> ;     SI = key/display callback (see os_list_dialog_ex)
   192                              <2> ;     if AX = 0: DI = entry display callback, DX = number of entries
   193                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   194                              <2> 
   195                              <2> os_list_dialog_tooltip equ 32912
   196                              <2> 
   197                              <2> ; ------------------------------------------------------------------
   198                              <2> ; os_list_dialog -- Show a dialog with a list of options
   199                              <2> ; IN: ES:AX = comma-separated list of strings to show (zero-terminated),
   200                              <2> ;     ES:BX = first help string, ES:CX = second help string
   201                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   202                              <2> 
   203                              <2> os_list_dialog equ 32936
   204                              <2> 
   205                              <2> ; ------------------------------------------------------------------
   206                              <2> ; os_list_dialog_ex -- Show a dialog with a list of options
   207                              <2> ; IN: DS:BX = pointer to setup struct
   208                              <2> ;       Addr Size Description
   209                              <2> ;       000h word Pointer to entry display callback (accepts CX as entry ID, prints out result) - valid only if ptr to list is zero
   210                              <2> ;       002h word Pointer to comma-separated list of strings to show (zero-terminated)
   211                              <2> ;       004h word Pointer to key/entry change callback (accepts AX as entry ID, CX as keypress),
   212                              <2> ;       006h word Number of entries (if 0, then it is automatically calculated from 002h)
   213                              <2> ;       008h word Pointer to first help string (if 0, then the list will fill the whole dialog)
   214                              <2> ;       00Ah word Pointer to second help string
   215                              <2> ;       00Ch word (ES) Pointer to history data (points to a 5 byte array)
   216                              <2> ;       00Eh byte Screen X position
   217                              <2> ;       00Fh byte Screen Y position
   218                              <2> ;       010h byte Dialog width
   219                              <2> ;       011h byte Dialog height
   220                              <2> ;       012h word Source segment (used for comma-separated list & help strings)
   221                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   222                              <2> 
   223                              <2> os_list_dialog_ex equ 33113
   224                              <2> 
   225                              <2> ; ------------------------------------------------------------------
   226                              <2> ; os_select_list -- Draws a list of entries (defined by a callback) to select from.
   227                              <2> ; IN: AX = width/height, BL = color, CX = number of entries, DX = X/Y pos,
   228                              <2> ;     SI = callback (if C clear = accepts an entry ID in CX, prints an appropriate string,
   229                              <2> ;     if C set = accepts key input in AX, entry ID in CX; not required to preserve regs),
   230                              <2> ;     ES:DI = pointer to a history struct (word .num_of_entries, word .skip_num, byte .cursor) or 0 if none
   231                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   232                              <2> 
   233                              <2> os_select_list equ 33110
   234                              <2> 
   235                              <2> ; ------------------------------------------------------------------
   236                              <2> ; os_draw_background -- Clear screen with white top and bottom bars
   237                              <2> ; containing text, and a coloured middle section.
   238                              <2> ; IN: DS:AX/BX = top/bottom string locations, CX = colour (256 if the app wants to display the default background)
   239                              <2> ; OUT: None, registers preserved
   240                              <2> 
   241                              <2> os_draw_background equ 32807
   242                              <2> 
   243                              <2> ; ------------------------------------------------------------------
   244                              <2> ; os_print_newline -- Reset cursor to start of next line
   245                              <2> ; IN/OUT: None, registers preserved
   246                              <2> 
   247                              <2> os_print_newline equ 32783
   248                              <2> 
   249                              <2> ; ------------------------------------------------------------------
   250                              <2> ; os_dump_registers -- Dumps all register contents in hex to the screen
   251                              <2> ; IN: All registers
   252                              <2> ; OUT: None, registers preserved
   253                              <2> 
   254                              <2> os_dump_registers equ 32909
   255                              <2> 
   256                              <2> ; ------------------------------------------------------------------
   257                              <2> ; os_input_dialog -- Get text string from user via a dialog box
   258                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   259                              <2> ; OUT: None, registers preserved
   260                              <2> 
   261                              <2> os_input_dialog equ 32933
   262                              <2> 
   263                              <2> ; ------------------------------------------------------------------
   264                              <2> ; os_password_dialog -- Get a password from user via a dialog box
   265                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   266                              <2> ; OUT: None, registers preserved
   267                              <2> 
   268                              <2> os_password_dialog equ 33041
   269                              <2> 
   270                              <2> ; ------------------------------------------------------------------
   271                              <2> ; os_dialog_box -- Print dialog box in middle of screen, with button(s)
   272                              <2> ; IN: DS:AX, DS:BX, DS:CX = string locations (set registers to 0 for no display),
   273                              <2> ; IN: DX = 0 for single 'OK' dialog,
   274                              <2> ;          1 for two-button 'OK' and 'Cancel' ('OK' selected by default),
   275                              <2> ;          2 for two-button 'OK' and 'Cancel' ('Cancel' selected by default)
   276                              <2> ; OUT: If two-button mode, AX = 0 for OK and 1 for cancel
   277                              <2> ; NOTE: Each string is limited to 40 characters
   278                              <2> 
   279                              <2> os_dialog_box equ 32825
   280                              <2> 
   281                              <2> ; ------------------------------------------------------------------
   282                              <2> ; os_print_space -- Print a space to the screen
   283                              <2> ; IN/OUT: None, registers preserved
   284                              <2> 
   285                              <2> os_print_space equ 32873
   286                              <2> 
   287                              <2> ; ------------------------------------------------------------------
   288                              <2> ; os_print_digit -- Displays contents of AX as a single digit
   289                              <2> ; Works up to base 37, ie digits 0-Z
   290                              <2> ; IN: AX = "digit" to format and print
   291                              <2> ; OUT: None, registers preserved
   292                              <2> 
   293                              <2> os_print_digit equ 32879
   294                              <2> 
   295                              <2> ; ------------------------------------------------------------------
   296                              <2> ; os_print_1hex -- Displays low nibble of AL in hex format
   297                              <2> ; IN: AL = number to format and print
   298                              <2> ; OUT: None, registers preserved
   299                              <2> 
   300                              <2> os_print_1hex equ 32882
   301                              <2> 
   302                              <2> ; ------------------------------------------------------------------
   303                              <2> ; os_print_2hex -- Displays AL in hex format
   304                              <2> ; IN: AL = number to format and print
   305                              <2> ; OUT: None, registers preserved
   306                              <2> 
   307                              <2> os_print_2hex equ 32885
   308                              <2> 
   309                              <2> ; ------------------------------------------------------------------
   310                              <2> ; os_print_4hex -- Displays AX in hex format
   311                              <2> ; IN: AX = number to format and print
   312                              <2> ; OUT: None, registers preserved
   313                              <2> 
   314                              <2> os_print_4hex equ 32888
   315                              <2> 
   316                              <2> ; ------------------------------------------------------------------
   317                              <2> ; os_print_8hex - Displays EAX in hex format
   318                              <2> ; IN: EAX = unsigned integer
   319                              <2> ; OUT: None, registers preserved
   320                              <2> 
   321                              <2> os_print_8hex equ 33065
   322                              <2> 
   323                              <2> ; ------------------------------------------------------------------
   324                              <2> ; os_print_int -- Prints an integer in decimal.
   325                              <2> ; IN: AX = unsigned integer
   326                              <2> ; OUT: None, registers preserved
   327                              <2> 
   328                              <2> os_print_int equ 33101
   329                              <2> 
   330                              <2> ; ------------------------------------------------------------------
   331                              <2> ; os_print_32int -- Prints a 32 bit integer in decimal.
   332                              <2> ; IN: EAX = unsigned integer
   333                              <2> ; OUT: None, registers preserved
   334                              <2> 
   335                              <2> os_print_32int equ 32951
   336                              <2> 
   337                              <2> ; ------------------------------------------------------------------
   338                              <2> ; os_input_string -- Take string from keyboard entry
   339                              <2> ; IN: ES:AX = location of string
   340                              <2> ; OUT: None, registers preserved
   341                              <2> 
   342                              <2> os_input_string equ 32819
   343                              <2> 
   344                              <2> ; ------------------------------------------------------------------
   345                              <2> ; os_input_password -- Take password from keyboard entry
   346                              <2> ; IN: ES:AX = location of string
   347                              <2> ; OUT: None, registers preserved
   348                              <2> 
   349                              <2> os_input_password equ 33077
   350                              <2> 
   351                              <2> ; ------------------------------------------------------------------
   352                              <2> ; os_set_max_input_length -- Set the maximum length for the next string input
   353                              <2> ; IN: AL = maximum number of characters
   354                              <2> ; OUT: None, registers preserved
   355                              <2> 
   356                              <2> os_set_max_input_length equ 33131
   357                              <2> 
   358                              <2> ; ------------------------------------------------------------------
   359                              <2> ; os_input_string_ex -- Take string from keyboard entry
   360                              <2> ; IN: ES:AX = location of string, CH = 0 if normal input, 1 if password input,
   361                              <2> ;     DS:SI = callback on keys where AL = 0 (input: AX = keypress)
   362                              <2> ; OUT: None, registers preserved
   363                              <2> 
   364                              <2> os_input_string_ex equ 33119
   365                              <2> 
   366                              <2> ; ------------------------------------------------------------------
   367                              <2> ; os_color_selector - Pops up a color selector.
   368                              <2> ; IN: None
   369                              <2> ; OUT: color number (0-15)
   370                              <2> 
   371                              <2> os_color_selector equ 33053
   372                              <2> 
   373                              <2> ; ------------------------------------------------------------------
   374                              <2> ; os_temp_box -- Draws a dialog box with up to 5 lines of text.
   375                              <2> ; IN: DS:SI/AX/BX/CX/DX = string locations (or 0 for no display)
   376                              <2> ; OUT: None, registers preserved
   377                              <2> 
   378                              <2> os_temp_box equ 33086
   379                              <2> 
   380                              <2> ; ------------------------------------------------------------------
   381                              <2> ; os_reset_font -- Resets the font to the selected default.
   382                              <2> ; IN/OUT = None, registers preserved
   383                              <2> 
   384                              <2> os_reset_font equ 32990
   385                              <2> 
   386                              <2> ; ------------------------------------------------------------------
   387                              <2> ; os_draw_logo -- Draws the MichalOS logo.
   388                              <2> ; IN: None
   389                              <2> ; OUT: A very beautiful logo :-)
   390                              <2> 
   391                              <2> os_draw_logo equ 32852
   392                              <2> 
   393                              <2> ; ------------------------------------------------------------------
   394                              <2> ; os_draw_icon -- Draws an icon (in the MichalOS format).
   395                              <2> ; IN: DS:SI = address of the icon
   396                              <2> ; OUT: None, registers preserved
   397                              <2> 
   398                              <2> os_draw_icon equ 33023
   399                              <2> 
   400                              <2> ; ------------------------------------------------------------------
   401                              <2> ; os_option_menu -- Show a menu with a list of options
   402                              <2> ; IN: AX = comma-separated list of strings to show (zero-terminated)
   403                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc, left or right pressed
   404                              <2> 
   405                              <2> os_option_menu equ 32876
   406                              <2> 
   407                              <2> ; ==================================================================
   408                              <2> ; MichalOS Graphics functions
   409                              <2> ; Some graphics routines have been borrowed from TachyonOS
   410                              <2> ; ==================================================================
   411                              <2> 
   412                              <2> ; ------------------------------------------------------------------
   413                              <2> ; os_init_graphics_mode -- Initializes graphics mode.
   414                              <2> ; IN/OUT: None, registers preserved
   415                              <2> 
   416                              <2> os_init_graphics_mode equ 33020
   417                              <2> 
   418                              <2> ; ------------------------------------------------------------------
   419                              <2> ; os_init_text_mode -- Deinitializes graphics mode.
   420                              <2> ; IN/OUT: None, registers preserved
   421                              <2> 
   422                              <2> os_init_text_mode equ 33095
   423                              <2> 
   424                              <2> ; ------------------------------------------------------------------
   425                              <2> ; os_set_pixel -- Sets a pixel on the screen to a given value.
   426                              <2> ; IN: ES = destination memory segment, CX = X coordinate, AX = Y coordinate, BL = color
   427                              <2> ; OUT: None, registers preserved
   428                              <2> 
   429                              <2> os_set_pixel equ 33017
   430                              <2> 
   431                              <2> ; ------------------------------------------------------------------
   432                              <2> ; os_draw_line -- Draws a line with the Bresenham's line algorithm.
   433                              <2> ; Translated from an implementation in C (http://www.edepot.com/linebresenham.html)
   434                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour
   435                              <2> ; OUT: None, registers preserved
   436                              <2> 
   437                              <2> os_draw_line equ 32999
   438                              <2> 
   439                              <2> ; ------------------------------------------------------------------
   440                              <2> ; os_draw_rectangle -- Draws a rectangle.
   441                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour, CF = set if filled or clear if not
   442                              <2> ; OUT: None, registers preserved
   443                              <2> 
   444                              <2> os_draw_rectangle equ 33047
   445                              <2> 
   446                              <2> ; ------------------------------------------------------------------
   447                              <2> ; os_draw_polygon -- Draws a freeform shape.
   448                              <2> ; IN: ES = destination memory segment, BH = number of points, BL = colour, SI = location of shape points data
   449                              <2> ; OUT: None, registers preserved
   450                              <2> ; DATA FORMAT: x1, y1, x2, y2, x3, y3, etc
   451                              <2> 
   452                              <2> os_draw_polygon equ 33002
   453                              <2> 
   454                              <2> ; ------------------------------------------------------------------
   455                              <2> ; os_clear_graphics -- Clears the graphics screen with a given color.
   456                              <2> ; IN: ES = destination memory segment, BL = colour to set
   457                              <2> ; OUT: None, registers preserved
   458                              <2> 
   459                              <2> os_clear_graphics equ 33008
   460                              <2> 
   461                              <2> ; ----------------------------------------
   462                              <2> ; os_draw_circle -- draw a circular shape
   463                              <2> ; IN: ES = destination memory segment, AL = colour, BX = radius, CX = middle X, DX = middle y
   464                              <2> ; OUT: None, registers preserved
   465                              <2> 
   466                              <2> os_draw_circle equ 33005
   467                              <2> 
   468                              <2> ; ==================================================================
   469                              <2> ; MichalOS Keyboard input handling functions
   470                              <2> ; ==================================================================
   471                              <2> 
   472                              <2> ; ------------------------------------------------------------------
   473                              <2> ; os_wait_for_key -- Waits for keypress and returns key
   474                              <2> ; Also handles the screensaver. TODO: move the screensaver code to "int.asm"
   475                              <2> ; IN: None
   476                              <2> ; OUT: AX = key pressed, other regs preserved
   477                              <2> 
   478                              <2> os_wait_for_key equ 32786
   479                              <2> 
   480                              <2> ; ------------------------------------------------------------------
   481                              <2> ; os_check_for_key -- Scans keyboard buffer for input, but doesn't wait
   482                              <2> ; Also handles special keyboard shortcuts.
   483                              <2> ; IN: None
   484                              <2> ; OUT: AX = 0 if no key pressed, otherwise scan code
   485                              <2> 
   486                              <2> os_check_for_key equ 32789
   487                              <2> 
   488                              <2> ; ==================================================================
   489                              <2> ; MichalOS Port I/O functions
   490                              <2> ; ==================================================================
   491                              <2> 
   492                              <2> ; ------------------------------------------------------------------
   493                              <2> ; os_serial_port_enable -- Set up the serial port for transmitting data
   494                              <2> ; IN: AX = 0 for normal mode (9600 baud), or 1 for slow mode (1200 baud)
   495                              <2> ; OUT: None, registers preserved
   496                              <2> 
   497                              <2> os_serial_port_enable equ 32954
   498                              <2> 
   499                              <2> ; ------------------------------------------------------------------
   500                              <2> ; os_send_via_serial -- Send a byte via the serial port
   501                              <2> ; IN: AL = byte to send via serial
   502                              <2> ; OUT: AH = Bit 7 clear on success
   503                              <2> 
   504                              <2> os_send_via_serial equ 32861
   505                              <2> 
   506                              <2> ; ------------------------------------------------------------------
   507                              <2> ; os_get_via_serial -- Get a byte from the serial port
   508                              <2> ; IN: None
   509                              <2> ; OUT: AL = byte that was received, AH = Bit 7 clear on success
   510                              <2> 
   511                              <2> os_get_via_serial equ 32864
   512                              <2> 
   513                              <2> ; ==================================================================
   514                              <2> ; MichalOS Disk access functions
   515                              <2> ; ==================================================================
   516                              <2> 
   517                              <2> ; ------------------------------------------------------------------
   518                              <2> ; os_report_free_space -- Returns the amount of free space on disk
   519                              <2> ; IN: None
   520                              <2> ; OUT: AX = Number of sectors free
   521                              <2> 
   522                              <2> os_report_free_space equ 32894
   523                              <2> 
   524                              <2> ; ------------------------------------------------------------------
   525                              <2> ; os_get_file_list -- Generate comma-separated string of files on floppy
   526                              <2> ; IN/OUT: AX = location to store zero-terminated filename string
   527                              <2> 
   528                              <2> os_get_file_list equ 32831
   529                              <2> 
   530                              <2> ; ------------------------------------------------------------------
   531                              <2> ; os_load_file -- Load a file into RAM
   532                              <2> ; IN: AX = location of filename, ES:CX = location in RAM to load file
   533                              <2> ; OUT: BX = file size (in bytes), carry set if file not found
   534                              <2> 
   535                              <2> os_load_file equ 32801
   536                              <2> 
   537                              <2> ; --------------------------------------------------------------------------
   538                              <2> ; os_write_file -- Save (max 64K) file to disk
   539                              <2> ; IN: AX = filename, ES:BX = data location, CX = bytes to write
   540                              <2> ; OUT: Carry clear if OK, set if failure
   541                              <2> 
   542                              <2> os_write_file equ 32915
   543                              <2> 
   544                              <2> ; --------------------------------------------------------------------------
   545                              <2> ; os_file_exists -- Check for presence of file on the floppy
   546                              <2> ; IN: AX = filename location; OUT: carry clear if found, set if not
   547                              <2> 
   548                              <2> os_file_exists equ 32918
   549                              <2> 
   550                              <2> ; --------------------------------------------------------------------------
   551                              <2> ; os_create_file -- Creates a new 0-byte file on the floppy disk
   552                              <2> ; IN: AX = location of filename
   553                              <2> ; OUT: None, registers preserved
   554                              <2> 
   555                              <2> os_create_file equ 32921
   556                              <2> 
   557                              <2> ; --------------------------------------------------------------------------
   558                              <2> ; os_remove_file -- Deletes the specified file from the filesystem
   559                              <2> ; IN: AX = location of filename to remove
   560                              <2> 
   561                              <2> os_remove_file equ 32924
   562                              <2> 
   563                              <2> ; --------------------------------------------------------------------------
   564                              <2> ; os_rename_file -- Change the name of a file on the disk
   565                              <2> ; IN: AX = filename to change, BX = new filename (zero-terminated strings)
   566                              <2> ; OUT: carry set on error
   567                              <2> 
   568                              <2> os_rename_file equ 32927
   569                              <2> 
   570                              <2> ; --------------------------------------------------------------------------
   571                              <2> ; os_get_file_size -- Get file size information for specified file
   572                              <2> ; IN: AX = filename; OUT: EBX = file size in bytes (up to 4GB)
   573                              <2> ; or carry set if file not found
   574                              <2> 
   575                              <2> os_get_file_size equ 32930
   576                              <2> 
   577                              <2> ; --------------------------------------------------------------------------
   578                              <2> ; os_get_file_datetime -- Get file write time/date information for specified file
   579                              <2> ; IN: AX = filename; OUT: BX = time of creation (HHHHHMMMMMMSSSSS), CX = date of creation (YYYYYYYMMMMDDDDD)
   580                              <2> ; or carry set if file not found
   581                              <2> 
   582                              <2> os_get_file_datetime equ 33011
   583                              <2> 
   584                              <2> ; --------------------------------------------------------------------------
   585                              <2> ; os_get_boot_disk -- Returns the boot disk number.
   586                              <2> ; IN: None
   587                              <2> ; OUT: DL = boot disk number for use in INT 13h calls
   588                              <2> 
   589                              <2> os_get_boot_disk equ 33062
   590                              <2> 
   591                              <2> ; ==================================================================
   592                              <2> ; MichalOS Miscellaneous functions
   593                              <2> ; ==================================================================
   594                              <2> 
   595                              <2> ; ------------------------------------------------------------------
   596                              <2> ; os_read_config_byte -- Reads a byte from the config
   597                              <2> ; IN: BX = offset
   598                              <2> ; OUT: AL = value
   599                              <2> 
   600                              <2> os_read_config_byte equ 33134
   601                              <2> 
   602                              <2> ; ------------------------------------------------------------------
   603                              <2> ; os_read_config_word -- Reads a word from the config
   604                              <2> ; IN: BX = offset
   605                              <2> ; OUT: AX = value
   606                              <2> 
   607                              <2> os_read_config_word equ 33137
   608                              <2> 
   609                              <2> ; ------------------------------------------------------------------
   610                              <2> ; os_write_config_byte -- Writes a byte to the config
   611                              <2> ; NOTE: This will only affect the config in memory,
   612                              <2> ; run os_save_config to save the changes to disk!
   613                              <2> ; IN: BX = offset, AL = value
   614                              <2> ; OUT: None, registers preserved
   615                              <2> 
   616                              <2> os_write_config_byte equ 33140
   617                              <2> 
   618                              <2> ; ------------------------------------------------------------------
   619                              <2> ; os_write_config_word -- Writes a byte to the config
   620                              <2> ; NOTE: This will only affect the config in memory,
   621                              <2> ; run os_save_config to save the changes to disk!
   622                              <2> ; IN: BX = offset, AX = value
   623                              <2> ; OUT: None, registers preserved
   624                              <2> 
   625                              <2> os_write_config_word equ 33143
   626                              <2> 
   627                              <2> ; ------------------------------------------------------------------
   628                              <2> ; os_save_config -- Saves the current config to disk
   629                              <2> ; OUT: Carry set if error
   630                              <2> 
   631                              <2> os_save_config equ 33146
   632                              <2> 
   633                              <2> ; ------------------------------------------------------------------
   634                              <2> ; os_exit -- Exits the application, launches another one (if possible)
   635                              <2> ; IN: AX = if not 0, then ptr to filename of application to be launched,
   636                              <2> ;     BX = 1 if the application calling os_exit should be re-launched after
   637                              <2> ;     the requested application exits
   638                              <2> ; OUT: None, register preserved
   639                              <2> 
   640                              <2> os_exit equ 32780
   641                              <2> 
   642                              <2> ; ------------------------------------------------------------------
   643                              <2> ; os_clear_registers -- Clear all registers
   644                              <2> ; IN: None
   645                              <2> ; OUT: Cleared registers
   646                              <2> 
   647                              <2> os_clear_registers equ 32975
   648                              <2> 
   649                              <2> ; ------------------------------------------------------------------
   650                              <2> ; os_get_os_name -- Get the OS name string
   651                              <2> ; IN: None
   652                              <2> ; OUT: DS:SI = OS name string, zero-terminated
   653                              <2> 
   654                              <2> os_get_os_name equ 33083
   655                              <2> 
   656                              <2> ; ------------------------------------------------------------------
   657                              <2> ; os_get_memory -- Gets the amount of system RAM.
   658                              <2> ; IN: None
   659                              <2> ; OUT: AX = conventional memory (in kB), BX = high memory (in kB)
   660                              <2> 
   661                              <2> os_get_memory equ 33050
   662                              <2> 
   663                              <2> ; ------------------------------------------------------------------
   664                              <2> ; os_int_1Ah -- Middle-man between the INT 1Ah call and the kernel/apps (used for timezones).
   665                              <2> ; IN/OUT: same as int 1Ah
   666                              <2> 
   667                              <2> os_int_1Ah equ 33032
   668                              <2> 
   669                              <2> ; ==================================================================
   670                              <2> ; MichalOS/MikeOS 4.5 BASIC interpreter
   671                              <2> ; ==================================================================
   672                              <2> 
   673                              <2> ; ------------------------------------------------------------------
   674                              <2> ; The BASIC interpreter execution starts here -- a parameter string
   675                              <2> ; is passed in SI and copied into the first string, unless SI = 0
   676                              <2> 
   677                              <2> os_run_basic equ 32963
   678                              <2> 
   679                              <2> ; ==================================================================
   680                              <2> ; MichalOS Math functions
   681                              <2> ; ==================================================================
   682                              <2> 
   683                              <2> ; ------------------------------------------------------------------
   684                              <2> ; os_get_random -- Return a random integer between low and high (inclusive)
   685                              <2> ; IN: AX = low integer, BX = high integer
   686                              <2> ; OUT: CX = random integer
   687                              <2> 
   688                              <2> os_get_random equ 32948
   689                              <2> 
   690                              <2> ; ------------------------------------------------------------------
   691                              <2> ; os_bcd_to_int -- Converts a binary coded decimal number to an integer
   692                              <2> ; IN: AL = BCD number
   693                              <2> ; OUT: AX = integer value
   694                              <2> 
   695                              <2> os_bcd_to_int equ 32846
   696                              <2> 
   697                              <2> ; ------------------------------------------------------------------
   698                              <2> ; os_int_to_bcd -- Converts an integer to a binary coded decimal number
   699                              <2> ; IN: AL = integer value
   700                              <2> ; OUT: AL = BCD number
   701                              <2> 
   702                              <2> os_int_to_bcd equ 33035
   703                              <2> 
   704                              <2> ; ------------------------------------------------------------------
   705                              <2> ; os_math_power -- Calculates EAX^EBX.
   706                              <2> ; IN: EAX^EBX = input
   707                              <2> ; OUT: EAX = result
   708                              <2> 
   709                              <2> os_math_power equ 33071
   710                              <2> 
   711                              <2> ; ------------------------------------------------------------------
   712                              <2> ; os_math_root -- Approximates the EBXth root of EAX.
   713                              <2> ; IN: EAX = input, EBX = root
   714                              <2> ; OUT: EAX(EDX = 0) = result; EAX to EDX = range
   715                              <2> 
   716                              <2> os_math_root equ 33074
   717                              <2> 
   718                              <2> ; ==================================================================
   719                              <2> ; MichalOS String manipulation functions
   720                              <2> ; ==================================================================
   721                              <2> 
   722                              <2> ; ------------------------------------------------------------------
   723                              <2> ; os_string_encrypt -- Encrypts a string using a totally military-grade encryption algorithm
   724                              <2> ; IN: DS:SI = Input string/Output string
   725                              <2> ; OUT: None, registers preserved
   726                              <2> 
   727                              <2> os_string_encrypt equ 33014
   728                              <2> 
   729                              <2> ; ------------------------------------------------------------------
   730                              <2> ; os_string_add -- Add a string on top of another string
   731                              <2> ; IN: DS:AX = Main string, DS:BX = Added string
   732                              <2> ; OUT: None, registers preserved
   733                              <2> 
   734                              <2> os_string_add equ 32897
   735                              <2> 
   736                              <2> ; ------------------------------------------------------------------
   737                              <2> ; os_string_length -- Return length of a string
   738                              <2> ; IN: DS:AX = string location
   739                              <2> ; OUT AX = length (other regs preserved)
   740                              <2> 
   741                              <2> os_string_length equ 32810
   742                              <2> 
   743                              <2> ; ------------------------------------------------------------------
   744                              <2> ; os_string_reverse -- Reverse the characters in a string
   745                              <2> ; IN: DS:SI = string location
   746                              <2> ; OUT: None, registers preserved
   747                              <2> 
   748                              <2> os_string_reverse equ 32939
   749                              <2> 
   750                              <2> ; ------------------------------------------------------------------
   751                              <2> ; os_find_char_in_string -- Find location of character in a string
   752                              <2> ; IN: DS:SI = string location, AL = character to find
   753                              <2> ; OUT: AX = location in string, or 0 if char not present
   754                              <2> 
   755                              <2> os_find_char_in_string equ 32867
   756                              <2> 
   757                              <2> ; ------------------------------------------------------------------
   758                              <2> ; os_string_uppercase -- Convert zero-terminated string to upper case
   759                              <2> ; IN: DS:AX = string location
   760                              <2> ; OUT: None, registers preserved
   761                              <2> 
   762                              <2> os_string_uppercase equ 32813
   763                              <2> 
   764                              <2> ; ------------------------------------------------------------------
   765                              <2> ; os_string_lowercase -- Convert zero-terminated string to lower case
   766                              <2> ; IN: DS:AX = string location
   767                              <2> ; OUT: None, registers preserved
   768                              <2> 
   769                              <2> os_string_lowercase equ 32816
   770                              <2> 
   771                              <2> ; ------------------------------------------------------------------
   772                              <2> ; os_string_copy -- Copy one string into another
   773                              <2> ; IN: DS:SI = source, ES:DI = destination (programmer ensure sufficient room)
   774                              <2> ; OUT: None, registers preserved
   775                              <2> 
   776                              <2> os_string_copy equ 32822
   777                              <2> 
   778                              <2> ; ------------------------------------------------------------------
   779                              <2> ; os_string_join -- Join two strings into a third string
   780                              <2> ; IN: DS:AX = string one, DS:BX = string two, ES:CX = destination string
   781                              <2> ; OUT: None, registers preserved
   782                              <2> 
   783                              <2> os_string_join equ 32828
   784                              <2> 
   785                              <2> ; ------------------------------------------------------------------
   786                              <2> ; os_string_chomp -- Strip leading and trailing spaces from a string
   787                              <2> ; IN: DS:AX = string location
   788                              <2> ; OUT: None, registers preserved
   789                              <2> 
   790                              <2> os_string_chomp equ 32837
   791                              <2> 
   792                              <2> ; ------------------------------------------------------------------
   793                              <2> ; os_string_compare -- See if two strings match
   794                              <2> ; IN: DS:SI = string one, DS:DI = string two
   795                              <2> ; OUT: carry set if same, clear if different
   796                              <2> 
   797                              <2> os_string_compare equ 32834
   798                              <2> 
   799                              <2> ; ------------------------------------------------------------------
   800                              <2> ; os_string_parse -- Take string (eg "run foo bar baz") and return
   801                              <2> ; pointers to zero-terminated strings (eg AX = "run", BX = "foo" etc.)
   802                              <2> ; IN: DS:SI = string
   803                              <2> ; OUT: AX, BX, CX, DX = individual strings
   804                              <2> 
   805                              <2> os_string_parse equ 32960
   806                              <2> 
   807                              <2> ; ------------------------------------------------------------------
   808                              <2> ; os_string_to_int -- Convert decimal string to integer value
   809                              <2> ; IN: DS:SI = string location (max 5 chars, up to '65535')
   810                              <2> ; OUT: AX = number
   811                              <2> 
   812                              <2> os_string_to_int equ 32942
   813                              <2> 
   814                              <2> ; ------------------------------------------------------------------
   815                              <2> ; os_string_to_hex -- Convert hexadecimal string to integer value
   816                              <2> ; IN: DS:SI = string location (max 8 chars, up to 'FFFFFFFF')
   817                              <2> ; OUT: EAX = number
   818                              <2> 
   819                              <2> os_string_to_hex equ 32840
   820                              <2> 
   821                              <2> ; ------------------------------------------------------------------
   822                              <2> ; os_int_to_string -- Convert unsigned integer to string
   823                              <2> ; IN: AX = unsigned int
   824                              <2> ; OUT: DS:AX = string location
   825                              <2> 
   826                              <2> os_int_to_string equ 32792
   827                              <2> 
   828                              <2> ; ------------------------------------------------------------------
   829                              <2> ; os_sint_to_string -- Convert signed integer to string
   830                              <2> ; IN: AX = signed int
   831                              <2> ; OUT: DS:AX = string location
   832                              <2> 
   833                              <2> os_sint_to_string equ 32957
   834                              <2> 
   835                              <2> ; ------------------------------------------------------------------
   836                              <2> ; os_get_time_string -- Get current time in a string (eg '10:25')
   837                              <2> ; IN: ES:BX = string location
   838                              <2> ; OUT: None, registers preserved
   839                              <2> 
   840                              <2> os_get_time_string equ 32849
   841                              <2> 
   842                              <2> ; ------------------------------------------------------------------
   843                              <2> ; os_get_date_string -- Get current date in a string (eg '12/31/2007')
   844                              <2> ; IN: ES:BX = string location
   845                              <2> ; OUT: None, registers preserved
   846                              <2> 
   847                              <2> os_get_date_string equ 32858
   848                              <2> 
   849                              <2> ; ------------------------------------------------------------------
   850                              <2> ; os_string_tokenize -- Reads tokens separated by specified char from
   851                              <2> ; a string. Returns pointer to next token, or 0 if none left
   852                              <2> ; IN: AL = separator char, DS:SI = beginning
   853                              <2> ; OUT: DI = next token or 0 if none
   854                              <2> 
   855                              <2> os_string_tokenize equ 32972
   856                              <2> 
   857                              <2> ; ------------------------------------------------------------------
   858                              <2> ; os_string_callback_tokenizer -- Prints a token from string, requests are done by callback
   859                              <2> ; IN: DS:AX = comma-separated string
   860                              <2> ; OUT: AL = AH = max length of any token, CX = number of entries in the list,
   861                              <2> ;      DX:SI = callback location (if C clear, accepts CX as entry ID, prints out result)
   862                              <2> 
   863                              <2> os_string_callback_tokenizer equ 33128
   864                              <2> 
   865                              <2> ; ------------------------------------------------------------------
   866                              <2> ; os_32int_to_string -- Converts an unsigned 32-bit integer into a string
   867                              <2> ; IN: EAX = unsigned int
   868                              <2> ; OUT: DS:AX = string location
   869                              <2> 
   870                              <2> os_32int_to_string equ 33059
   871                              <2> 
   872                              <2> ; ------------------------------------------------------------------
   873                              <2> ; os_string_to_32int -- Converts a string into a 32-bit integer
   874                              <2> ; IN: DS:SI = string location
   875                              <2> ; OUT: EAX = unsigned integer
   876                              <2> 
   877                              <2> os_string_to_32int equ 33068
   878                              <2> 
   879                              <2> ; ==================================================================
   880                              <2> ; MichalOS ZX7 decompression routine
   881                              <2> ; ==================================================================
   882                              <2> 
   883                              <2> ; ------------------------------------------------------------------
   884                              <2> ; os_decompress_zx7 -- Decompresses ZX7-packed data.
   885                              <2> ; IN: DS:SI = source, ES:DI = destination
   886                              <2> ; OUT: None, registers preserved
   887                              <2> 
   888                              <2> os_decompress_zx7 equ 33038
   889                              <2> 
   890                              <2> ; ==================================================================
   891                              <2> ; MichalOS Interrupt management & app timer functions
   892                              <2> ; ==================================================================
   893                              <2> 
   894                              <2> ; -----------------------------------------------------------------
   895                              <2> ; os_modify_int_handler -- Change location of interrupt handler
   896                              <2> ; IN: CL = int number, DI:SI = handler location
   897                              <2> ; OUT: None, registers preserved
   898                              <2> 
   899                              <2> os_modify_int_handler equ 33056
   900                              <2> 
   901                              <2> ; -----------------------------------------------------------------
   902                              <2> ; os_get_int_handler -- Change location of interrupt handler
   903                              <2> ; IN: CL = int number
   904                              <2> ; OUT: DI:SI = handler location
   905                              <2> 
   906                              <2> os_get_int_handler equ 33080
   907                              <2> 
   908                              <2> ; ------------------------------------------------------------------
   909                              <2> ; os_pause -- Delay execution for a specified number of ticks (18.2 Hz by default)
   910                              <2> ; IN: AX = amount of ticks to wait
   911                              <2> ; OUT: None, registers preserved
   912                              <2> 
   913                              <2> os_pause equ 32804
   914                              <2> 
   915                              <2> ; -----------------------------------------------------------------
   916                              <2> ; os_attach_app_timer -- Attach a timer interrupt to an application and sets the timer speed
   917                              <2> ; Formula: speed = (105000000 / 88) / frequency
   918                              <2> ; IN: DS:SI = handler location, CX = speed
   919                              <2> ; OUT: None, registers preserved
   920                              <2> 
   921                              <2> os_attach_app_timer equ 32969
   922                              <2> 
   923                              <2> ; -----------------------------------------------------------------
   924                              <2> ; os_return_app_timer -- Returns the timer interrupt back to the system and resets the timer speed
   925                              <2> ; IN/OUT: None, registers preserved
   926                              <2> 
   927                              <2> os_return_app_timer equ 32987
   928                              <2> 
   929                              <2> ; -----------------------------------------------------------------
   930                              <2> ; os_set_timer_speed -- Sets the timer's trigger speed.
   931                              <2> ; Formula: speed = (105000000 / 88) / frequency
   932                              <2> ; IN: CX = speed
   933                              <2> ; OUT: Nothing, registers preserved
   934                              <2> 
   935                              <2> os_set_timer_speed equ 32891
   936                              <2> 
   937                              <2> ; ==================================================================
   938                              <2> ; MichalOS Low-level disk driver
   939                              <2> ; ==================================================================
   940                              <2> 
   941                              <2> ; --------------------------------------------------------------------------
   942                              <2> ; os_disk_read_sector -- Read a single sector from disk
   943                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   944                              <2> 
   945                              <2> os_disk_read_sector equ 33092
   946                              <2> 
   947                              <2> ; --------------------------------------------------------------------------
   948                              <2> ; os_disk_read_multiple_sectors -- Read multiple sectors from disk
   949                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   950                              <2> 
   951                              <2> os_disk_read_multiple_sectors equ 33104
   952                              <2> 
   953                              <2> ; --------------------------------------------------------------------------
   954                              <2> ; os_disk_write_sector -- Write a single sector to disk
   955                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   956                              <2> 
   957                              <2> os_disk_write_sector equ 33098
   958                              <2> 
   959                              <2> ; --------------------------------------------------------------------------
   960                              <2> ; os_disk_write_multiple_sectors -- Write multiple sectors to disk
   961                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   962                              <2> 
   963                              <2> os_disk_write_multiple_sectors equ 33116
   964                              <2> 
    10                              <1> 
    11                              <1> %macro oscall 1
    12                              <1> 	mov bp, %1
    13                              <1> 	int 40h
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> ; -----------------------------------------------------------------
     6                                  
     7                                  os_demotour:
     8 00000000 BE[010C]                	mov si, .test_data_bgcolor
     9 00000003 BFA8DE                  	mov di, CONFIG_FILE
    10 00000006 B95300                  	mov cx, .test_data_end - .test_data_bgcolor
    11 00000009 F3A4                    	rep movsb
    12                                  
    13 0000000B E8(4781)                	call os_init_text_mode
    14                                  
    15                                  	clr cx
    31 0000000E 31C9                <1>  xor %1, %1
    16 00000010 E8E601                  	call .draw_background
    17                                  
    18 00000013 BE[9202]                	mov si, .box0msg1
    19 00000016 B8[B502]                	mov ax, .box0msg2
    20 00000019 BB[DE02]                	mov bx, .box0msg3
    21 0000001C B9[0703]                	mov cx, .box0msg4
    22                                  	clr dx
    31 0000001F 31D2                <1>  xor %1, %1
    23 00000021 E8(3E81)                	call os_temp_box
    24                                  	
    25 00000024 E8(1280)                	call os_wait_for_key
    26                                  	
    27 00000027 3C61                    	cmp al, 'a'
    28 00000029 0F841901                	je .setup
    29                                  	
    30 0000002D 3C62                    	cmp al, 'b'
    31 0000002F 740C                    	je .tutorial
    32                                  	
    33 00000031 3C70                    	cmp al, 'p'
    34 00000033 7402                    	je .skip
    35                                  	
    36 00000035 EBC9                    	jmp os_demotour
    37                                  	
    38                                  .skip:
    39 00000037 E8D301                  	call .update_config
    40 0000003A E99E01                  	jmp .exit
    41                                  	
    42                                  .tutorial:
    43 0000003D B90100                  	mov cx, 1
    44 00000040 E8B601                  	call .draw_background
    45                                  
    46                                  	mov16 dx, 0, 2
    35 00000043 BA0002              <1>  mov %1, (%2 + %3 * 256)
    47 00000046 E8(0680)                	call os_move_cursor
    48 00000049 BE[2E03]                	mov si, .t0l0
    49 0000004C E8(0380)                	call os_print_string
    50                                  
    51                                  	mov16 dx, 0, 22
    35 0000004F BA0016              <1>  mov %1, (%2 + %3 * 256)
    52 00000052 E8(0680)                	call os_move_cursor
    53 00000055 BE[B009]                	mov si, .continue
    54 00000058 E8(0380)                	call os_print_string
    55 0000005B E8(1280)                	call os_wait_for_key
    56                                  
    57 0000005E B90100                  	mov cx, 1
    58 00000061 E89501                  	call .draw_background
    59                                  	
    60                                  	mov16 dx, 0, 2
    35 00000064 BA0002              <1>  mov %1, (%2 + %3 * 256)
    61 00000067 E8(0680)                	call os_move_cursor
    62 0000006A BE[9A05]                	mov si, .tsl0
    63 0000006D E8(0380)                	call os_print_string
    64                                  
    65                                  	mov16 dx, 0, 22
    35 00000070 BA0016              <1>  mov %1, (%2 + %3 * 256)
    66 00000073 E8(0680)                	call os_move_cursor
    67 00000076 BE[B009]                	mov si, .continue
    68 00000079 E8(0380)                	call os_print_string
    69 0000007C E8(1280)                	call os_wait_for_key
    70                                  	
    71 0000007F B90200                  	mov cx, 2
    72 00000082 E87401                  	call .draw_background
    73 00000085 B8[A806]                	mov ax, .t1l0
    74 00000088 BB[C706]                	mov bx, .t1l1
    75                                  	clr cx
    31 0000008B 31C9                <1>  xor %1, %1
    76                                  	clr dx
    31 0000008D 31D2                <1>  xor %1, %1
    77 0000008F E8(3980)                	call os_dialog_box
    78                                  	
    79 00000092 B90300                  	mov cx, 3
    80 00000095 E86101                  	call .draw_background
    81 00000098 B8[E106]                	mov ax, .t2l0
    82 0000009B BB[FC06]                	mov bx, .t2l1
    83 0000009E B9[2107]                	mov cx, .t2l2
    84 000000A1 BA0100                  	mov dx, 1
    85 000000A4 E8(3980)                	call os_dialog_box
    86                                  
    87 000000A7 83F801                  	cmp ax, 1
    88 000000AA 7413                    	je .cancel_pressed
    89                                  	
    90                                  .ok_pressed:
    91 000000AC B8[4207]                	mov ax, .t2cancel
    92                                  	clr bx
    31 000000AF 31DB                <1>  xor %1, %1
    93                                  	clr cx
    31 000000B1 31C9                <1>  xor %1, %1
    94 000000B3 BA0100                  	mov dx, 1
    95 000000B6 E8(3980)                	call os_dialog_box
    96                                  	
    97 000000B9 85C0                    	test ax, ax
    98 000000BB 74EF                    	jz .ok_pressed
    99 000000BD EB12                    	jmp .pressed
   100                                  	
   101                                  .cancel_pressed:
   102 000000BF B8[5C07]                	mov ax, .t2ok
   103                                  	clr bx
    31 000000C2 31DB                <1>  xor %1, %1
   104                                  	clr cx
    31 000000C4 31C9                <1>  xor %1, %1
   105 000000C6 BA0100                  	mov dx, 1
   106 000000C9 E8(3980)                	call os_dialog_box
   107                                  	
   108 000000CC 83F801                  	cmp ax, 1
   109 000000CF 74EE                    	je .cancel_pressed
   110                                  	
   111                                  .pressed:
   112 000000D1 B90400                  	mov cx, 4
   113 000000D4 E82201                  	call .draw_background
   114 000000D7 B8[7207]                	mov ax, .t3l0
   115 000000DA BB[9807]                	mov bx, .t3l1
   116 000000DD B9[BB07]                	mov cx, .t3l2
   117                                  	clr dx
    31 000000E0 31D2                <1>  xor %1, %1
   118 000000E2 E8(3980)                	call os_dialog_box
   119                                  	
   120 000000E5 B90400                  	mov cx, 4
   121 000000E8 E80E01                  	call .draw_background
   122 000000EB E8FE00                  	call .reset_name
   123 000000EE E8B500                  	call .change_name
   124                                  	
   125 000000F1 B8[D807]                	mov ax, .t3output1
   126 000000F4 BBCCDE                  	mov bx, CONFIG_USERNAME
   127 000000F7 B90010                  	mov cx, 4096
   128 000000FA E8(3C80)                	call os_string_join
   129 000000FD 89C8                    	mov ax, cx
   130 000000FF BB[E407]                	mov bx, .t3output2
   131 00000102 E8(3C80)                	call os_string_join
   132 00000105 51                      	push cx
   133                                  	
   134 00000106 B90400                  	mov cx, 4
   135 00000109 E8ED00                  	call .draw_background
   136 0000010C 58                      	pop ax
   137                                  	clr bx
    31 0000010D 31DB                <1>  xor %1, %1
   138                                  	clr cx
    31 0000010F 31C9                <1>  xor %1, %1
   139                                  	clr dx
    31 00000111 31D2                <1>  xor %1, %1
   140 00000113 E8(3980)                	call os_dialog_box
   141                                  	
   142 00000116 B90500                  	mov cx, 5
   143 00000119 E8DD00                  	call .draw_background
   144 0000011C B8[7508]                	mov ax, .t4list
   145 0000011F BB[E607]                	mov bx, .t4l0
   146 00000122 B9[2C08]                	mov cx, .t4l1
   147 00000125 E8(A880)                	call os_list_dialog
   148                                  	
   149 00000128 B90600                  	mov cx, 6
   150 0000012B E8CB00                  	call .draw_background
   151                                  
   152 0000012E B8[C508]                	mov ax, .t5l0
   153 00000131 BB[E908]                	mov bx, .t5l1
   154                                  	clr cx
    31 00000134 31C9                <1>  xor %1, %1
   155                                  	clr dx
    31 00000136 31D2                <1>  xor %1, %1
   156 00000138 E8(3980)                	call os_dialog_box
   157                                  	
   158 0000013B B90600                  	mov cx, 6
   159 0000013E E8B800                  	call .draw_background
   160                                  
   161 00000141 E84E00                  	call .change_sound
   162                                  
   163 00000144 EB15                    	jmp .setup_password
   164                                  	
   165                                  .setup:
   166 00000146 E8(8780)                	call os_show_cursor
   167 00000149 B90600                  	mov cx, 6
   168 0000014C E8AA00                  	call .draw_background
   169                                  
   170 0000014F E84000                  	call .change_sound
   171                                  
   172 00000152 B90700                  	mov cx, 7
   173 00000155 E8A100                  	call .draw_background
   174                                  
   175 00000158 E84B00                  	call .change_name
   176                                  
   177                                  .setup_password:
   178 0000015B B90800                  	mov cx, 8
   179 0000015E E89800                  	call .draw_background
   180                                  	
   181 00000161 E85400                  	call .disable_password
   182                                  	
   183 00000164 B8[CE09]                	mov ax, .enablepass_msg1
   184                                  	clr bx
    31 00000167 31DB                <1>  xor %1, %1
   185                                  	clr cx
    31 00000169 31C9                <1>  xor %1, %1
   186 0000016B BA0100                  	mov dx, 1
   187 0000016E E8(3980)                	call os_dialog_box
   188                                  	
   189 00000171 83F801                  	cmp ax, 1
   190 00000174 7403                    	je .setup_done
   191                                  	
   192 00000176 E84500                  	call .set_password
   193                                  	
   194                                  .setup_done:
   195 00000179 E89100                  	call .update_config
   196                                  
   197 0000017C B90900                  	mov cx, 9
   198 0000017F E87700                  	call .draw_background
   199                                  	
   200 00000182 B8[F608]                	mov ax, .t6l0
   201 00000185 BB[1309]                	mov bx, .t6l1
   202 00000188 B9[3A09]                	mov cx, .t6l2
   203                                  	clr dx
    31 0000018B 31D2                <1>  xor %1, %1
   204 0000018D E8(3980)                	call os_dialog_box
   205                                  	
   206 00000190 EB49                    	jmp .exit
   207                                  	
   208                                  ;------------------------------------------
   209                                  
   210                                  .change_sound:
   211 00000192 B8[520A]                	mov ax, .adlib_list
   212 00000195 BB[F009]                	mov bx, .adlib_msg
   213 00000198 B9[280A]                	mov cx, .adlib_msg2
   214 0000019B E8(A880)                	call os_list_dialog
   215                                  	
   216 0000019E 7205                    	jc .err
   217                                  	
   218 000001A0 FEC8                    	dec al
   219 000001A2 A2EEDE                  	mov [CONFIG_ADLIB_DRIVER], al
   220                                  
   221                                  .err:
   222 000001A5 C3                      	ret
   223                                  	
   224                                  
   225                                  .change_name:
   226 000001A6 E84300                  	call .reset_name
   227 000001A9 B020                    	mov al, CFG_USERNAME_MAX_INPUT_LENGTH
   228 000001AB E8(6B81)                	call os_set_max_input_length
   229                                  
   230 000001AE B8CCDE                  	mov ax, CONFIG_USERNAME
   231 000001B1 BB[0B0B]                	mov bx, .name_msg
   232 000001B4 E8(A580)                	call os_input_dialog
   233 000001B7 C3                      	ret
   234                                  	
   235                                  .disable_password:
   236                                  	clr al
    31 000001B8 30C0                <1>  xor %1, %1
   237 000001BA A2AADE                  	mov [CONFIG_PASSWORD_ENABLED], al
   238 000001BD C3                      	ret
   239                                  	
   240                                  .set_password:
   241 000001BE B001                    	mov al, 1
   242 000001C0 A2AADE                  	mov [CONFIG_PASSWORD_ENABLED], al
   243 000001C3 E81900                  	call .reset_password
   244                                  
   245 000001C6 B020                    	mov al, CFG_PASSWORD_MAX_INPUT_LENGTH
   246 000001C8 E8(6B81)                	call os_set_max_input_length
   247                                  
   248 000001CB B8ABDE                  	mov ax, CONFIG_PASSWORD
   249 000001CE BB[E50A]                	mov bx, .password_msg
   250 000001D1 E8(1181)                	call os_password_dialog
   251                                  	
   252 000001D4 BEABDE                  	mov si, CONFIG_PASSWORD
   253 000001D7 E8(F680)                	call os_string_encrypt
   254 000001DA C3                      	ret
   255                                  	
   256                                  .exit:
   257 000001DB E8(0980)                	call os_clear_screen
   258 000001DE C3                      	ret
   259                                  
   260                                  .reset_password:
   261 000001DF BFABDE                  	mov di, CONFIG_PASSWORD	
   262                                  	clr al
    31 000001E2 30C0                <1>  xor %1, %1
   263                                  .reset_password_loop:
   264 000001E4 AA                      	stosb
   265 000001E5 81FFCCDE                	cmp di, CONFIG_PASSWORD + CFG_PASSWORD_MAX_LENGTH
   266 000001E9 7CF9                    	jl .reset_password_loop
   267 000001EB C3                      	ret
   268                                  
   269                                  .reset_name:
   270 000001EC BFCCDE                  	mov di, CONFIG_USERNAME	
   271                                  	clr al
    31 000001EF 30C0                <1>  xor %1, %1
   272                                  .reset_name_loop:
   273 000001F1 AA                      	stosb
   274 000001F2 81FFEDDE                	cmp di, CONFIG_USERNAME + CFG_USERNAME_MAX_LENGTH
   275 000001F6 7CF9                    	jl .reset_name_loop
   276 000001F8 C3                      	ret
   277                                  
   278                                  .draw_background:
   279 000001F9 60                      	pusha
   280 000001FA B8[D20B]                	mov ax, .title_msg
   281 000001FD BB[F50B]                	mov bx, .footer_msg
   282 00000200 B90700                  	mov cx, 7
   283 00000203 E8(2780)                	call os_draw_background
   284 00000206 61                      	popa
   285 00000207 60                      	pusha
   286 00000208 E82D00                  	call .draw_side
   287 0000020B 61                      	popa
   288 0000020C C3                      	ret
   289                                  
   290                                  .update_config:
   291 0000020D B8[F60B]                	mov ax, .config_name
   292 00000210 BBA8DE                  	mov bx, CONFIG_FILE
   293 00000213 B95300                  	mov cx, 83				; SYSTEM.CFG file size
   294 00000216 E8(9380)                	call os_write_file
   295 00000219 720F                    	jc .write_error
   296 0000021B B8[330B]                	mov ax, .donemsg1
   297 0000021E BB[4C0B]                	mov bx, .donemsg2
   298 00000221 B9[730B]                	mov cx, .donemsg3
   299                                  	clr dx
    31 00000224 31D2                <1>  xor %1, %1
   300 00000226 E8(3980)                	call os_dialog_box
   301 00000229 C3                      	ret
   302                                  	
   303                                  .write_error:
   304 0000022A B8[980B]                	mov ax, .errmsg1
   305 0000022D BB[B30B]                	mov bx, .errmsg2
   306                                  	clr cx
    31 00000230 31C9                <1>  xor %1, %1
   307                                  	clr dx
    31 00000232 31D2                <1>  xor %1, %1
   308 00000234 E8(3980)                	call os_dialog_box
   309 00000237 C3                      	ret
   310                                  	
   311                                  .draw_side:
   312 00000238 60                      	pusha
   313 00000239 B601                    	mov dh, 1
   314 0000023B B246                    	mov dl, 70
   315 0000023D BE[4209]                	mov si, .list0
   316 00000240 83C101                  	add cx, 1
   317                                  	
   318                                  .draw_data:
   319 00000243 E8(0680)                	call os_move_cursor
   320 00000246 80FE0B                  	cmp dh, 11
   321 00000249 742C                    	je .draw_end
   322 0000024B 38F1                    	cmp cl, dh
   323                                  	
   324 0000024D 7F04                    	jg .gray
   325 0000024F 740E                    	je .white
   326 00000251 7C18                    	jl .black
   327                                  	
   328                                  .gray:
   329 00000253 B38F                    	mov bl, 10001111b
   330 00000255 E8(D280)                	call os_format_string
   331 00000258 FEC6                    	inc dh
   332 0000025A 83C60B                  	add si, 11
   333 0000025D EBE4                    	jmp .draw_data
   334                                  	
   335                                  .white:
   336 0000025F B3F0                    	mov bl, 11110000b
   337 00000261 E8(D280)                	call os_format_string
   338 00000264 FEC6                    	inc dh
   339 00000266 83C60B                  	add si, 11
   340 00000269 EBD8                    	jmp .draw_data
   341                                  	
   342                                  .black:
   343 0000026B B307                    	mov bl, 00000111b
   344 0000026D E8(D280)                	call os_format_string
   345 00000270 FEC6                    	inc dh
   346 00000272 83C60B                  	add si, 11
   347 00000275 EBCC                    	jmp .draw_data
   348                                  	
   349                                  .draw_end:
   350 00000277 61                      	popa
   351 00000278 C3                      	ret
   352                                  	
   353 00000279 4368616E6765732068-     	.changedone			db 'Changes have been saved.', 0
   353 00000282 617665206265656E20-
   353 0000028B 73617665642E00     
   354                                  		
   355 00000292 5468616E6B20796F75-     	.box0msg1			db 'Thank you for trying out MichalOS!', 0
   355 0000029B 20666F722074727969-
   355 000002A4 6E67206F7574204D69-
   355 000002AD 6368616C4F532100   
   356 000002B5 496620796F75206172-     	.box0msg2			db 'If you are not familiar with the system,', 0
   356 000002BE 65206E6F742066616D-
   356 000002C7 696C69617220776974-
   356 000002D0 682074686520737973-
   356 000002D9 74656D2C00         
   357 000002DE 707265737320422074-     	.box0msg3			db 'press B to start the tutorial. Otherwise', 0
   357 000002E7 6F2073746172742074-
   357 000002F0 6865207475746F7269-
   357 000002F9 616C2E204F74686572-
   357 00000302 7769736500         
   358 00000307 707265737320412074-     	.box0msg4			db 'press A to skip straight to the setup.', 0
   358 00000310 6F20736B6970207374-
   358 00000319 72616967687420746F-
   358 00000322 207468652073657475-
   358 0000032B 702E00             
   359                                  	
   360 0000032E 2057656C636F6D6520-     	.t0l0				db ' Welcome to MichalOS!', 13, 10
   360 00000337 746F204D696368616C-
   360 00000340 4F53210D0A         
   361 00000345 0A                      						db 10
   362 00000346 204D696368616C4F53-     						db ' MichalOS was designed to be a quick, efficient and easy-to-use', 13, 10
   362 0000034F 207761732064657369-
   362 00000358 676E656420746F2062-
   362 00000361 65206120717569636B-
   362 0000036A 2C2065666669636965-
   362 00000373 6E7420616E64206561-
   362 0000037C 73792D746F2D757365-
   362 00000385 0D0A               
   363 00000387 206B6579626F617264-     						db ' keyboard controlled operating system.', 13, 10
   363 00000390 20636F6E74726F6C6C-
   363 00000399 6564206F7065726174-
   363 000003A2 696E67207379737465-
   363 000003AB 6D2E0D0A           
   364 000003AF 0A                      						db 10
   365 000003B0 204E6F772C20796F75-     						db ' Now, you will be taught how to use this system. It is quite easy', 13, 10
   365 000003B9 2077696C6C20626520-
   365 000003C2 74617567687420686F-
   365 000003CB 7720746F2075736520-
   365 000003D4 746869732073797374-
   365 000003DD 656D2E204974206973-
   365 000003E6 207175697465206561-
   365 000003EF 73790D0A           
   366 000003F3 20746F20756E646572-     						db ' to understand, as the UI mainly consists of these 4 elements:', 13, 10
   366 000003FC 7374616E642C206173-
   366 00000405 20746865205549206D-
   366 0000040E 61696E6C7920636F6E-
   366 00000417 7369737473206F6620-
   366 00000420 746865736520342065-
   366 00000429 6C656D656E74733A0D-
   366 00000432 0A                 
   367 00000433 20201A20616E20696E-     						db '  ', 1Ah, ' an information dialog', 13, 10
   367 0000043C 666F726D6174696F6E-
   367 00000445 206469616C6F670D0A 
   368 0000044E 20201A206120322D62-     						db '  ', 1Ah, ' a 2-button dialog', 13, 10
   368 00000457 7574746F6E20646961-
   368 00000460 6C6F670D0A         
   369 00000465 20201A206120746578-     						db '  ', 1Ah, ' a text input dialog', 13, 10
   369 0000046E 7420696E7075742064-
   369 00000477 69616C6F670D0A     
   370 0000047E 20201A2061206C6973-     						db '  ', 1Ah, ' a list dialog', 13, 10
   370 00000487 74206469616C6F670D-
   370 00000490 0A                 
   371 00000491 0A                      						db 10
   372 00000492 20546865205549206F-     						db ' The UI of MichalOS is mainly controlled with the following keys:', 13, 10
   372 0000049B 66204D696368616C4F-
   372 000004A4 53206973206D61696E-
   372 000004AD 6C7920636F6E74726F-
   372 000004B6 6C6C65642077697468-
   372 000004BF 2074686520666F6C6C-
   372 000004C8 6F77696E67206B6579-
   372 000004D1 733A0D0A           
   373 000004D5 20201120103A204D6F-     						db 32, 32, 17, ' ', 16, ': Move the cursor (left/right)', 13, 10
   373 000004DE 766520746865206375-
   373 000004E7 72736F7220286C6566-
   373 000004F0 742F7269676874290D-
   373 000004F9 0A                 
   374 000004FA 20201E201F3A204D6F-     						db 32, 32, 30, ' ', 31, ': Move the cursor (up/down)', 13, 10
   374 00000503 766520746865206375-
   374 0000050C 72736F72202875702F-
   374 00000515 646F776E290D0A     
   375 0000051C 2020456E7465723A20-     						db '  Enter: Select/Choose', 13, 10
   375 00000525 53656C6563742F4368-
   375 0000052E 6F6F73650D0A       
   376 00000534 20204573633A20476F-     						db '  Esc: Go back/Quit', 13, 10
   376 0000053D 206261636B2F517569-
   376 00000546 740D0A             
   377 00000549 0A                      						db 10
   378 0000054A 20496620616E206170-     						db ' If an application uses any other keys, they will be shown in the bottom panel.', 0
   378 00000553 706C69636174696F6E-
   378 0000055C 207573657320616E79-
   378 00000565 206F74686572206B65-
   378 0000056E 79732C207468657920-
   378 00000577 77696C6C2062652073-
   378 00000580 686F776E20696E2074-
   378 00000589 686520626F74746F6D-
   378 00000592 2070616E656C2E00   
   379                                  	
   380 0000059A 205468726F7567686F-     	.tsl0				db ' Throughout the entire OS, you may also use the following shortcuts,', 13, 10
   380 000005A3 75742074686520656E-
   380 000005AC 74697265204F532C20-
   380 000005B5 796F75206D61792061-
   380 000005BE 6C736F207573652074-
   380 000005C7 686520666F6C6C6F77-
   380 000005D0 696E672073686F7274-
   380 000005D9 637574732C0D0A     
   381 000005E0 207768696368206361-     						db ' which can be used by holding down the Alt key and then pressing', 13, 10
   381 000005E9 6E2062652075736564-
   381 000005F2 20627920686F6C6469-
   381 000005FB 6E6720646F776E2074-
   381 00000604 686520416C74206B65-
   381 0000060D 7920616E6420746865-
   381 00000616 6E207072657373696E-
   381 0000061F 670D0A             
   382 00000622 20612066756E637469-     						db ' a function key:', 13, 10
   382 0000062B 6F6E206B65793A0D0A 
   383 00000634 0A                      						db 10
   384 00000635 20201A20416C74202B-     						db '  ', 1Ah, ' Alt + F2: Mute the PC speaker', 13, 10
   384 0000063E 2046323A204D757465-
   384 00000647 207468652050432073-
   384 00000650 7065616B65720D0A   
   385 00000658 20201A20416C74202B-     						db '  ', 1Ah, ' Alt + F3: Unmute the PC speaker', 13, 10
   385 00000661 2046333A20556E6D75-
   385 0000066A 746520746865205043-
   385 00000673 20737065616B65720D-
   385 0000067C 0A                 
   386 0000067D 20201A20416C74202B-     						db '  ', 1Ah, ' Alt + F4: Force-quit the application', 13, 10, 0
   386 00000686 2046343A20466F7263-
   386 0000068F 652D71756974207468-
   386 00000698 65206170706C696361-
   386 000006A1 74696F6E0D0A00     
   387                                  	
   388 000006A8 546869732069732061-     	.t1l0				db 'This is an information dialog.', 0
   388 000006B1 6E20696E666F726D61-
   388 000006BA 74696F6E206469616C-
   388 000006C3 6F672E00           
   389 000006C7 546F20636C6F736520-     	.t1l1				db 'To close it, press Enter.', 0
   389 000006D0 69742C207072657373-
   389 000006D9 20456E7465722E00   
   390                                  	
   391 000006E1 546869732069732061-     	.t2l0				db 'This is a 2-button dialog.', 0
   391 000006EA 20322D627574746F6E-
   391 000006F3 206469616C6F672E00 
   392 000006FC 43686F6F7365206120-     	.t2l1				db 'Choose a button with the arrow keys,', 0
   392 00000705 627574746F6E207769-
   392 0000070E 746820746865206172-
   392 00000717 726F77206B6579732C-
   392 00000720 00                 
   393 00000721 616E64207468656E20-     	.t2l2				db 'and then press Enter to confirm.', 0
   393 0000072A 707265737320456E74-
   393 00000733 657220746F20636F6E-
   393 0000073C 6669726D2E00       
   394                                  	
   395 00000742 4E6F77207472792074-     	.t2cancel			db 'Now try to choose Cancel.', 0
   395 0000074B 6F2063686F6F736520-
   395 00000754 43616E63656C2E00   
   396 0000075C 4E6F77207472792074-     	.t2ok				db 'Now try to choose OK.', 0
   396 00000765 6F2063686F6F736520-
   396 0000076E 4F4B2E00           
   397                                  	
   398 00000772 596F752077696C6C20-     	.t3l0				db 'You will now see a text input dialog.', 0
   398 0000077B 6E6F77207365652061-
   398 00000784 207465787420696E70-
   398 0000078D 7574206469616C6F67-
   398 00000796 2E00               
   399 00000798 5768656E20796F7520-     	.t3l1				db 'When you see it, type what it asks', 0
   399 000007A1 7365652069742C2074-
   399 000007AA 797065207768617420-
   399 000007B3 69742061736B7300   
   400 000007BB 796F7520746F20616E-     	.t3l2				db 'you to and then press Enter.', 0
   400 000007C4 64207468656E207072-
   400 000007CD 65737320456E746572-
   400 000007D6 2E00               
   401                                  	
   402 000007D8 4772656574696E6773-     	.t3output1			db 'Greetings, ', 0
   402 000007E1 2C2000             
   403 000007E4 2100                    	.t3output2			db '!', 0
   404                                  
   405 000007E6 546869732069732061-     	.t4l0				db 'This is a list dialog. Choose an option with the arrow keys and press', 0
   405 000007EF 206C69737420646961-
   405 000007F8 6C6F672E2043686F6F-
   405 00000801 736520616E206F7074-
   405 0000080A 696F6E207769746820-
   405 00000813 746865206172726F77-
   405 0000081C 206B65797320616E64-
   405 00000825 20707265737300     
   406 0000082C 456E74657220746F20-     	.t4l1				db 'Enter to select it. You may also navigate with Home, End, PgUp and PgDn.', 0
   406 00000835 73656C656374206974-
   406 0000083E 2E20596F75206D6179-
   406 00000847 20616C736F206E6176-
   406 00000850 696761746520776974-
   406 00000859 6820486F6D652C2045-
   406 00000862 6E642C205067557020-
   406 0000086B 616E64205067446E2E-
   406 00000874 00                 
   407 00000875 312E2043686F6F7365-     	.t4list				db "1. Choose me!,2. No - choose me!,3. It doesn't matter...,4. I'm also an option!", 0
   407 0000087E 206D65212C322E204E-
   407 00000887 6F202D2063686F6F73-
   407 00000890 65206D65212C332E20-
   407 00000899 497420646F65736E27-
   407 000008A2 74206D61747465722E-
   407 000008AB 2E2E2C342E2049276D-
   407 000008B4 20616C736F20616E20-
   407 000008BD 6F7074696F6E2100   
   408                                  	
   409 000008C5 57652077696C6C206E-     	.t5l0				db 'We will now have to go through some', 0
   409 000008CE 6F7720686176652074-
   409 000008D7 6F20676F207468726F-
   409 000008E0 75676820736F6D6500 
   410 000008E9 626173696320736574-     	.t5l1				db 'basic setup.', 0
   410 000008F2 75702E00           
   411                                  	
   412 000008F6 4D696368616C4F5320-     	.t6l0				db 'MichalOS Setup has finished.', 0
   412 000008FF 536574757020686173-
   412 00000908 2066696E6973686564-
   412 00000911 2E00               
   413 00000913 576520686F70652074-     	.t6l1				db 'We hope that you will enjoy using this', 0
   413 0000091C 68617420796F752077-
   413 00000925 696C6C20656E6A6F79-
   413 0000092E 207573696E67207468-
   413 00000937 697300             
   414 0000093A 73797374656D2E00        	.t6l2				db 'system.', 0
   415                                  	
   416 00000942 205374617274202020-     	.list0				db ' Start    ', 0
   416 0000094B 2000               
   417 0000094D 20496E74726F202020-     	.list1				db ' Intro    ', 0
   417 00000956 2000               
   418 00000958 2057696E2E20233120-     	.list2				db ' Win. #1  ', 0
   418 00000961 2000               
   419 00000963 2057696E2E20233220-     	.list3				db ' Win. #2  ', 0
   419 0000096C 2000               
   420 0000096E 2057696E2E20233320-     	.list4				db ' Win. #3  ', 0
   420 00000977 2000               
   421 00000979 2057696E2E20233420-     	.list5				db ' Win. #4  ', 0
   421 00000982 2000               
   422 00000984 20536F756E64202020-     	.list6				db ' Sound    ', 0
   422 0000098D 2000               
   423 0000098F 204E616D6520202020-     	.list7				db ' Name     ', 0
   423 00000998 2000               
   424 0000099A 2050617373776F7264-     	.list8				db ' Password ', 0
   424 000009A3 2000               
   425 000009A5 2054686520656E6420-     	.list9				db ' The end  ', 0
   425 000009AE 2000               
   426                                  	
   427 000009B0 20507265737320616E-     	.continue			db ' Press any key to continue...', 0
   427 000009B9 79206B657920746F20-
   427 000009C2 636F6E74696E75652E-
   427 000009CB 2E2E00             
   428                                  	
   429 000009CE 446F20796F75207769-     	.enablepass_msg1	db 'Do you wish to set up a password?', 0
   429 000009D7 736820746F20736574-
   429 000009E0 207570206120706173-
   429 000009E9 73776F72643F00     
   430                                  	
   431 000009F0 536F6D65206170706C-     	.adlib_msg			db 'Some applications may want to play multi-channel music.', 0
   431 000009F9 69636174696F6E7320-
   431 00000A02 6D61792077616E7420-
   431 00000A0B 746F20706C6179206D-
   431 00000A14 756C74692D6368616E-
   431 00000A1D 6E656C206D75736963-
   431 00000A26 2E00               
   432 00000A28 576869636820736F75-     	.adlib_msg2			db 'Which sound device would you want to use?', 0
   432 00000A31 6E6420646576696365-
   432 00000A3A 20776F756C6420796F-
   432 00000A43 752077616E7420746F-
   432 00000A4C 207573653F00       
   433                                  	
   434 00000A52 5374616E6461726420-     	.adlib_list			db 'Standard Adlib card (ports 0x388-0x389),9-voice PC speaker square wave generator (PWM),9-voice PC speaker square wave generator (PWM - max volume)', 0
   434 00000A5B 41646C696220636172-
   434 00000A64 642028706F72747320-
   434 00000A6D 30783338382D307833-
   434 00000A76 3839292C392D766F69-
   434 00000A7F 636520504320737065-
   434 00000A88 616B65722073717561-
   434 00000A91 726520776176652067-
   434 00000A9A 656E657261746F7220-
   434 00000AA3 2850574D292C392D76-
   434 00000AAC 6F6963652050432073-
   434 00000AB5 7065616B6572207371-
   434 00000ABE 756172652077617665-
   434 00000AC7 2067656E657261746F-
   434 00000AD0 72202850574D202D20-
   434 00000AD9 6D617820766F6C756D-
   434 00000AE2 652900             
   435                                  
   436 00000AE5 456E7465722061206E-     	.password_msg		db 'Enter a new password (32 chars max.):', 0
   436 00000AEE 65772070617373776F-
   436 00000AF7 726420283332206368-
   436 00000B00 617273206D61782E29-
   436 00000B09 3A00               
   437 00000B0B 506C6561736520656E-     	.name_msg			db 'Please enter your name (32 chars max.):', 0
   437 00000B14 74657220796F757220-
   437 00000B1D 6E616D652028333220-
   437 00000B26 6368617273206D6178-
   437 00000B2F 2E293A00           
   438                                  	
   439 00000B33 4368616E6765732068-     	.donemsg1			db 'Changes have been saved.', 0
   439 00000B3C 617665206265656E20-
   439 00000B45 73617665642E00     
   440 00000B4C 496620796F75207769-     	.donemsg2			db 'If you wish to change anything, choose', 0
   440 00000B55 736820746F20636861-
   440 00000B5E 6E676520616E797468-
   440 00000B67 696E672C2063686F6F-
   440 00000B70 736500             
   441 00000B73 746865205365747469-     	.donemsg3			db 'the Settings app from the main menu.', 0
   441 00000B7C 6E6773206170702066-
   441 00000B85 726F6D20746865206D-
   441 00000B8E 61696E206D656E752E-
   441 00000B97 00                 
   442                                  	
   443 00000B98 4572726F7220777269-     	.errmsg1			db 'Error writing to the disk!', 0
   443 00000BA1 74696E6720746F2074-
   443 00000BAA 6865206469736B2100 
   444 00000BB3 4D616B652073757265-     	.errmsg2			db 'Make sure it is not read only!', 0
   444 00000BBC 206974206973206E6F-
   444 00000BC5 742072656164206F6E-
   444 00000BCE 6C792100           
   445                                  	
   446 00000BD2 4D696368616C4F5320-     	.title_msg			db 'MichalOS Demo tour & Initial setup', 0
   446 00000BDB 44656D6F20746F7572-
   446 00000BE4 202620496E69746961-
   446 00000BED 6C20736574757000   
   447 00000BF5 00                      	.footer_msg			db 0
   448                                  
   449 00000BF6 53595354454D2E4346-     	.config_name		db 'SYSTEM.CFG', 0
   449 00000BFF 4700               
   450                                  
   451 00000C01 9F                      	.test_data_bgcolor	db 9Fh
   452 00000C02 4F                      	.test_data_wincolor	db 4Fh
   453 00000C03 00                      	.test_pass_enabled	db 0
   454 00000C04 00<rep 21h>             	.test_pass_data		times 33 db 0
   455 00000C25 546573742075736572      	.test_username		db 'Test user'
   456 00000C2E 00<rep 18h>             	.test_usernamepad	times 33 - 9 db 0
   457 00000C46 01                      	.test_sndenable		db 1
   458 00000C47 00                      	.test_adlibdrv		db 0
   459 00000C48 01                      	.test_menudim		db 1
   460 00000C49 F0                      	.test_menucolor		db 0F0h
   461 00000C4A 00                      	.test_dosfont		db 0
   462 00000C4B 03                      	.test_scrnsave		db 3
   463 00000C4C 0002                    	.test_stacksize		dw 512	; 8 kB
   464 00000C4E 00<rep 4h>              	.test_blank			times 4 db 0
   465 00000C52 0000                    	.test_minute_offset	dw 0
   466                                  	
   467                                  	.test_data_end:
   468                                  	
