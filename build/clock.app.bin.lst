     1                                  ; ------------------------------------------------------------------
     2                                  ; MichalOS Clock
     3                                  ; ------------------------------------------------------------------
     4                                  
     5                                  	%INCLUDE "include/program.inc"
     1                              <1> ; ------------------------------------------------------------------
     2                              <1> ; Include file for MichalOS program or kernel module development
     3                              <1> ; ------------------------------------------------------------------
     4                              <1> 
     5                              <1> 	BITS 16
     6                              <1> 	ORG 100h
     7                              <1> 	
     8                              <1> 	%include "include/constants.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS kernel/program development - constants & macros
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ------------------------------------------------------------------
     6                              <2> ; COLOURS (eg for os_draw_background and os_draw_block)
     7                              <2> 
     8                              <2> %DEFINE BLACK_ON_WHITE		11110000b
     9                              <2> %DEFINE WHITE_ON_BLACK		00001111b
    10                              <2> 
    11                              <2> ; ------------------------------------------------------------------
    12                              <2> ; KEYS
    13                              <2> 
    14                              <2> %DEFINE KEY_UP		72
    15                              <2> %DEFINE KEY_DOWN	80
    16                              <2> %DEFINE KEY_LEFT	75
    17                              <2> %DEFINE KEY_RIGHT	77
    18                              <2> 
    19                              <2> %DEFINE KEY_ESC		27
    20                              <2> %DEFINE KEY_ENTER	13
    21                              <2> 
    22                              <2> ; ------------------------------------------------------------------
    23                              <2> ; MACROS
    24                              <2> 
    25                              <2> %macro syscall 1
    26                              <2> 	mov bp, %1
    27                              <2> 	call os_syscall
    28                              <2> %endmacro
    29                              <2> 
    30                              <2> %macro clr 1
    31                              <2> 	xor %1, %1
    32                              <2> %endmacro
    33                              <2> 
    34                              <2> %macro mov16 3
    35                              <2> 	mov %1, (%2 + %3 * 256)
    36                              <2> %endmacro
    37                              <2> 
    38                              <2> %macro movs 2
    39                              <2> 	push %2
    40                              <2> 	pop %1
    41                              <2> %endmacro
    42                              <2> 
    43                              <2> ; ------------------------------------------------------------------
    44                              <2> ; MEMORY LOCATIONS
    45                              <2> 
    46                              <2> %define ADLIB_BUFFER 0500h
    47                              <2> %define DESKTOP_BACKGROUND 0600h
    48                              <2> %define SYSTEM_FONT 1600h
    49                              <2> %define FILE_MANAGER 2600h
    50                              <2> %define DISK_PARAMS 2E00h
    51                              <2> 
    52                              <2> %define DISK_BUFFER 0E000h
    53                              <2> %define CONFIG_FILE 57000
    54                              <2> %define CONFIG_FILE_SIZE 83
    55                              <2> 
    56                              <2> ; ------------------------------------------------------------------
    57                              <2> ; CONFIG FILE LOCATIONS
    58                              <2> 
    59                              <2> %define CONFIG(x) (CONFIG_FILE + x)
    60                              <2> 
    61                              <2> ; 0 = Desktop background color (BYTE)
    62                              <2> %define CONFIG_DESKTOP_BG_COLOR CONFIG(0)
    63                              <2> 
    64                              <2> ; 1 = Window background color (BYTE)
    65                              <2> %define CONFIG_WINDOW_BG_COLOR CONFIG(1)
    66                              <2> 
    67                              <2> ; 2 = Password enabled (BYTE)
    68                              <2> %define CONFIG_PASSWORD_ENABLED CONFIG(2)
    69                              <2> 
    70                              <2> ; 3 - 35 = Password data (STRING, 32 chars + '\0')
    71                              <2> %define CONFIG_PASSWORD CONFIG(3)
    72                              <2> %define CFG_PASSWORD_MAX_INPUT_LENGTH 32
    73                              <2> %define CFG_PASSWORD_MAX_LENGTH 33
    74                              <2> 
    75                              <2> ; 36 - 68 = Username (STRING, 32 chars + '\0')
    76                              <2> %define CONFIG_USERNAME CONFIG(36)
    77                              <2> %define CFG_USERNAME_MAX_INPUT_LENGTH 32
    78                              <2> %define CFG_USERNAME_MAX_LENGTH 33
    79                              <2> 
    80                              <2> ; 69 - Sound enabled on startup (BYTE)
    81                              <2> %define CONFIG_SOUND_ENABLED CONFIG(69)
    82                              <2> 
    83                              <2> ; 70 - Adlib driver number
    84                              <2> %define CONFIG_ADLIB_DRIVER CONFIG(70)
    85                              <2> %define CFG_ADLIB_STD_DRIVER 0
    86                              <2> %define CFG_ADLIB_PWM_DRIVER 1
    87                              <2> %define CFG_ADLIB_PWM_LOUD_DRIVER 2
    88                              <2> 
    89                              <2> ; 71 - Menu screen dimming enabled (BYTE)
    90                              <2> %define CONFIG_MENU_DIMMING CONFIG(71)
    91                              <2> 
    92                              <2> ; 72 - Menu color (BYTE)
    93                              <2> %define CONFIG_MENU_BG_COLOR CONFIG(72)
    94                              <2> 
    95                              <2> ; 73 - "DOS" font enabled (BYTE)
    96                              <2> %define CONFIG_FONT CONFIG(73)
    97                              <2> %define CFG_FONT_MICHALOS 0
    98                              <2> %define CFG_FONT_BIOS 1
    99                              <2> 
   100                              <2> ; 74 - Minutes to wait for screensaver (BYTE)
   101                              <2> %define CONFIG_SCREENSAVER_MINUTES CONFIG(74)
   102                              <2> 
   103                              <2> ; 75 - System stack size in 16-byte blocks (WORD)
   104                              <2> %define CONFIG_STACKSGMT_SIZE CONFIG(75)
   105                              <2> 
   106                              <2> ; 77 - 80 - Unused *******************************
   107                              <2> 
   108                              <2> ; 81 - Minute time offset (WORD)
   109                              <2> %define CONFIG_TIMEZONE_OFFSET CONFIG(81)
   110                              <2> 
   111                              <2> ; ------------------------------------------------------------------
   112                              <2> ; MUSICAL NOTE FREQUENCY LIST
   113                              <2> 
   114                              <2> A2		equ 110
   115                              <2> AS2		equ 117
   116                              <2> B2		equ 124
   117                              <2> C3		equ 131
   118                              <2> CS3		equ 139
   119                              <2> D3		equ 147
   120                              <2> DS3		equ 156
   121                              <2> E3		equ 165
   122                              <2> F3		equ 175
   123                              <2> FS3		equ 185
   124                              <2> G3		equ 196
   125                              <2> GS3		equ 208
   126                              <2> A3		equ 220
   127                              <2> AS3		equ 233
   128                              <2> B3		equ 247
   129                              <2> C4		equ 262
   130                              <2> CS4		equ 277
   131                              <2> D4		equ 294
   132                              <2> DS4		equ 311
   133                              <2> E4		equ 330
   134                              <2> F4		equ 349
   135                              <2> FS4		equ 370
   136                              <2> G4		equ 392
   137                              <2> GS4		equ 415
   138                              <2> A4		equ 440
   139                              <2> AS4		equ 466
   140                              <2> B4		equ 494
   141                              <2> C5		equ 523
   142                              <2> CS5		equ 554
   143                              <2> D5		equ 587
   144                              <2> DS5		equ 622
   145                              <2> E5		equ 659
   146                              <2> F5		equ 698
   147                              <2> FS5		equ 740
   148                              <2> G5		equ 784
   149                              <2> GS5		equ 831
   150                              <2> A5		equ 880
   151                              <2> AS5		equ 932
   152                              <2> B5		equ 988
   153                              <2> C6		equ 1046
   154                              <2> CS6		equ 1109
   155                              <2> D6		equ 1175
   156                              <2> DS6		equ 1245
   157                              <2> E6		equ 1319
   158                              <2> F6		equ 1397
   159                              <2> FS6		equ 1480
   160                              <2> G6		equ 1568
   161                              <2> GS6		equ 1661
   162                              <2> A6		equ 1760
   163                              <2> AS6		equ 1865
   164                              <2> B6		equ 1976
   165                              <2> C7		equ 2093
   166                              <2> CS7		equ 2217
   167                              <2> D7		equ 2349
   168                              <2> DS7		equ 2489
   169                              <2> E7		equ 2637
   170                              <2> F7		equ 2794
   171                              <2> FS7		equ 2960
   172                              <2> G7		equ 3136
   173                              <2> GS7		equ 3322
   174                              <2> A7		equ 3520
   175                              <2> AS7		equ 3729
   176                              <2> B7		equ 3951
   177                              <2> C8		equ 4186
   178                              <2> CS8		equ 4435
   179                              <2> D8		equ 4699
   180                              <2> DS8		equ 4978
   181                              <2> E8		equ 5274
   182                              <2> F8		equ 5588
   183                              <2> FS8		equ 5920
   184                              <2> G8		equ 6272
   185                              <2> GS8		equ 6645
   186                              <2> A8		equ 7040
   187                              <2> AS8		equ 7459
   188                              <2> B8		equ 7902
     9                              <1> 	%include "include/syscalls.asm"
     1                              <2> ; ------------------------------------------------------------------
     2                              <2> ; Include file for MichalOS program development - syscalls
     3                              <2> ; ------------------------------------------------------------------
     4                              <2> 
     5                              <2> ; ==================================================================
     6                              <2> ; MichalOS Sound functions (PC speaker, YM3812)
     7                              <2> ; ==================================================================
     8                              <2> 
     9                              <2> ; ------------------------------------------------------------------
    10                              <2> ; os_speaker_tone -- Generate PC speaker tone (call os_speaker_off to turn off)
    11                              <2> ; IN: AX = note frequency (in Hz)
    12                              <2> ; OUT: None, registers preserved
    13                              <2> 
    14                              <2> os_speaker_tone equ 32795
    15                              <2> 
    16                              <2> ; ------------------------------------------------------------------
    17                              <2> ; os_speaker_raw_period -- Generate PC speaker tone (call os_speaker_off to turn off)
    18                              <2> ; IN: AX = note period (= 105000000 / 88 / freq)
    19                              <2> ; OUT: None, registers preserved
    20                              <2> 
    21                              <2> os_speaker_raw_period equ 33107
    22                              <2> 
    23                              <2> ; ------------------------------------------------------------------
    24                              <2> ; os_speaker_note_length -- Generate PC speaker tone for a set amount of time and then stop
    25                              <2> ; IN: AX = note frequency, CX = length (in ticks)
    26                              <2> ; OUT: None, registers preserved
    27                              <2> 
    28                              <2> os_speaker_note_length equ 32900
    29                              <2> 
    30                              <2> ; ------------------------------------------------------------------
    31                              <2> ; os_speaker_off -- Turn off PC speaker
    32                              <2> ; IN/OUT: None, registers preserved
    33                              <2> 
    34                              <2> os_speaker_off equ 32798
    35                              <2> 
    36                              <2> ; ------------------------------------------------------------------
    37                              <2> ; os_speaker_muted -- Check if the PC speaker is muted
    38                              <2> ; OUT: ZF set if muted, clear if not
    39                              <2> 
    40                              <2> os_speaker_muted equ 33125
    41                              <2> 
    42                              <2> ; ------------------------------------------------------------------
    43                              <2> ; os_start_adlib -- Starts the selected Adlib driver
    44                              <2> ; IN: SI = interrupt handler, CX = prescaler, BL = number of channels
    45                              <2> ; The interrupt will fire at 33144 Hz (the closest possible to 32768 Hz) divided by CX.
    46                              <2> ; Common prescaler values:
    47                              <2> ;		33 = ~1 kHz (1004.362 Hz)
    48                              <2> ;		663 = ~50 Hz (49.991 Hz)
    49                              <2> ;		1820 = ~18.2 Hz (18.211 Hz)
    50                              <2> ; OUT: None, registers preserved
    51                              <2> 
    52                              <2> os_start_adlib equ 32984
    53                              <2> 
    54                              <2> ; ------------------------------------------------------------------
    55                              <2> ; os_stop_adlib -- Stops the Adlib driver
    56                              <2> ; IN/OUT: None, registers preserved
    57                              <2> 
    58                              <2> os_stop_adlib equ 33026
    59                              <2> 
    60                              <2> ; ------------------------------------------------------------------
    61                              <2> ; os_adlib_regwrite -- Write to a YM3812 register
    62                              <2> ; IN: AH/AL - register address/value to write
    63                              <2> 
    64                              <2> os_adlib_regwrite equ 32843
    65                              <2> 
    66                              <2> ; ------------------------------------------------------------------
    67                              <2> ; os_adlib_mute -- Mute the YM3812's current state
    68                              <2> ; IN/OUT: None
    69                              <2> 
    70                              <2> os_adlib_mute equ 33044
    71                              <2> 
    72                              <2> ; ------------------------------------------------------------------
    73                              <2> ; os_adlib_unmute -- Unmute the YM3812's current state
    74                              <2> ; IN/OUT: None
    75                              <2> 
    76                              <2> os_adlib_unmute equ 33089
    77                              <2> 
    78                              <2> ; ------------------------------------------------------------------
    79                              <2> ; os_adlib_calcfreq -- Play a frequency
    80                              <2> ; IN: AX - frequency, CL = channel
    81                              <2> ; OUT: None, registers preserved
    82                              <2> 
    83                              <2> os_adlib_calcfreq equ 32966
    84                              <2> 
    85                              <2> ; ------------------------------------------------------------------
    86                              <2> ; os_adlib_noteoff -- Turns off a note
    87                              <2> ; IN: CL = channel
    88                              <2> ; OUT: None, registers preserved
    89                              <2> 
    90                              <2> os_adlib_noteoff equ 33029
    91                              <2> 
    92                              <2> ; ==================================================================
    93                              <2> ; MichalOS Text display output functions
    94                              <2> ; ==================================================================
    95                              <2> 
    96                              <2> ; ------------------------------------------------------------------
    97                              <2> ; os_putchar -- Puts a character on the screen
    98                              <2> ; IN: AL = character
    99                              <2> ; OUT: None, registers preserved
   100                              <2> 
   101                              <2> os_putchar equ 32981
   102                              <2> 
   103                              <2> ; ------------------------------------------------------------------
   104                              <2> ; os_put_chars -- Puts up to a set amount of characters on the screen
   105                              <2> ; IN: BL = terminator, DS:SI = location, CX = character count
   106                              <2> ; OUT: None, registers preserved
   107                              <2> 
   108                              <2> os_put_chars equ 32996
   109                              <2> 
   110                              <2> ; ------------------------------------------------------------------
   111                              <2> ; os_print_string -- Displays text
   112                              <2> ; IN: DS:SI = message location (zero-terminated string)
   113                              <2> ; OUT: None, registers preserved
   114                              <2> 
   115                              <2> os_print_string equ 32771
   116                              <2> 
   117                              <2> ; ------------------------------------------------------------------
   118                              <2> ; os_print_string_box -- Displays text inside a text-box.
   119                              <2> ; IN: DS:SI = message location (zero-terminated string), DL = left alignment
   120                              <2> ; OUT: None, registers preserved
   121                              <2> 
   122                              <2> os_print_string_box equ 32993
   123                              <2> 
   124                              <2> ; ------------------------------------------------------------------
   125                              <2> ; os_format_string -- Displays colored text
   126                              <2> ; IN: DS:SI = message location (zero-terminated string), BL = text color
   127                              <2> ; OUT: None, registers preserved
   128                              <2> 
   129                              <2> os_format_string equ 32978
   130                              <2> 
   131                              <2> ; ------------------------------------------------------------------
   132                              <2> ; os_clear_screen -- Clears the screen to background
   133                              <2> ; IN/OUT: None, registers preserved
   134                              <2> 
   135                              <2> os_clear_screen equ 32777
   136                              <2> 
   137                              <2> ; ------------------------------------------------------------------
   138                              <2> ; os_move_cursor -- Moves cursor in text mode
   139                              <2> ; IN: DH, DL = row, column
   140                              <2> ; OUT: None, registers preserved
   141                              <2> 
   142                              <2> os_move_cursor equ 32774
   143                              <2> 
   144                              <2> ; ------------------------------------------------------------------
   145                              <2> ; os_get_cursor_pos -- Return position of text cursor
   146                              <2> ; IN: None
   147                              <2> ; OUT: DH, DL = row, column
   148                              <2> 
   149                              <2> os_get_cursor_pos equ 32870
   150                              <2> 
   151                              <2> ; ------------------------------------------------------------------
   152                              <2> ; os_show_cursor -- Turns on cursor in text mode
   153                              <2> ; IN/OUT: None, registers preserved
   154                              <2> 
   155                              <2> os_show_cursor equ 32903
   156                              <2> 
   157                              <2> ; ------------------------------------------------------------------
   158                              <2> ; os_hide_cursor -- Turns off cursor in text mode
   159                              <2> ; IN/OUT: None, registers preserved
   160                              <2> 
   161                              <2> os_hide_cursor equ 32906
   162                              <2> 
   163                              <2> ; ------------------------------------------------------------------
   164                              <2> ; os_draw_block -- Render block of specified colour
   165                              <2> ; IN: BL/DL/DH/SI/DI = colour/start X pos/start Y pos/width/finish Y pos
   166                              <2> ; OUT: None, registers preserved
   167                              <2> 
   168                              <2> os_draw_block equ 32945
   169                              <2> 
   170                              <2> ; ------------------------------------------------------------------
   171                              <2> ; os_file_selector -- Show a file selection dialog
   172                              <2> ; IN: None
   173                              <2> ; OUT: AX = location of filename string (or carry set if Esc pressed)
   174                              <2> 
   175                              <2> os_file_selector equ 32855
   176                              <2> 
   177                              <2> ; ------------------------------------------------------------------
   178                              <2> ; os_file_selector_filtered -- Show a file selection dialog only 
   179                              <2> ; with files mathing the filter
   180                              <2> ; IN: ES:BX = location of file extension list (0 if none)
   181                              <2> ; OUT: DS:AX = location of filename string (or carry set if Esc pressed)
   182                              <2> 
   183                              <2> os_file_selector_filtered equ 33122
   184                              <2> 
   185                              <2> ; ------------------------------------------------------------------
   186                              <2> ; os_list_dialog_tooltip -- Show a dialog with a list of options and a tooltip.
   187                              <2> ; That means, when the user changes the selection, the application will be called back
   188                              <2> ; to change the tooltip's contents.
   189                              <2> ; IN: DS:AX = comma-separated list of strings to show (zero-terminated),
   190                              <2> ;     DS:BX = first help string, DS:CX = second help string
   191                              <2> ;     SI = key/display callback (see os_list_dialog_ex)
   192                              <2> ;     if AX = 0: DI = entry display callback, DX = number of entries
   193                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   194                              <2> 
   195                              <2> os_list_dialog_tooltip equ 32912
   196                              <2> 
   197                              <2> ; ------------------------------------------------------------------
   198                              <2> ; os_list_dialog -- Show a dialog with a list of options
   199                              <2> ; IN: ES:AX = comma-separated list of strings to show (zero-terminated),
   200                              <2> ;     ES:BX = first help string, ES:CX = second help string
   201                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   202                              <2> 
   203                              <2> os_list_dialog equ 32936
   204                              <2> 
   205                              <2> ; ------------------------------------------------------------------
   206                              <2> ; os_list_dialog_ex -- Show a dialog with a list of options
   207                              <2> ; IN: DS:BX = pointer to setup struct
   208                              <2> ;       Addr Size Description
   209                              <2> ;       000h word Pointer to entry display callback (accepts CX as entry ID, prints out result) - valid only if ptr to list is zero
   210                              <2> ;       002h word Pointer to comma-separated list of strings to show (zero-terminated)
   211                              <2> ;       004h word Pointer to key/entry change callback (accepts AX as entry ID, CX as keypress),
   212                              <2> ;       006h word Number of entries (if 0, then it is automatically calculated from 002h)
   213                              <2> ;       008h word Pointer to first help string (if 0, then the list will fill the whole dialog)
   214                              <2> ;       00Ah word Pointer to second help string
   215                              <2> ;       00Ch word (ES) Pointer to history data (points to a 5 byte array)
   216                              <2> ;       00Eh byte Screen X position
   217                              <2> ;       00Fh byte Screen Y position
   218                              <2> ;       010h byte Dialog width
   219                              <2> ;       011h byte Dialog height
   220                              <2> ;       012h word Source segment (used for comma-separated list & help strings)
   221                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   222                              <2> 
   223                              <2> os_list_dialog_ex equ 33113
   224                              <2> 
   225                              <2> ; ------------------------------------------------------------------
   226                              <2> ; os_select_list -- Draws a list of entries (defined by a callback) to select from.
   227                              <2> ; IN: AX = width/height, BL = color, CX = number of entries, DX = X/Y pos,
   228                              <2> ;     SI = callback (if C clear = accepts an entry ID in CX, prints an appropriate string,
   229                              <2> ;     if C set = accepts key input in AX, entry ID in CX; not required to preserve regs),
   230                              <2> ;     ES:DI = pointer to a history struct (word .num_of_entries, word .skip_num, byte .cursor) or 0 if none
   231                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc pressed
   232                              <2> 
   233                              <2> os_select_list equ 33110
   234                              <2> 
   235                              <2> ; ------------------------------------------------------------------
   236                              <2> ; os_draw_background -- Clear screen with white top and bottom bars
   237                              <2> ; containing text, and a coloured middle section.
   238                              <2> ; IN: DS:AX/BX = top/bottom string locations, CX = colour (256 if the app wants to display the default background)
   239                              <2> ; OUT: None, registers preserved
   240                              <2> 
   241                              <2> os_draw_background equ 32807
   242                              <2> 
   243                              <2> ; ------------------------------------------------------------------
   244                              <2> ; os_print_newline -- Reset cursor to start of next line
   245                              <2> ; IN/OUT: None, registers preserved
   246                              <2> 
   247                              <2> os_print_newline equ 32783
   248                              <2> 
   249                              <2> ; ------------------------------------------------------------------
   250                              <2> ; os_dump_registers -- Dumps all register contents in hex to the screen
   251                              <2> ; IN: All registers
   252                              <2> ; OUT: None, registers preserved
   253                              <2> 
   254                              <2> os_dump_registers equ 32909
   255                              <2> 
   256                              <2> ; ------------------------------------------------------------------
   257                              <2> ; os_input_dialog -- Get text string from user via a dialog box
   258                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   259                              <2> ; OUT: None, registers preserved
   260                              <2> 
   261                              <2> os_input_dialog equ 32933
   262                              <2> 
   263                              <2> ; ------------------------------------------------------------------
   264                              <2> ; os_password_dialog -- Get a password from user via a dialog box
   265                              <2> ; IN: ES:AX = string location, DS:BX = message to show
   266                              <2> ; OUT: None, registers preserved
   267                              <2> 
   268                              <2> os_password_dialog equ 33041
   269                              <2> 
   270                              <2> ; ------------------------------------------------------------------
   271                              <2> ; os_dialog_box -- Print dialog box in middle of screen, with button(s)
   272                              <2> ; IN: DS:AX, DS:BX, DS:CX = string locations (set registers to 0 for no display),
   273                              <2> ; IN: DX = 0 for single 'OK' dialog,
   274                              <2> ;          1 for two-button 'OK' and 'Cancel' ('OK' selected by default),
   275                              <2> ;          2 for two-button 'OK' and 'Cancel' ('Cancel' selected by default)
   276                              <2> ; OUT: If two-button mode, AX = 0 for OK and 1 for cancel
   277                              <2> ; NOTE: Each string is limited to 40 characters
   278                              <2> 
   279                              <2> os_dialog_box equ 32825
   280                              <2> 
   281                              <2> ; ------------------------------------------------------------------
   282                              <2> ; os_print_space -- Print a space to the screen
   283                              <2> ; IN/OUT: None, registers preserved
   284                              <2> 
   285                              <2> os_print_space equ 32873
   286                              <2> 
   287                              <2> ; ------------------------------------------------------------------
   288                              <2> ; os_print_digit -- Displays contents of AX as a single digit
   289                              <2> ; Works up to base 37, ie digits 0-Z
   290                              <2> ; IN: AX = "digit" to format and print
   291                              <2> ; OUT: None, registers preserved
   292                              <2> 
   293                              <2> os_print_digit equ 32879
   294                              <2> 
   295                              <2> ; ------------------------------------------------------------------
   296                              <2> ; os_print_1hex -- Displays low nibble of AL in hex format
   297                              <2> ; IN: AL = number to format and print
   298                              <2> ; OUT: None, registers preserved
   299                              <2> 
   300                              <2> os_print_1hex equ 32882
   301                              <2> 
   302                              <2> ; ------------------------------------------------------------------
   303                              <2> ; os_print_2hex -- Displays AL in hex format
   304                              <2> ; IN: AL = number to format and print
   305                              <2> ; OUT: None, registers preserved
   306                              <2> 
   307                              <2> os_print_2hex equ 32885
   308                              <2> 
   309                              <2> ; ------------------------------------------------------------------
   310                              <2> ; os_print_4hex -- Displays AX in hex format
   311                              <2> ; IN: AX = number to format and print
   312                              <2> ; OUT: None, registers preserved
   313                              <2> 
   314                              <2> os_print_4hex equ 32888
   315                              <2> 
   316                              <2> ; ------------------------------------------------------------------
   317                              <2> ; os_print_8hex - Displays EAX in hex format
   318                              <2> ; IN: EAX = unsigned integer
   319                              <2> ; OUT: None, registers preserved
   320                              <2> 
   321                              <2> os_print_8hex equ 33065
   322                              <2> 
   323                              <2> ; ------------------------------------------------------------------
   324                              <2> ; os_print_int -- Prints an integer in decimal.
   325                              <2> ; IN: AX = unsigned integer
   326                              <2> ; OUT: None, registers preserved
   327                              <2> 
   328                              <2> os_print_int equ 33101
   329                              <2> 
   330                              <2> ; ------------------------------------------------------------------
   331                              <2> ; os_print_32int -- Prints a 32 bit integer in decimal.
   332                              <2> ; IN: EAX = unsigned integer
   333                              <2> ; OUT: None, registers preserved
   334                              <2> 
   335                              <2> os_print_32int equ 32951
   336                              <2> 
   337                              <2> ; ------------------------------------------------------------------
   338                              <2> ; os_input_string -- Take string from keyboard entry
   339                              <2> ; IN: ES:AX = location of string
   340                              <2> ; OUT: None, registers preserved
   341                              <2> 
   342                              <2> os_input_string equ 32819
   343                              <2> 
   344                              <2> ; ------------------------------------------------------------------
   345                              <2> ; os_input_password -- Take password from keyboard entry
   346                              <2> ; IN: ES:AX = location of string
   347                              <2> ; OUT: None, registers preserved
   348                              <2> 
   349                              <2> os_input_password equ 33077
   350                              <2> 
   351                              <2> ; ------------------------------------------------------------------
   352                              <2> ; os_set_max_input_length -- Set the maximum length for the next string input
   353                              <2> ; IN: AL = maximum number of characters
   354                              <2> ; OUT: None, registers preserved
   355                              <2> 
   356                              <2> os_set_max_input_length equ 33131
   357                              <2> 
   358                              <2> ; ------------------------------------------------------------------
   359                              <2> ; os_input_string_ex -- Take string from keyboard entry
   360                              <2> ; IN: ES:AX = location of string, CH = 0 if normal input, 1 if password input,
   361                              <2> ;     DS:SI = callback on keys where AL = 0 (input: AX = keypress)
   362                              <2> ; OUT: None, registers preserved
   363                              <2> 
   364                              <2> os_input_string_ex equ 33119
   365                              <2> 
   366                              <2> ; ------------------------------------------------------------------
   367                              <2> ; os_color_selector - Pops up a color selector.
   368                              <2> ; IN: None
   369                              <2> ; OUT: color number (0-15)
   370                              <2> 
   371                              <2> os_color_selector equ 33053
   372                              <2> 
   373                              <2> ; ------------------------------------------------------------------
   374                              <2> ; os_temp_box -- Draws a dialog box with up to 5 lines of text.
   375                              <2> ; IN: DS:SI/AX/BX/CX/DX = string locations (or 0 for no display)
   376                              <2> ; OUT: None, registers preserved
   377                              <2> 
   378                              <2> os_temp_box equ 33086
   379                              <2> 
   380                              <2> ; ------------------------------------------------------------------
   381                              <2> ; os_reset_font -- Resets the font to the selected default.
   382                              <2> ; IN/OUT = None, registers preserved
   383                              <2> 
   384                              <2> os_reset_font equ 32990
   385                              <2> 
   386                              <2> ; ------------------------------------------------------------------
   387                              <2> ; os_draw_logo -- Draws the MichalOS logo.
   388                              <2> ; IN: None
   389                              <2> ; OUT: A very beautiful logo :-)
   390                              <2> 
   391                              <2> os_draw_logo equ 32852
   392                              <2> 
   393                              <2> ; ------------------------------------------------------------------
   394                              <2> ; os_draw_icon -- Draws an icon (in the MichalOS format).
   395                              <2> ; IN: DS:SI = address of the icon
   396                              <2> ; OUT: None, registers preserved
   397                              <2> 
   398                              <2> os_draw_icon equ 33023
   399                              <2> 
   400                              <2> ; ------------------------------------------------------------------
   401                              <2> ; os_option_menu -- Show a menu with a list of options
   402                              <2> ; IN: AX = comma-separated list of strings to show (zero-terminated)
   403                              <2> ; OUT: AX = number (starts from 1) of entry selected; carry set if Esc, left or right pressed
   404                              <2> 
   405                              <2> os_option_menu equ 32876
   406                              <2> 
   407                              <2> ; ==================================================================
   408                              <2> ; MichalOS Graphics functions
   409                              <2> ; Some graphics routines have been borrowed from TachyonOS
   410                              <2> ; ==================================================================
   411                              <2> 
   412                              <2> ; ------------------------------------------------------------------
   413                              <2> ; os_init_graphics_mode -- Initializes graphics mode.
   414                              <2> ; IN/OUT: None, registers preserved
   415                              <2> 
   416                              <2> os_init_graphics_mode equ 33020
   417                              <2> 
   418                              <2> ; ------------------------------------------------------------------
   419                              <2> ; os_init_text_mode -- Deinitializes graphics mode.
   420                              <2> ; IN/OUT: None, registers preserved
   421                              <2> 
   422                              <2> os_init_text_mode equ 33095
   423                              <2> 
   424                              <2> ; ------------------------------------------------------------------
   425                              <2> ; os_set_pixel -- Sets a pixel on the screen to a given value.
   426                              <2> ; IN: ES = destination memory segment, CX = X coordinate, AX = Y coordinate, BL = color
   427                              <2> ; OUT: None, registers preserved
   428                              <2> 
   429                              <2> os_set_pixel equ 33017
   430                              <2> 
   431                              <2> ; ------------------------------------------------------------------
   432                              <2> ; os_draw_line -- Draws a line with the Bresenham's line algorithm.
   433                              <2> ; Translated from an implementation in C (http://www.edepot.com/linebresenham.html)
   434                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour
   435                              <2> ; OUT: None, registers preserved
   436                              <2> 
   437                              <2> os_draw_line equ 32999
   438                              <2> 
   439                              <2> ; ------------------------------------------------------------------
   440                              <2> ; os_draw_rectangle -- Draws a rectangle.
   441                              <2> ; IN: ES = destination memory segment, CX=X1, DX=Y1, SI=X2, DI=Y2, BL=colour, CF = set if filled or clear if not
   442                              <2> ; OUT: None, registers preserved
   443                              <2> 
   444                              <2> os_draw_rectangle equ 33047
   445                              <2> 
   446                              <2> ; ------------------------------------------------------------------
   447                              <2> ; os_draw_polygon -- Draws a freeform shape.
   448                              <2> ; IN: ES = destination memory segment, BH = number of points, BL = colour, SI = location of shape points data
   449                              <2> ; OUT: None, registers preserved
   450                              <2> ; DATA FORMAT: x1, y1, x2, y2, x3, y3, etc
   451                              <2> 
   452                              <2> os_draw_polygon equ 33002
   453                              <2> 
   454                              <2> ; ------------------------------------------------------------------
   455                              <2> ; os_clear_graphics -- Clears the graphics screen with a given color.
   456                              <2> ; IN: ES = destination memory segment, BL = colour to set
   457                              <2> ; OUT: None, registers preserved
   458                              <2> 
   459                              <2> os_clear_graphics equ 33008
   460                              <2> 
   461                              <2> ; ----------------------------------------
   462                              <2> ; os_draw_circle -- draw a circular shape
   463                              <2> ; IN: ES = destination memory segment, AL = colour, BX = radius, CX = middle X, DX = middle y
   464                              <2> ; OUT: None, registers preserved
   465                              <2> 
   466                              <2> os_draw_circle equ 33005
   467                              <2> 
   468                              <2> ; ==================================================================
   469                              <2> ; MichalOS Keyboard input handling functions
   470                              <2> ; ==================================================================
   471                              <2> 
   472                              <2> ; ------------------------------------------------------------------
   473                              <2> ; os_wait_for_key -- Waits for keypress and returns key
   474                              <2> ; Also handles the screensaver. TODO: move the screensaver code to "int.asm"
   475                              <2> ; IN: None
   476                              <2> ; OUT: AX = key pressed, other regs preserved
   477                              <2> 
   478                              <2> os_wait_for_key equ 32786
   479                              <2> 
   480                              <2> ; ------------------------------------------------------------------
   481                              <2> ; os_check_for_key -- Scans keyboard buffer for input, but doesn't wait
   482                              <2> ; Also handles special keyboard shortcuts.
   483                              <2> ; IN: None
   484                              <2> ; OUT: AX = 0 if no key pressed, otherwise scan code
   485                              <2> 
   486                              <2> os_check_for_key equ 32789
   487                              <2> 
   488                              <2> ; ==================================================================
   489                              <2> ; MichalOS Port I/O functions
   490                              <2> ; ==================================================================
   491                              <2> 
   492                              <2> ; ------------------------------------------------------------------
   493                              <2> ; os_serial_port_enable -- Set up the serial port for transmitting data
   494                              <2> ; IN: AX = 0 for normal mode (9600 baud), or 1 for slow mode (1200 baud)
   495                              <2> ; OUT: None, registers preserved
   496                              <2> 
   497                              <2> os_serial_port_enable equ 32954
   498                              <2> 
   499                              <2> ; ------------------------------------------------------------------
   500                              <2> ; os_send_via_serial -- Send a byte via the serial port
   501                              <2> ; IN: AL = byte to send via serial
   502                              <2> ; OUT: AH = Bit 7 clear on success
   503                              <2> 
   504                              <2> os_send_via_serial equ 32861
   505                              <2> 
   506                              <2> ; ------------------------------------------------------------------
   507                              <2> ; os_get_via_serial -- Get a byte from the serial port
   508                              <2> ; IN: None
   509                              <2> ; OUT: AL = byte that was received, AH = Bit 7 clear on success
   510                              <2> 
   511                              <2> os_get_via_serial equ 32864
   512                              <2> 
   513                              <2> ; ==================================================================
   514                              <2> ; MichalOS Disk access functions
   515                              <2> ; ==================================================================
   516                              <2> 
   517                              <2> ; ------------------------------------------------------------------
   518                              <2> ; os_report_free_space -- Returns the amount of free space on disk
   519                              <2> ; IN: None
   520                              <2> ; OUT: AX = Number of sectors free
   521                              <2> 
   522                              <2> os_report_free_space equ 32894
   523                              <2> 
   524                              <2> ; ------------------------------------------------------------------
   525                              <2> ; os_get_file_list -- Generate comma-separated string of files on floppy
   526                              <2> ; IN/OUT: AX = location to store zero-terminated filename string
   527                              <2> 
   528                              <2> os_get_file_list equ 32831
   529                              <2> 
   530                              <2> ; ------------------------------------------------------------------
   531                              <2> ; os_load_file -- Load a file into RAM
   532                              <2> ; IN: AX = location of filename, ES:CX = location in RAM to load file
   533                              <2> ; OUT: BX = file size (in bytes), carry set if file not found
   534                              <2> 
   535                              <2> os_load_file equ 32801
   536                              <2> 
   537                              <2> ; --------------------------------------------------------------------------
   538                              <2> ; os_write_file -- Save (max 64K) file to disk
   539                              <2> ; IN: AX = filename, ES:BX = data location, CX = bytes to write
   540                              <2> ; OUT: Carry clear if OK, set if failure
   541                              <2> 
   542                              <2> os_write_file equ 32915
   543                              <2> 
   544                              <2> ; --------------------------------------------------------------------------
   545                              <2> ; os_file_exists -- Check for presence of file on the floppy
   546                              <2> ; IN: AX = filename location; OUT: carry clear if found, set if not
   547                              <2> 
   548                              <2> os_file_exists equ 32918
   549                              <2> 
   550                              <2> ; --------------------------------------------------------------------------
   551                              <2> ; os_create_file -- Creates a new 0-byte file on the floppy disk
   552                              <2> ; IN: AX = location of filename
   553                              <2> ; OUT: None, registers preserved
   554                              <2> 
   555                              <2> os_create_file equ 32921
   556                              <2> 
   557                              <2> ; --------------------------------------------------------------------------
   558                              <2> ; os_remove_file -- Deletes the specified file from the filesystem
   559                              <2> ; IN: AX = location of filename to remove
   560                              <2> 
   561                              <2> os_remove_file equ 32924
   562                              <2> 
   563                              <2> ; --------------------------------------------------------------------------
   564                              <2> ; os_rename_file -- Change the name of a file on the disk
   565                              <2> ; IN: AX = filename to change, BX = new filename (zero-terminated strings)
   566                              <2> ; OUT: carry set on error
   567                              <2> 
   568                              <2> os_rename_file equ 32927
   569                              <2> 
   570                              <2> ; --------------------------------------------------------------------------
   571                              <2> ; os_get_file_size -- Get file size information for specified file
   572                              <2> ; IN: AX = filename; OUT: EBX = file size in bytes (up to 4GB)
   573                              <2> ; or carry set if file not found
   574                              <2> 
   575                              <2> os_get_file_size equ 32930
   576                              <2> 
   577                              <2> ; --------------------------------------------------------------------------
   578                              <2> ; os_get_file_datetime -- Get file write time/date information for specified file
   579                              <2> ; IN: AX = filename; OUT: BX = time of creation (HHHHHMMMMMMSSSSS), CX = date of creation (YYYYYYYMMMMDDDDD)
   580                              <2> ; or carry set if file not found
   581                              <2> 
   582                              <2> os_get_file_datetime equ 33011
   583                              <2> 
   584                              <2> ; --------------------------------------------------------------------------
   585                              <2> ; os_get_boot_disk -- Returns the boot disk number.
   586                              <2> ; IN: None
   587                              <2> ; OUT: DL = boot disk number for use in INT 13h calls
   588                              <2> 
   589                              <2> os_get_boot_disk equ 33062
   590                              <2> 
   591                              <2> ; ==================================================================
   592                              <2> ; MichalOS Miscellaneous functions
   593                              <2> ; ==================================================================
   594                              <2> 
   595                              <2> ; ------------------------------------------------------------------
   596                              <2> ; os_read_config_byte -- Reads a byte from the config
   597                              <2> ; IN: BX = offset
   598                              <2> ; OUT: AL = value
   599                              <2> 
   600                              <2> os_read_config_byte equ 33134
   601                              <2> 
   602                              <2> ; ------------------------------------------------------------------
   603                              <2> ; os_read_config_word -- Reads a word from the config
   604                              <2> ; IN: BX = offset
   605                              <2> ; OUT: AX = value
   606                              <2> 
   607                              <2> os_read_config_word equ 33137
   608                              <2> 
   609                              <2> ; ------------------------------------------------------------------
   610                              <2> ; os_write_config_byte -- Writes a byte to the config
   611                              <2> ; NOTE: This will only affect the config in memory,
   612                              <2> ; run os_save_config to save the changes to disk!
   613                              <2> ; IN: BX = offset, AL = value
   614                              <2> ; OUT: None, registers preserved
   615                              <2> 
   616                              <2> os_write_config_byte equ 33140
   617                              <2> 
   618                              <2> ; ------------------------------------------------------------------
   619                              <2> ; os_write_config_word -- Writes a byte to the config
   620                              <2> ; NOTE: This will only affect the config in memory,
   621                              <2> ; run os_save_config to save the changes to disk!
   622                              <2> ; IN: BX = offset, AX = value
   623                              <2> ; OUT: None, registers preserved
   624                              <2> 
   625                              <2> os_write_config_word equ 33143
   626                              <2> 
   627                              <2> ; ------------------------------------------------------------------
   628                              <2> ; os_save_config -- Saves the current config to disk
   629                              <2> ; OUT: Carry set if error
   630                              <2> 
   631                              <2> os_save_config equ 33146
   632                              <2> 
   633                              <2> ; ------------------------------------------------------------------
   634                              <2> ; os_exit -- Exits the application, launches another one (if possible)
   635                              <2> ; IN: AX = if not 0, then ptr to filename of application to be launched,
   636                              <2> ;     BX = 1 if the application calling os_exit should be re-launched after
   637                              <2> ;     the requested application exits
   638                              <2> ; OUT: None, register preserved
   639                              <2> 
   640                              <2> os_exit equ 32780
   641                              <2> 
   642                              <2> ; ------------------------------------------------------------------
   643                              <2> ; os_clear_registers -- Clear all registers
   644                              <2> ; IN: None
   645                              <2> ; OUT: Cleared registers
   646                              <2> 
   647                              <2> os_clear_registers equ 32975
   648                              <2> 
   649                              <2> ; ------------------------------------------------------------------
   650                              <2> ; os_get_os_name -- Get the OS name string
   651                              <2> ; IN: None
   652                              <2> ; OUT: DS:SI = OS name string, zero-terminated
   653                              <2> 
   654                              <2> os_get_os_name equ 33083
   655                              <2> 
   656                              <2> ; ------------------------------------------------------------------
   657                              <2> ; os_get_memory -- Gets the amount of system RAM.
   658                              <2> ; IN: None
   659                              <2> ; OUT: AX = conventional memory (in kB), BX = high memory (in kB)
   660                              <2> 
   661                              <2> os_get_memory equ 33050
   662                              <2> 
   663                              <2> ; ------------------------------------------------------------------
   664                              <2> ; os_int_1Ah -- Middle-man between the INT 1Ah call and the kernel/apps (used for timezones).
   665                              <2> ; IN/OUT: same as int 1Ah
   666                              <2> 
   667                              <2> os_int_1Ah equ 33032
   668                              <2> 
   669                              <2> ; ==================================================================
   670                              <2> ; MichalOS/MikeOS 4.5 BASIC interpreter
   671                              <2> ; ==================================================================
   672                              <2> 
   673                              <2> ; ------------------------------------------------------------------
   674                              <2> ; The BASIC interpreter execution starts here -- a parameter string
   675                              <2> ; is passed in SI and copied into the first string, unless SI = 0
   676                              <2> 
   677                              <2> os_run_basic equ 32963
   678                              <2> 
   679                              <2> ; ==================================================================
   680                              <2> ; MichalOS Math functions
   681                              <2> ; ==================================================================
   682                              <2> 
   683                              <2> ; ------------------------------------------------------------------
   684                              <2> ; os_get_random -- Return a random integer between low and high (inclusive)
   685                              <2> ; IN: AX = low integer, BX = high integer
   686                              <2> ; OUT: CX = random integer
   687                              <2> 
   688                              <2> os_get_random equ 32948
   689                              <2> 
   690                              <2> ; ------------------------------------------------------------------
   691                              <2> ; os_bcd_to_int -- Converts a binary coded decimal number to an integer
   692                              <2> ; IN: AL = BCD number
   693                              <2> ; OUT: AX = integer value
   694                              <2> 
   695                              <2> os_bcd_to_int equ 32846
   696                              <2> 
   697                              <2> ; ------------------------------------------------------------------
   698                              <2> ; os_int_to_bcd -- Converts an integer to a binary coded decimal number
   699                              <2> ; IN: AL = integer value
   700                              <2> ; OUT: AL = BCD number
   701                              <2> 
   702                              <2> os_int_to_bcd equ 33035
   703                              <2> 
   704                              <2> ; ------------------------------------------------------------------
   705                              <2> ; os_math_power -- Calculates EAX^EBX.
   706                              <2> ; IN: EAX^EBX = input
   707                              <2> ; OUT: EAX = result
   708                              <2> 
   709                              <2> os_math_power equ 33071
   710                              <2> 
   711                              <2> ; ------------------------------------------------------------------
   712                              <2> ; os_math_root -- Approximates the EBXth root of EAX.
   713                              <2> ; IN: EAX = input, EBX = root
   714                              <2> ; OUT: EAX(EDX = 0) = result; EAX to EDX = range
   715                              <2> 
   716                              <2> os_math_root equ 33074
   717                              <2> 
   718                              <2> ; ==================================================================
   719                              <2> ; MichalOS String manipulation functions
   720                              <2> ; ==================================================================
   721                              <2> 
   722                              <2> ; ------------------------------------------------------------------
   723                              <2> ; os_string_encrypt -- Encrypts a string using a totally military-grade encryption algorithm
   724                              <2> ; IN: DS:SI = Input string/Output string
   725                              <2> ; OUT: None, registers preserved
   726                              <2> 
   727                              <2> os_string_encrypt equ 33014
   728                              <2> 
   729                              <2> ; ------------------------------------------------------------------
   730                              <2> ; os_string_add -- Add a string on top of another string
   731                              <2> ; IN: DS:AX = Main string, DS:BX = Added string
   732                              <2> ; OUT: None, registers preserved
   733                              <2> 
   734                              <2> os_string_add equ 32897
   735                              <2> 
   736                              <2> ; ------------------------------------------------------------------
   737                              <2> ; os_string_length -- Return length of a string
   738                              <2> ; IN: DS:AX = string location
   739                              <2> ; OUT AX = length (other regs preserved)
   740                              <2> 
   741                              <2> os_string_length equ 32810
   742                              <2> 
   743                              <2> ; ------------------------------------------------------------------
   744                              <2> ; os_string_reverse -- Reverse the characters in a string
   745                              <2> ; IN: DS:SI = string location
   746                              <2> ; OUT: None, registers preserved
   747                              <2> 
   748                              <2> os_string_reverse equ 32939
   749                              <2> 
   750                              <2> ; ------------------------------------------------------------------
   751                              <2> ; os_find_char_in_string -- Find location of character in a string
   752                              <2> ; IN: DS:SI = string location, AL = character to find
   753                              <2> ; OUT: AX = location in string, or 0 if char not present
   754                              <2> 
   755                              <2> os_find_char_in_string equ 32867
   756                              <2> 
   757                              <2> ; ------------------------------------------------------------------
   758                              <2> ; os_string_uppercase -- Convert zero-terminated string to upper case
   759                              <2> ; IN: DS:AX = string location
   760                              <2> ; OUT: None, registers preserved
   761                              <2> 
   762                              <2> os_string_uppercase equ 32813
   763                              <2> 
   764                              <2> ; ------------------------------------------------------------------
   765                              <2> ; os_string_lowercase -- Convert zero-terminated string to lower case
   766                              <2> ; IN: DS:AX = string location
   767                              <2> ; OUT: None, registers preserved
   768                              <2> 
   769                              <2> os_string_lowercase equ 32816
   770                              <2> 
   771                              <2> ; ------------------------------------------------------------------
   772                              <2> ; os_string_copy -- Copy one string into another
   773                              <2> ; IN: DS:SI = source, ES:DI = destination (programmer ensure sufficient room)
   774                              <2> ; OUT: None, registers preserved
   775                              <2> 
   776                              <2> os_string_copy equ 32822
   777                              <2> 
   778                              <2> ; ------------------------------------------------------------------
   779                              <2> ; os_string_join -- Join two strings into a third string
   780                              <2> ; IN: DS:AX = string one, DS:BX = string two, ES:CX = destination string
   781                              <2> ; OUT: None, registers preserved
   782                              <2> 
   783                              <2> os_string_join equ 32828
   784                              <2> 
   785                              <2> ; ------------------------------------------------------------------
   786                              <2> ; os_string_chomp -- Strip leading and trailing spaces from a string
   787                              <2> ; IN: DS:AX = string location
   788                              <2> ; OUT: None, registers preserved
   789                              <2> 
   790                              <2> os_string_chomp equ 32837
   791                              <2> 
   792                              <2> ; ------------------------------------------------------------------
   793                              <2> ; os_string_compare -- See if two strings match
   794                              <2> ; IN: DS:SI = string one, DS:DI = string two
   795                              <2> ; OUT: carry set if same, clear if different
   796                              <2> 
   797                              <2> os_string_compare equ 32834
   798                              <2> 
   799                              <2> ; ------------------------------------------------------------------
   800                              <2> ; os_string_parse -- Take string (eg "run foo bar baz") and return
   801                              <2> ; pointers to zero-terminated strings (eg AX = "run", BX = "foo" etc.)
   802                              <2> ; IN: DS:SI = string
   803                              <2> ; OUT: AX, BX, CX, DX = individual strings
   804                              <2> 
   805                              <2> os_string_parse equ 32960
   806                              <2> 
   807                              <2> ; ------------------------------------------------------------------
   808                              <2> ; os_string_to_int -- Convert decimal string to integer value
   809                              <2> ; IN: DS:SI = string location (max 5 chars, up to '65535')
   810                              <2> ; OUT: AX = number
   811                              <2> 
   812                              <2> os_string_to_int equ 32942
   813                              <2> 
   814                              <2> ; ------------------------------------------------------------------
   815                              <2> ; os_string_to_hex -- Convert hexadecimal string to integer value
   816                              <2> ; IN: DS:SI = string location (max 8 chars, up to 'FFFFFFFF')
   817                              <2> ; OUT: EAX = number
   818                              <2> 
   819                              <2> os_string_to_hex equ 32840
   820                              <2> 
   821                              <2> ; ------------------------------------------------------------------
   822                              <2> ; os_int_to_string -- Convert unsigned integer to string
   823                              <2> ; IN: AX = unsigned int
   824                              <2> ; OUT: DS:AX = string location
   825                              <2> 
   826                              <2> os_int_to_string equ 32792
   827                              <2> 
   828                              <2> ; ------------------------------------------------------------------
   829                              <2> ; os_sint_to_string -- Convert signed integer to string
   830                              <2> ; IN: AX = signed int
   831                              <2> ; OUT: DS:AX = string location
   832                              <2> 
   833                              <2> os_sint_to_string equ 32957
   834                              <2> 
   835                              <2> ; ------------------------------------------------------------------
   836                              <2> ; os_get_time_string -- Get current time in a string (eg '10:25')
   837                              <2> ; IN: ES:BX = string location
   838                              <2> ; OUT: None, registers preserved
   839                              <2> 
   840                              <2> os_get_time_string equ 32849
   841                              <2> 
   842                              <2> ; ------------------------------------------------------------------
   843                              <2> ; os_get_date_string -- Get current date in a string (eg '12/31/2007')
   844                              <2> ; IN: ES:BX = string location
   845                              <2> ; OUT: None, registers preserved
   846                              <2> 
   847                              <2> os_get_date_string equ 32858
   848                              <2> 
   849                              <2> ; ------------------------------------------------------------------
   850                              <2> ; os_string_tokenize -- Reads tokens separated by specified char from
   851                              <2> ; a string. Returns pointer to next token, or 0 if none left
   852                              <2> ; IN: AL = separator char, DS:SI = beginning
   853                              <2> ; OUT: DI = next token or 0 if none
   854                              <2> 
   855                              <2> os_string_tokenize equ 32972
   856                              <2> 
   857                              <2> ; ------------------------------------------------------------------
   858                              <2> ; os_string_callback_tokenizer -- Prints a token from string, requests are done by callback
   859                              <2> ; IN: DS:AX = comma-separated string
   860                              <2> ; OUT: AL = AH = max length of any token, CX = number of entries in the list,
   861                              <2> ;      DX:SI = callback location (if C clear, accepts CX as entry ID, prints out result)
   862                              <2> 
   863                              <2> os_string_callback_tokenizer equ 33128
   864                              <2> 
   865                              <2> ; ------------------------------------------------------------------
   866                              <2> ; os_32int_to_string -- Converts an unsigned 32-bit integer into a string
   867                              <2> ; IN: EAX = unsigned int
   868                              <2> ; OUT: DS:AX = string location
   869                              <2> 
   870                              <2> os_32int_to_string equ 33059
   871                              <2> 
   872                              <2> ; ------------------------------------------------------------------
   873                              <2> ; os_string_to_32int -- Converts a string into a 32-bit integer
   874                              <2> ; IN: DS:SI = string location
   875                              <2> ; OUT: EAX = unsigned integer
   876                              <2> 
   877                              <2> os_string_to_32int equ 33068
   878                              <2> 
   879                              <2> ; ==================================================================
   880                              <2> ; MichalOS ZX7 decompression routine
   881                              <2> ; ==================================================================
   882                              <2> 
   883                              <2> ; ------------------------------------------------------------------
   884                              <2> ; os_decompress_zx7 -- Decompresses ZX7-packed data.
   885                              <2> ; IN: DS:SI = source, ES:DI = destination
   886                              <2> ; OUT: None, registers preserved
   887                              <2> 
   888                              <2> os_decompress_zx7 equ 33038
   889                              <2> 
   890                              <2> ; ==================================================================
   891                              <2> ; MichalOS Interrupt management & app timer functions
   892                              <2> ; ==================================================================
   893                              <2> 
   894                              <2> ; -----------------------------------------------------------------
   895                              <2> ; os_modify_int_handler -- Change location of interrupt handler
   896                              <2> ; IN: CL = int number, DI:SI = handler location
   897                              <2> ; OUT: None, registers preserved
   898                              <2> 
   899                              <2> os_modify_int_handler equ 33056
   900                              <2> 
   901                              <2> ; -----------------------------------------------------------------
   902                              <2> ; os_get_int_handler -- Change location of interrupt handler
   903                              <2> ; IN: CL = int number
   904                              <2> ; OUT: DI:SI = handler location
   905                              <2> 
   906                              <2> os_get_int_handler equ 33080
   907                              <2> 
   908                              <2> ; ------------------------------------------------------------------
   909                              <2> ; os_pause -- Delay execution for a specified number of ticks (18.2 Hz by default)
   910                              <2> ; IN: AX = amount of ticks to wait
   911                              <2> ; OUT: None, registers preserved
   912                              <2> 
   913                              <2> os_pause equ 32804
   914                              <2> 
   915                              <2> ; -----------------------------------------------------------------
   916                              <2> ; os_attach_app_timer -- Attach a timer interrupt to an application and sets the timer speed
   917                              <2> ; Formula: speed = (105000000 / 88) / frequency
   918                              <2> ; IN: DS:SI = handler location, CX = speed
   919                              <2> ; OUT: None, registers preserved
   920                              <2> 
   921                              <2> os_attach_app_timer equ 32969
   922                              <2> 
   923                              <2> ; -----------------------------------------------------------------
   924                              <2> ; os_return_app_timer -- Returns the timer interrupt back to the system and resets the timer speed
   925                              <2> ; IN/OUT: None, registers preserved
   926                              <2> 
   927                              <2> os_return_app_timer equ 32987
   928                              <2> 
   929                              <2> ; -----------------------------------------------------------------
   930                              <2> ; os_set_timer_speed -- Sets the timer's trigger speed.
   931                              <2> ; Formula: speed = (105000000 / 88) / frequency
   932                              <2> ; IN: CX = speed
   933                              <2> ; OUT: Nothing, registers preserved
   934                              <2> 
   935                              <2> os_set_timer_speed equ 32891
   936                              <2> 
   937                              <2> ; ==================================================================
   938                              <2> ; MichalOS Low-level disk driver
   939                              <2> ; ==================================================================
   940                              <2> 
   941                              <2> ; --------------------------------------------------------------------------
   942                              <2> ; os_disk_read_sector -- Read a single sector from disk
   943                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   944                              <2> 
   945                              <2> os_disk_read_sector equ 33092
   946                              <2> 
   947                              <2> ; --------------------------------------------------------------------------
   948                              <2> ; os_disk_read_multiple_sectors -- Read multiple sectors from disk
   949                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   950                              <2> 
   951                              <2> os_disk_read_multiple_sectors equ 33104
   952                              <2> 
   953                              <2> ; --------------------------------------------------------------------------
   954                              <2> ; os_disk_write_sector -- Write a single sector to disk
   955                              <2> ; IN: EAX = sector ID, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   956                              <2> 
   957                              <2> os_disk_write_sector equ 33098
   958                              <2> 
   959                              <2> ; --------------------------------------------------------------------------
   960                              <2> ; os_disk_write_multiple_sectors -- Write multiple sectors to disk
   961                              <2> ; IN: EAX = sector ID, CX = number of sectors, ES:SI = 512 byte buffer, DL = drive number, OUT: carry set if error
   962                              <2> 
   963                              <2> os_disk_write_multiple_sectors equ 33116
   964                              <2> 
    10                              <1> 
    11                              <1> %macro oscall 1
    12                              <1> 	mov bp, %1
    13                              <1> 	int 40h
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> ; -----------------------------------------------------------------
     6                                  
     7                                  start:
     8 00000000 B99C2E                  	mov cx, 11932
     9 00000003 BE[1903]                	mov si, .interrupt
    10 00000006 E8(C980)                	call os_attach_app_timer
    11                                  	
    12 00000009 E8(8A80)                	call os_hide_cursor
    13                                  
    14                                  .time:
    15 0000000C E8(1E80)                	call os_speaker_off
    16 0000000F C606[6F04]FF            	mov byte [.hundreds], 0FFh
    17 00000014 C606[6B04]00            	mov byte [.timer_running], 0
    18                                  	
    19 00000019 E8E802                  	call .draw_background
    20                                  	
    21                                  .timeloop:
    22 0000001C F8                      	clc
    23 0000001D B402                    	mov ah, 02h			; Get the time
    24 0000001F E8(0881)                	call os_int_1Ah
    25                                  
    26 00000022 8836[6E04]              	mov [.seconds], dh
    27 00000026 880E[6D04]              	mov [.minutes], cl
    28 0000002A 882E[6C04]              	mov [.hours], ch
    29                                  	
    30 0000002E E84B01                  	call .draw_time
    31                                  	
    32 00000031 B404                    	mov ah, 04h			; Get the date
    33 00000033 E8(0881)                	call os_int_1Ah
    34                                  
    35 00000036 8816[7004]              	mov [.day], dl
    36 0000003A 8836[7104]              	mov [.month], dh
    37 0000003E 880E[7204]              	mov [.year], cl
    38 00000042 882E[7304]              	mov [.century], ch
    39                                  
    40 00000046 E8A101                  	call .draw_date
    41                                  	
    42 00000049 F4                      	hlt
    43 0000004A E8(1580)                	call os_check_for_key
    44 0000004D 3C1B                    	cmp al, 27
    45 0000004F 0F84BF02                	je .exit
    46 00000053 3C32                    	cmp al, '2'
    47 00000055 7406                    	je .stopwatch
    48 00000057 3C33                    	cmp al, '3'
    49 00000059 744C                    	je .timer
    50                                  	
    51 0000005B EBBF                    	jmp .timeloop
    52                                  
    53                                  .stopwatch:
    54 0000005D E8(1E80)                	call os_speaker_off
    55 00000060 E8A102                  	call .draw_background
    56 00000063 66C706[6C04]000000-     	mov dword [.hours], 0
    56 0000006B 00                 
    57 0000006C C606[6B04]00            	mov byte [.timer_running], 0
    58                                  	
    59                                  .stopwatchloop:
    60 00000071 E80801                  	call .draw_time
    61                                  	
    62 00000074 F4                      	hlt
    63 00000075 E8(1580)                	call os_check_for_key
    64                                  	
    65 00000078 3C1B                    	cmp al, 27
    66 0000007A 0F849402                	je .exit
    67 0000007E 3C31                    	cmp al, '1'
    68 00000080 748A                    	je .time
    69 00000082 3C33                    	cmp al, '3'
    70 00000084 7421                    	je .timer
    71 00000086 3C20                    	cmp al, ' '
    72 00000088 7416                    	je .toggle_stopwatch
    73 0000008A 3C78                    	cmp al, 'x'
    74 0000008C 7402                    	je .reset_stopwatch
    75                                  	
    76 0000008E EBE1                    	jmp .stopwatchloop
    77                                  	
    78                                  	
    79                                  .reset_stopwatch:
    80 00000090 66C706[6C04]000000-     	mov dword [.hours], 0
    80 00000098 00                 
    81 00000099 C606[6B04]00            	mov byte [.timer_running], 0
    82 0000009E EBD1                    	jmp .stopwatchloop
    83                                  	
    84                                  .toggle_stopwatch:
    85 000000A0 8036[6B04]01            	xor byte [.timer_running], 1
    86 000000A5 EBCA                    	jmp .stopwatchloop
    87                                  	
    88                                  .timer:
    89 000000A7 E85A02                  	call .draw_background
    90 000000AA B607                    	mov dh, 7
    91 000000AC B20A                    	mov dl, 10
    92 000000AE E8(0680)                	call os_move_cursor
    93 000000B1 BE[7404]                	mov si, .upstring
    94 000000B4 E8(0380)                	call os_print_string
    95                                  	
    96 000000B7 B611                    	mov dh, 17
    97 000000B9 B201                    	mov dl, 1
    98 000000BB E8(0680)                	call os_move_cursor
    99 000000BE BE[BA04]                	mov si, .downstring
   100 000000C1 E8(0380)                	call os_print_string
   101                                  	
   102 000000C4 66C706[6C04]000000-     	mov dword [.hours], 0
   102 000000CC 00                 
   103 000000CD C606[6B04]00            	mov byte [.timer_running], 0
   104                                  	
   105                                  .timer_loop:
   106 000000D2 E8A700                  	call .draw_time
   107 000000D5 F4                      	hlt
   108 000000D6 E8(1580)                	call os_check_for_key
   109                                  	
   110 000000D9 3C1B                    	cmp al, 27
   111 000000DB 0F843302                	je .exit
   112 000000DF 3C31                    	cmp al, '1'
   113 000000E1 0F8427FF                	je .time
   114 000000E5 3C32                    	cmp al, '2'
   115 000000E7 0F8472FF                	je .stopwatch
   116 000000EB 3C20                    	cmp al, ' '
   117 000000ED 0F848300                	je .toggle_timer
   118 000000F1 3C78                    	cmp al, 'x'
   119 000000F3 743B                    	je .reset_timer
   120                                  	
   121 000000F5 BE[6C04]                	mov si, .hours
   122 000000F8 3C71                    	cmp al, 'q'
   123 000000FA 7447                    	je .inc_10
   124 000000FC 3C77                    	cmp al, 'w'
   125 000000FE 7460                    	je .inc
   126 00000100 3C61                    	cmp al, 'a'
   127 00000102 744D                    	je .dec_10
   128 00000104 3C73                    	cmp al, 's'
   129 00000106 7462                    	je .dec
   130                                  	
   131 00000108 BE[6D04]                	mov si, .minutes
   132 0000010B 3C65                    	cmp al, 'e'
   133 0000010D 7434                    	je .inc_10
   134 0000010F 3C72                    	cmp al, 'r'
   135 00000111 744D                    	je .inc
   136 00000113 3C64                    	cmp al, 'd'
   137 00000115 743A                    	je .dec_10
   138 00000117 3C66                    	cmp al, 'f'
   139 00000119 744F                    	je .dec
   140                                  	
   141 0000011B BE[6E04]                	mov si, .seconds
   142 0000011E 3C74                    	cmp al, 't'
   143 00000120 7421                    	je .inc_10
   144 00000122 3C79                    	cmp al, 'y'
   145 00000124 743A                    	je .inc
   146 00000126 3C67                    	cmp al, 'g'
   147 00000128 7427                    	je .dec_10
   148 0000012A 3C68                    	cmp al, 'h'
   149 0000012C 743C                    	je .dec
   150                                  	
   151 0000012E EBA2                    	jmp .timer_loop
   152                                  
   153                                  .reset_timer:
   154 00000130 66C706[6C04]000000-     	mov dword [.hours], 0
   154 00000138 00                 
   155 00000139 C606[6B04]00            	mov byte [.timer_running], 0
   156 0000013E E8(1E80)                	call os_speaker_off
   157 00000141 EB8F                    	jmp .timer_loop
   158                                  	
   159                                  .inc_10:
   160 00000143 8A04                    	mov al, [si]
   161 00000145 B90A00                  	mov cx, 10
   162                                  	
   163                                  .inc_loop:
   164 00000148 E86102                  	call .increment_number_60
   165 0000014B E2FB                    	loop .inc_loop
   166 0000014D 8804                    	mov [si], al
   167 0000014F EB81                    	jmp .timer_loop
   168                                  
   169                                  .dec_10:
   170 00000151 8A04                    	mov al, [si]
   171 00000153 B90A00                  	mov cx, 10
   172                                  	
   173                                  .dec_loop:
   174 00000156 E88902                  	call .decrement_number_60
   175 00000159 E2FB                    	loop .dec_loop
   176 0000015B 8804                    	mov [si], al
   177 0000015D E972FF                  	jmp .timer_loop
   178                                  
   179                                  .inc:
   180 00000160 8A04                    	mov al, [si]
   181 00000162 E84702                  	call .increment_number_60
   182 00000165 8804                    	mov [si], al
   183 00000167 E968FF                  	jmp .timer_loop
   184                                  	
   185                                  .dec:
   186 0000016A 8A04                    	mov al, [si]
   187 0000016C E87302                  	call .decrement_number_60
   188 0000016F 8804                    	mov [si], al
   189 00000171 E95EFF                  	jmp .timer_loop
   190                                  	
   191                                  .toggle_timer:
   192 00000174 8036[6B04]02            	xor byte [.timer_running], 2
   193 00000179 E956FF                  	jmp .timer_loop
   194                                  	
   195                                  .draw_time:
   196 0000017C 60                      	pusha
   197 0000017D A0[6C04]                	mov al, [.hours]	; Draw the hours value
   198 00000180 B609                    	mov dh, 9
   199 00000182 B201                    	mov dl, 1
   200 00000184 C0C004                  	rol al, 4
   201 00000187 E8B900                  	call .draw_numbers
   202 0000018A 80C20C                  	add dl, 12
   203 0000018D C0C004                  	rol al, 4
   204 00000190 E8B000                  	call .draw_numbers
   205 00000193 80C20C                  	add dl, 12
   206                                  
   207 00000196 E80F01                  	call .draw_colon
   208 00000199 80C204                  	add dl, 4
   209                                  	
   210 0000019C A0[6D04]                	mov al, [.minutes]	; Draw the minutes value
   211 0000019F B609                    	mov dh, 9
   212 000001A1 C0C004                  	rol al, 4
   213 000001A4 E89C00                  	call .draw_numbers
   214 000001A7 80C20C                  	add dl, 12
   215 000001AA C0C004                  	rol al, 4
   216 000001AD E89300                  	call .draw_numbers
   217 000001B0 80C20C                  	add dl, 12
   218                                  	
   219 000001B3 E8F200                  	call .draw_colon
   220 000001B6 80C204                  	add dl, 4
   221                                  	
   222 000001B9 A0[6E04]                	mov al, [.seconds]	; Draw the seconds value
   223 000001BC B609                    	mov dh, 9
   224 000001BE C0C004                  	rol al, 4
   225 000001C1 E87F00                  	call .draw_numbers
   226 000001C4 80C20C                  	add dl, 12
   227 000001C7 C0C004                  	rol al, 4
   228 000001CA E87600                  	call .draw_numbers
   229 000001CD 80C20C                  	add dl, 12
   230                                  
   231 000001D0 A0[6F04]                	mov al, [.hundreds]
   232 000001D3 3CFF                    	cmp al, 0FFh
   233 000001D5 7411                    	je .no_hundreds
   234                                  	
   235 000001D7 B611                    	mov dh, 17
   236 000001D9 B24C                    	mov dl, 76
   237 000001DB E8(0680)                	call os_move_cursor
   238                                  	
   239 000001DE 50                      	push ax
   240 000001DF B02E                    	mov al, 2Eh
   241 000001E1 E8(D580)                	call os_putchar
   242 000001E4 58                      	pop ax
   243                                  	
   244 000001E5 E8(7580)                	call os_print_2hex
   245                                  	
   246                                  .no_hundreds:
   247 000001E8 61                      	popa
   248 000001E9 C3                      	ret
   249                                  	
   250                                  .draw_date:
   251 000001EA 60                      	pusha	
   252 000001EB B611                    	mov dh, 17
   253 000001ED B201                    	mov dl, 1
   254 000001EF E8(0680)                	call os_move_cursor
   255                                  	
   256 000001F2 A0[7004]                	mov al, [.day]
   257 000001F5 E8(4E80)                	call os_bcd_to_int
   258                                  	clr ah
    31 000001F8 30E4                <1>  xor %1, %1
   259 000001FA E8(4D81)                	call os_print_int
   260                                  	
   261 000001FD E8(6980)                	call os_print_space
   262                                  	
   263 00000200 A0[7104]                	mov al, [.month]
   264 00000203 E8(4E80)                	call os_bcd_to_int
   265 00000206 FEC8                    	dec al
   266                                  	clr ah
    31 00000208 30E4                <1>  xor %1, %1
   267 0000020A BB0A00                  	mov bx, 10
   268 0000020D 52                      	push dx
   269 0000020E F7E3                    	mul bx
   270 00000210 5A                      	pop dx
   271 00000211 05[1708]                	add ax, .m1
   272 00000214 89C6                    	mov si, ax
   273 00000216 E8(0380)                	call os_print_string
   274                                  	
   275 00000219 BE[0B04]                	mov si, .spacer2
   276 0000021C E8(0380)                	call os_print_string
   277                                  	
   278 0000021F A0[7304]                	mov al, [.century]
   279 00000222 E8(4E80)                	call os_bcd_to_int
   280                                  	clr ah
    31 00000225 30E4                <1>  xor %1, %1
   281 00000227 89C1                    	mov cx, ax
   282                                  
   283 00000229 A0[7204]                	mov al, [.year]
   284 0000022C E8(4E80)                	call os_bcd_to_int
   285                                  	clr ah
    31 0000022F 30E4                <1>  xor %1, %1
   286                                  
   287 00000231 91                      	xchg ax, cx
   288 00000232 B364                    	mov bl, 100
   289 00000234 F6E3                    	mul bl
   290 00000236 01C8                    	add ax, cx
   291                                  	
   292 00000238 E8(4D81)                	call os_print_int
   293                                  	
   294 0000023B BE[0204]                	mov si, .spacer
   295 0000023E E8(0380)                	call os_print_string
   296 00000241 61                      	popa
   297 00000242 C3                      	ret
   298                                  	
   299                                  .draw_numbers:	; IN: low 4 bits of AL; DH/DL = cursor position
   300 00000243 60                      	pusha
   301 00000244 240F                    	and al, 0Fh
   302 00000246 88C3                    	mov bl, al
   303 00000248 B84D00                  	mov ax, 77
   304 0000024B F6E3                    	mul bl
   305 0000024D 05[0005]                	add ax, .n00
   306 00000250 E8(0680)                	call os_move_cursor
   307 00000253 89C6                    	mov si, ax
   308 00000255 E8(0380)                	call os_print_string
   309 00000258 FEC6                    	inc dh
   310 0000025A 83C00B                  	add ax, 11
   311 0000025D E8(0680)                	call os_move_cursor
   312 00000260 89C6                    	mov si, ax
   313 00000262 E8(0380)                	call os_print_string
   314 00000265 FEC6                    	inc dh
   315 00000267 83C00B                  	add ax, 11
   316 0000026A E8(0680)                	call os_move_cursor
   317 0000026D 89C6                    	mov si, ax
   318 0000026F E8(0380)                	call os_print_string
   319 00000272 FEC6                    	inc dh
   320 00000274 83C00B                  	add ax, 11
   321 00000277 E8(0680)                	call os_move_cursor
   322 0000027A 89C6                    	mov si, ax
   323 0000027C E8(0380)                	call os_print_string
   324 0000027F FEC6                    	inc dh
   325 00000281 83C00B                  	add ax, 11
   326 00000284 E8(0680)                	call os_move_cursor
   327 00000287 89C6                    	mov si, ax
   328 00000289 E8(0380)                	call os_print_string
   329 0000028C FEC6                    	inc dh
   330 0000028E 83C00B                  	add ax, 11
   331 00000291 E8(0680)                	call os_move_cursor
   332 00000294 89C6                    	mov si, ax
   333 00000296 E8(0380)                	call os_print_string
   334 00000299 FEC6                    	inc dh
   335 0000029B 83C00B                  	add ax, 11
   336 0000029E E8(0680)                	call os_move_cursor
   337 000002A1 89C6                    	mov si, ax
   338 000002A3 E8(0380)                	call os_print_string
   339 000002A6 61                      	popa
   340 000002A7 C3                      	ret
   341                                  	
   342                                  .draw_colon:		; IN: DH/DL = cursor position
   343 000002A8 60                      	pusha
   344 000002A9 B8[0208]                	mov ax, .na0
   345 000002AC E8(0680)                	call os_move_cursor
   346 000002AF 89C6                    	mov si, ax
   347 000002B1 E8(0380)                	call os_print_string
   348 000002B4 FEC6                    	inc dh
   349 000002B6 83C003                  	add ax, 3
   350 000002B9 E8(0680)                	call os_move_cursor
   351 000002BC 89C6                    	mov si, ax
   352 000002BE E8(0380)                	call os_print_string
   353 000002C1 FEC6                    	inc dh
   354 000002C3 83C003                  	add ax, 3
   355 000002C6 E8(0680)                	call os_move_cursor
   356 000002C9 89C6                    	mov si, ax
   357 000002CB E8(0380)                	call os_print_string
   358 000002CE FEC6                    	inc dh
   359 000002D0 83C003                  	add ax, 3
   360 000002D3 E8(0680)                	call os_move_cursor
   361 000002D6 89C6                    	mov si, ax
   362 000002D8 E8(0380)                	call os_print_string
   363 000002DB FEC6                    	inc dh
   364 000002DD 83C003                  	add ax, 3
   365 000002E0 E8(0680)                	call os_move_cursor
   366 000002E3 89C6                    	mov si, ax
   367 000002E5 E8(0380)                	call os_print_string
   368 000002E8 FEC6                    	inc dh
   369 000002EA 83C003                  	add ax, 3
   370 000002ED E8(0680)                	call os_move_cursor
   371 000002F0 89C6                    	mov si, ax
   372 000002F2 E8(0380)                	call os_print_string
   373 000002F5 FEC6                    	inc dh
   374 000002F7 83C003                  	add ax, 3
   375 000002FA E8(0680)                	call os_move_cursor
   376 000002FD 89C6                    	mov si, ax
   377 000002FF E8(0380)                	call os_print_string
   378 00000302 61                      	popa
   379 00000303 C3                      	ret
   380                                  	
   381                                  .draw_background:
   382 00000304 B8[0E04]                	mov ax, .title_msg
   383 00000307 BB[1D04]                	mov bx, .footer_msg
   384 0000030A 8B0EA8DE                	mov cx, [CONFIG_DESKTOP_BG_COLOR]
   385 0000030E E8(2780)                	call os_draw_background
   386 00000311 C3                      	ret
   387                                  	
   388                                  .exit:
   389 00000312 E8(DB80)                	call os_return_app_timer
   390 00000315 E8(8780)                	call os_show_cursor
   391 00000318 C3                      	ret
   392                                  	
   393                                  .interrupt:
   394 00000319 803E[6B04]01            	cmp byte [.timer_running], 1
   395 0000031E 752C                    	jne .no_stopwatch
   396                                  	
   397 00000320 A0[6F04]                	mov al, [.hundreds]
   398 00000323 E86E00                  	call .increment_number
   399 00000326 A2[6F04]                	mov [.hundreds], al
   400 00000329 7321                    	jnc .no_stopwatch
   401                                  	
   402 0000032B A0[6E04]                	mov al, [.seconds]
   403 0000032E E87B00                  	call .increment_number_60
   404 00000331 A2[6E04]                	mov [.seconds], al
   405 00000334 7316                    	jnc .no_stopwatch
   406                                  	
   407 00000336 A0[6D04]                	mov al, [.minutes]
   408 00000339 E87000                  	call .increment_number_60
   409 0000033C A2[6D04]                	mov [.minutes], al
   410 0000033F 730B                    	jnc .no_stopwatch
   411                                  	
   412 00000341 A0[6C04]                	mov al, [.hours]
   413 00000344 E84D00                  	call .increment_number
   414 00000347 A2[6C04]                	mov [.hours], al
   415 0000034A 7300                    	jnc .no_stopwatch
   416                                  	
   417                                  .no_stopwatch:
   418 0000034C 803E[6B04]02            	cmp byte [.timer_running], 2
   419 00000351 7534                    	jne .no_timer
   420                                  	
   421 00000353 66833E[6C04]00          	cmp dword [.hours], 0
   422 00000359 742D                    	je .set_off
   423                                  
   424 0000035B A0[6F04]                	mov al, [.hundreds]
   425 0000035E E86300                  	call .decrement_number
   426 00000361 A2[6F04]                	mov [.hundreds], al
   427 00000364 7321                    	jnc .no_timer
   428                                  	
   429 00000366 A0[6E04]                	mov al, [.seconds]
   430 00000369 E87600                  	call .decrement_number_60
   431 0000036C A2[6E04]                	mov [.seconds], al
   432 0000036F 7316                    	jnc .no_timer
   433                                  	
   434 00000371 A0[6D04]                	mov al, [.minutes]
   435 00000374 E86B00                  	call .decrement_number_60
   436 00000377 A2[6D04]                	mov [.minutes], al
   437 0000037A 730B                    	jnc .no_timer
   438                                  	
   439 0000037C A0[6C04]                	mov al, [.hours]
   440 0000037F E84200                  	call .decrement_number
   441 00000382 A2[6C04]                	mov [.hours], al
   442 00000385 7300                    	jnc .no_timer
   443                                  	
   444                                  .no_timer:
   445 00000387 CB                      	retf
   446                                  	
   447                                  .set_off:
   448 00000388 B80B02                  	mov ax, 523
   449 0000038B E8(1B80)                	call os_speaker_tone
   450 0000038E C606[6B04]00            	mov byte [.timer_running], 0
   451 00000393 CB                      	retf
   452                                  	
   453                                  .increment_number:
   454 00000394 FEC0                    	inc al
   455 00000396 88C3                    	mov bl, al
   456 00000398 80E30F                  	and bl, 0Fh
   457 0000039B 80FB0A                  	cmp bl, 10
   458 0000039E 7560                    	jne .no_adjust
   459                                  	
   460 000003A0 0410                    	add al, 16
   461 000003A2 24F0                    	and al, 0F0h
   462 000003A4 3CA0                    	cmp al, 0A0h
   463 000003A6 7558                    	jne .no_adjust
   464                                  	
   465                                  	clr al
    31 000003A8 30C0                <1>  xor %1, %1
   466 000003AA F9                      	stc
   467 000003AB C3                      	ret
   468                                  	
   469                                  .increment_number_60:
   470 000003AC FEC0                    	inc al
   471 000003AE 88C3                    	mov bl, al
   472 000003B0 80E30F                  	and bl, 0Fh
   473 000003B3 80FB0A                  	cmp bl, 10
   474 000003B6 7548                    	jne .no_adjust
   475                                  	
   476 000003B8 0410                    	add al, 16
   477 000003BA 24F0                    	and al, 0F0h
   478 000003BC 3C60                    	cmp al, 060h
   479 000003BE 7540                    	jne .no_adjust
   480                                  	
   481                                  	clr al
    31 000003C0 30C0                <1>  xor %1, %1
   482 000003C2 F9                      	stc
   483 000003C3 C3                      	ret
   484                                  	
   485                                  .decrement_number:
   486 000003C4 FEC8                    	dec al
   487 000003C6 88C3                    	mov bl, al
   488 000003C8 80E30F                  	and bl, 0Fh
   489 000003CB 80FB0F                  	cmp bl, 15
   490 000003CE 7530                    	jne .no_adjust
   491                                  	
   492 000003D0 24F0                    	and al, 0F0h
   493 000003D2 0409                    	add al, 9
   494                                  	
   495 000003D4 88C3                    	mov bl, al
   496 000003D6 80E3F0                  	and bl, 0F0h
   497 000003D9 80FBF0                  	cmp bl, 0F0h
   498 000003DC 7522                    	jne .no_adjust
   499                                  	
   500 000003DE B099                    	mov al, 99h
   501 000003E0 F9                      	stc
   502 000003E1 C3                      	ret
   503                                  	
   504                                  .decrement_number_60:
   505 000003E2 FEC8                    	dec al
   506 000003E4 88C3                    	mov bl, al
   507 000003E6 80E30F                  	and bl, 0Fh
   508 000003E9 80FB0F                  	cmp bl, 15
   509 000003EC 7512                    	jne .no_adjust
   510                                  	
   511 000003EE 24F0                    	and al, 0F0h
   512 000003F0 0409                    	add al, 9
   513                                  	
   514 000003F2 88C3                    	mov bl, al
   515 000003F4 80E3F0                  	and bl, 0F0h
   516 000003F7 80FBF0                  	cmp bl, 0F0h
   517 000003FA 7504                    	jne .no_adjust
   518                                  	
   519 000003FC B059                    	mov al, 59h
   520 000003FE F9                      	stc
   521 000003FF C3                      	ret
   522                                  	
   523                                  .no_adjust:
   524 00000400 F8                      	clc
   525 00000401 C3                      	ret
   526                                  
   527 00000402 202020202020202000      	.spacer				db '        ', 0
   528 0000040B 2C2000                  	.spacer2			db ', ', 0
   529                                  	
   530 0000040E 4D696368616C4F5320-     	.title_msg			db 'MichalOS Clock', 0
   530 00000417 436C6F636B00       
   531 0000041D 5B312F322F335D202D-     	.footer_msg			db '[1/2/3] - Clock/Stopwatch/Timer, [Space] - Start stopwatch/timer, [X] - Reset', 0
   531 00000426 20436C6F636B2F5374-
   531 0000042F 6F7077617463682F54-
   531 00000438 696D65722C205B5370-
   531 00000441 6163655D202D205374-
   531 0000044A 6172742073746F7077-
   531 00000453 617463682F74696D65-
   531 0000045C 722C205B585D202D20-
   531 00000465 526573657400       
   532                                  
   533 0000046B 00                      	.timer_running		db 0
   534 0000046C 00                      	.hours				db 0
   535 0000046D 00                      	.minutes			db 0
   536 0000046E 00                      	.seconds			db 0
   537 0000046F 00                      	.hundreds			db 0
   538 00000470 00                      	.day				db 0
   539 00000471 00                      	.month				db 0
   540 00000472 00                      	.year				db 0
   541 00000473 00                      	.century			db 0
   542                                  	
   543 00000474 512020202020202020-     	.upstring			db 'Q           W               E           R               T           Y', 0
   543 0000047D 202020572020202020-
   543 00000486 202020202020202020-
   543 0000048F 204520202020202020-
   543 00000498 202020205220202020-
   543 000004A1 202020202020202020-
   543 000004AA 202054202020202020-
   543 000004B3 20202020205900     
   544 000004BA 412020202020202020-     	.downstring			db 'A           S               D           F               G           H', 0
   544 000004C3 202020532020202020-
   544 000004CC 202020202020202020-
   544 000004D5 204420202020202020-
   544 000004DE 202020204620202020-
   544 000004E7 202020202020202020-
   544 000004F0 202047202020202020-
   544 000004F9 20202020204800     
   545                                  	
   546 00000500 2020DBDBDBDBDBDB20-     	.n00				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   546 00000509 2000               
   547 0000050B DBDB202020202020DB-     	.n01				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   547 00000514 DB00               
   548 00000516 DBDB202020202020DB-     	.n02				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   548 0000051F DB00               
   549 00000521 DBDB202020202020DB-     	.n03				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   549 0000052A DB00               
   550 0000052C DBDB202020202020DB-     	.n04				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   550 00000535 DB00               
   551 00000537 DBDB202020202020DB-     	.n05				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   551 00000540 DB00               
   552 00000542 2020DBDBDBDBDBDB20-     	.n06				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   552 0000054B 2000               
   553                                  
   554 0000054D 20202020DBDB202020-     	.n10				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   554 00000556 2000               
   555 00000558 2020DBDBDBDB202020-     	.n11				db 32,  32,  219, 219, 219, 219, 32,  32,  32,  32,  0
   555 00000561 2000               
   556 00000563 DBDB2020DBDB202020-     	.n12				db 219, 219, 32,  32,  219, 219, 32,  32,  32,  32,  0
   556 0000056C 2000               
   557 0000056E 20202020DBDB202020-     	.n13				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   557 00000577 2000               
   558 00000579 20202020DBDB202020-     	.n14				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   558 00000582 2000               
   559 00000584 20202020DBDB202020-     	.n15				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   559 0000058D 2000               
   560 0000058F DBDBDBDBDBDBDBDBDB-     	.n16				db 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 0
   560 00000598 DB00               
   561                                  
   562 0000059A 2020DBDBDBDBDBDB20-     	.n20				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   562 000005A3 2000               
   563 000005A5 DBDB202020202020DB-     	.n21				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   563 000005AE DB00               
   564 000005B0 202020202020DBDB20-     	.n22				db 32,  32,  32,  32,  32,  32,  219, 219, 32,  32,  0
   564 000005B9 2000               
   565 000005BB 20202020DBDB202020-     	.n23				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   565 000005C4 2000               
   566 000005C6 2020DBDB2020202020-     	.n24				db 32,  32,  219, 219, 32,  32,  32,  32,  32,  32,  0
   566 000005CF 2000               
   567 000005D1 DBDB20202020202020-     	.n25				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   567 000005DA 2000               
   568 000005DC DBDBDBDBDBDBDBDBDB-     	.n26				db 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 0
   568 000005E5 DB00               
   569                                  
   570 000005E7 2020DBDBDBDBDBDB20-     	.n30				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   570 000005F0 2000               
   571 000005F2 DBDB202020202020DB-     	.n31				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   571 000005FB DB00               
   572 000005FD 2020202020202020DB-     	.n32				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   572 00000606 DB00               
   573 00000608 20202020DBDBDBDB20-     	.n33				db 32,  32,  32,  32,  219, 219, 219, 219, 32,  32,  0
   573 00000611 2000               
   574 00000613 2020202020202020DB-     	.n34				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   574 0000061C DB00               
   575 0000061E DBDB202020202020DB-     	.n35				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   575 00000627 DB00               
   576 00000629 2020DBDBDBDBDBDB20-     	.n36				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   576 00000632 2000               
   577                                  	
   578 00000634 DBDB20202020202020-     	.n40				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   578 0000063D 2000               
   579 0000063F DBDB2020DBDB202020-     	.n41				db 219, 219, 32,  32,  219, 219, 32,  32,  32,  32,  0
   579 00000648 2000               
   580 0000064A DBDB2020DBDB202020-     	.n42				db 219, 219, 32,  32,  219, 219, 32,  32,  32,  32,  0
   580 00000653 2000               
   581 00000655 DBDBDBDBDBDBDBDBDB-     	.n43				db 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 0
   581 0000065E DB00               
   582 00000660 20202020DBDB202020-     	.n44				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   582 00000669 2000               
   583 0000066B 20202020DBDB202020-     	.n45				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   583 00000674 2000               
   584 00000676 20202020DBDB202020-     	.n46				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   584 0000067F 2000               
   585                                  
   586 00000681 DBDBDBDBDBDBDBDBDB-     	.n50				db 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 0
   586 0000068A DB00               
   587 0000068C DBDB20202020202020-     	.n51				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   587 00000695 2000               
   588 00000697 DBDB20202020202020-     	.n52				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   588 000006A0 2000               
   589 000006A2 DBDBDBDBDBDBDBDB20-     	.n53				db 219, 219, 219, 219, 219, 219, 219, 219, 32,  32,  0
   589 000006AB 2000               
   590 000006AD 2020202020202020DB-     	.n54				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   590 000006B6 DB00               
   591 000006B8 DBDB202020202020DB-     	.n55				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   591 000006C1 DB00               
   592 000006C3 2020DBDBDBDBDBDB20-     	.n56				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   592 000006CC 2000               
   593                                  
   594 000006CE 2020DBDBDBDBDBDB20-     	.n60				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   594 000006D7 2000               
   595 000006D9 DBDB20202020202020-     	.n61				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   595 000006E2 2000               
   596 000006E4 DBDB20202020202020-     	.n62				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   596 000006ED 2000               
   597 000006EF DBDBDBDBDBDBDBDB20-     	.n63				db 219, 219, 219, 219, 219, 219, 219, 219, 32,  32,  0
   597 000006F8 2000               
   598 000006FA DBDB202020202020DB-     	.n64				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   598 00000703 DB00               
   599 00000705 DBDB202020202020DB-     	.n65				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   599 0000070E DB00               
   600 00000710 2020DBDBDBDBDBDB20-     	.n66				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   600 00000719 2000               
   601                                  
   602 0000071B DBDBDBDBDBDBDBDBDB-     	.n70				db 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 0
   602 00000724 DB00               
   603 00000726 2020202020202020DB-     	.n71				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   603 0000072F DB00               
   604 00000731 202020202020DBDB20-     	.n72				db 32,  32,  32,  32,  32,  32,  219, 219, 32,  32,  0
   604 0000073A 2000               
   605 0000073C 20202020DBDB202020-     	.n73				db 32,  32,  32,  32,  219, 219, 32,  32,  32,  32,  0
   605 00000745 2000               
   606 00000747 2020DBDB2020202020-     	.n74				db 32,  32,  219, 219, 32,  32,  32,  32,  32,  32,  0
   606 00000750 2000               
   607 00000752 DBDB20202020202020-     	.n75				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   607 0000075B 2000               
   608 0000075D DBDB20202020202020-     	.n76				db 219, 219, 32,  32,  32,  32,  32,  32,  32,  32,  0
   608 00000766 2000               
   609                                  
   610 00000768 2020DBDBDBDBDBDB20-     	.n80				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   610 00000771 2000               
   611 00000773 DBDB202020202020DB-     	.n81				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   611 0000077C DB00               
   612 0000077E DBDB202020202020DB-     	.n82				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   612 00000787 DB00               
   613 00000789 2020DBDBDBDBDBDB20-     	.n83				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   613 00000792 2000               
   614 00000794 DBDB202020202020DB-     	.n84				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   614 0000079D DB00               
   615 0000079F DBDB202020202020DB-     	.n85				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   615 000007A8 DB00               
   616 000007AA 2020DBDBDBDBDBDB20-     	.n86				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   616 000007B3 2000               
   617                                  
   618 000007B5 2020DBDBDBDBDBDB20-     	.n90				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   618 000007BE 2000               
   619 000007C0 DBDB202020202020DB-     	.n91				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   619 000007C9 DB00               
   620 000007CB DBDB202020202020DB-     	.n92				db 219, 219, 32,  32,  32,  32,  32,  32,  219, 219, 0
   620 000007D4 DB00               
   621 000007D6 2020DBDBDBDBDBDBDB-     	.n93				db 32,  32,  219, 219, 219, 219, 219, 219, 219, 219, 0
   621 000007DF DB00               
   622 000007E1 2020202020202020DB-     	.n94				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   622 000007EA DB00               
   623 000007EC 2020202020202020DB-     	.n95				db 32,  32,  32,  32,  32,  32,  32,  32,  219, 219, 0
   623 000007F5 DB00               
   624 000007F7 2020DBDBDBDBDBDB20-     	.n96				db 32,  32,  219, 219, 219, 219, 219, 219, 32,  32,  0
   624 00000800 2000               
   625                                  
   626 00000802 202000                  	.na0				db 32,  32,  0
   627 00000805 DBDB00                  	.na1				db 219, 219, 0
   628 00000808 202000                  	.na2				db 32,  32,  0
   629 0000080B 202000                  	.na3				db 32,  32,  0
   630 0000080E 202000                  	.na4				db 32,  32,  0
   631 00000811 DBDB00                  	.na5				db 219, 219, 0
   632 00000814 202000                  	.na6				db 32,  32,  0
   633                                  
   634 00000817 4A616E756172790000-     	.m1					db 'January', 0, 0, 0
   634 00000820 00                 
   635 00000821 466562727561727900-     	.m2					db 'February', 0, 0
   635 0000082A 00                 
   636 0000082B 4D6172636800000000-     	.m3					db 'March', 0, 0, 0, 0, 0
   636 00000834 00                 
   637 00000835 417072696C00000000-     	.m4					db 'April', 0, 0, 0, 0, 0
   637 0000083E 00                 
   638 0000083F 4D6179000000000000-     	.m5					db 'May', 0, 0, 0, 0, 0, 0, 0
   638 00000848 00                 
   639 00000849 4A756E650000000000-     	.m6					db 'June', 0, 0, 0, 0, 0, 0
   639 00000852 00                 
   640 00000853 4A756C790000000000-     	.m7					db 'July', 0, 0, 0, 0, 0, 0
   640 0000085C 00                 
   641 0000085D 417567757374000000-     	.m8					db 'August', 0, 0, 0, 0
   641 00000866 00                 
   642 00000867 53657074656D626572-     	.m9					db 'September', 0
   642 00000870 00                 
   643 00000871 4F63746F6265720000-     	.m10				db 'October', 0, 0, 0
   643 0000087A 00                 
   644 0000087B 4E6F76656D62657200-     	.m11				db 'November', 0, 0
   644 00000884 00                 
   645 00000885 446563656D62657200-     	.m12				db 'December', 0, 0
   645 0000088E 00                 
   646                                  	
   647                                  	
   648                                  ; ------------------------------------------------------------------
